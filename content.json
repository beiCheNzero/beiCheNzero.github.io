[{"title":"关于函数式编程的理解","date":"2022-10-30T05:35:23.000Z","path":"2022/10/30/js高级/关于函数式编程的理解/","content":"<p>现在的很多语言都慢慢的脱离或者说在抵制面向对象编程的这种形式，比如React的类组件到后来hooks的出现，慢慢的转向函数时编程，Vue也是如此，最开始optionsAPI的时候是export default()默认导出一个对象，在对象中编写methods、computed等等，到后面compositionAPI的出现，虽然也是导出一个对象，但是对象里面是一个setup() {}的函数，在这个函数中编写对应的逻辑代码。然后是在Vue3.2版本更新后的setup语法糖，直接<code>&lt;srcipt setup&gt;&lt;/script&gt;</code>，甚至都不需要写setup() {}就可以直接在script中编写对一个的代码，慢慢的，逐渐从面向对象转变成函数式编程的。</p>\n<p>引用：</p>\n<p>Williams表示：“在真正了解函数式编程后，我就不打算再使用其他范式了。”实际上，他在大学期间使用LISP的衍生编程语言Scheme和Racket 时就爱上了函数式编程。“面向对象编程很不错，至今仍有很多人使用。但很多开发人员在接触函数式编程后，就会成为忠实的粉丝。”</p>\n<p>当然，面向对象编程和命令式编程仍然是现代软件开发的主要范式，而Haskell和Elm之类的“纯”函数式编程语言在生产代码库中相对较少。但随着编程语言扩展对函数式编程方法的支持，以及软件开发新框架的迭代，函数式编程正迅速通过各种不同的途径进入越来越多的代码库。</p>\n<p>《Elm in Action》一书的作者Richard Feldman表示：“<strong>所有这些语言都开始支持方便实现函数式风格的功能，几乎每一种语言支持的范式都在增加。</strong>”</p>\n","comments":true,"categories":[{"name":"奇思妙想","slug":"奇思妙想","permalink":"http://beichenzero.github.io/categories/%E5%A5%87%E6%80%9D%E5%A6%99%E6%83%B3/"}],"tags":[{"name":"函数式编程","slug":"函数式编程","permalink":"http://beichenzero.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"},{"name":"面向对象编程","slug":"面向对象编程","permalink":"http://beichenzero.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"}]},{"title":"14.throw-Storage-正则","date":"2022-10-30T05:34:35.000Z","path":"2022/10/30/js高级/14.throw-Storage-正则/","content":"<h4 id=\"throw\"><a href=\"#throw\" class=\"headerlink\" title=\"throw\"></a>throw</h4><p>抛出异常，但是不会中断全局代码的执行，当前函数的代码还是会被中断。</p>\n<p>抛出的类型可以是String/Number/Boolean/Object</p>\n<p>系统默认的Error类</p>\n<p><code>throw new Error(&quot;错误信息！&quot;)</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 不报错执行    </span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 报错会执行</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 无论是否报错，都会执行</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Storage\"><a href=\"#Storage\" class=\"headerlink\" title=\"Storage\"></a>Storage</h4><p>WebSotrage：localStorage、sessionStorage</p>\n<p><strong>localStorage</strong>：本地存储，提供一种永久性的存储方法，在关闭网页重新打开的时候，存储的内容依然保留</p>\n<p><strong>sessionStorage</strong>：会话存储，提供的是本次会话的存储，在关闭掉会话时，存储的内容会被清除</p>\n<p>Storage常见方法和属性：</p>\n<ul>\n<li>length</li>\n<li>getItem</li>\n<li>setItem</li>\n<li>clear</li>\n<li>key（根据索引获取key）</li>\n<li>removeItem（删除某个键值对，参数为key）</li>\n</ul>\n<p>一般我们在用到localStorage的时候会将封装一个工具函数，因为我们在存储对象的时候，setItem方法是会给我们转成字符串存取到Storage中，不便于我们观看，也不便于去获取，所以在封装函数的时候，判断是否是一个对象，然后转成字符串存取到Storage中，在通过getItem获取的时候在转成对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 转成字符串</span></span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(object)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 转回对象</span></span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.parse(Sting)</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h4 id=\"正则表达式-Regular-Expression\"><a href=\"#正则表达式-Regular-Expression\" class=\"headerlink\" title=\"正则表达式(Regular Expression)\"></a>正则表达式(Regular Expression)</h4><p><strong>简写：regex、regexp、RE</strong></p>\n<p><strong>修饰符</strong></p>\n<p>i：ignore(忽略大小写)</p>\n<p>g：global(全局搜索)</p>\n<p>m：multiple(多行匹配)</p>\n<p>方法：</p>\n<ul>\n<li><p>test方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/aaa/</span>.test(<span class=\"string\">&#x27;aaaaa&#x27;</span>)) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></li>\n<li><p>exec方法</p>\n</li>\n<li><p>match方法</p>\n<p>拿到匹配到的所有结果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> re1 = <span class=\"regexp\">/abc/ig</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> message = <span class=\"string\">&#x27;abc Abc ABC&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(message.match(re1)) <span class=\"comment\">// [&#x27;abc&#x27;, &#x27;Abc&#x27;, &#x27;ABC&#x27;]</span></span><br></pre></td></tr></table></figure></li>\n<li><p>matchAll方法</p>\n<p>给定的正则必须加<strong>g</strong></p>\n<p>返回的是一个迭代器</p>\n<p>需要使用next方法获取对应的值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> re1 = <span class=\"regexp\">/abc/ig</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> message = <span class=\"string\">&#x27;abc Abc ABC&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = message.matchAll(re1)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result.next())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result.next())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result.next())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result.next())</span><br></pre></td></tr></table></figure></li>\n<li><p>replace/replaceAll方法，替换，全局替换</p>\n</li>\n<li><p>split：通过正则来切割字符串</p>\n</li>\n<li><p>search：搜索结果(得到的是索引，否则为-1)</p>\n</li>\n</ul>\n<h4 id=\"正则规则\"><a href=\"#正则规则\" class=\"headerlink\" title=\"正则规则\"></a>正则规则</h4><p><strong>\\d</strong>：表示0-9的一个数字</p>\n<p><strong>\\s</strong>：空格符号：包括空格，制表符\\t，换行符\\n和其他少数稀有字符\\v、\\f和\\r</p>\n<p><strong>\\w</strong>：拉丁字母、数字、下划线_</p>\n<p>**.(点)**：是一种特殊字符，它匹配除换行符之外的所有字符</p>\n<p><strong>\\D</strong>：非数字</p>\n<p><strong>\\S</strong>：非空格字符</p>\n<p><strong>\\W</strong>：非单字字符</p>\n<h5 id=\"锚点\"><a href=\"#锚点\" class=\"headerlink\" title=\"锚点\"></a>锚点</h5><p>字符串可以匹配以什么开头(startsWith)/结尾(endsWith)的方法。</p>\n<p><strong>^</strong>：开头<code>/^/</code></p>\n<p>**$**：结尾<code>/$/</code></p>\n<p><code>/^\\d&#123;3,8&#125;$/ig</code>：3-8位的数字。</p>\n<p><strong>\\b</strong>：词边界</p>\n<p>**\\*<em>：转义符号：一般需要转义的符号有：$、\\、^、$、.(点)、|、？、</em>、+、(、)、</p>\n<p><strong>?</strong> ：表示0或1个。</p>\n<p>**[123456789]/[1-9]**：1-9其中的一个。</p>\n<p>在范围前面加^表示排除某些范围。</p>\n<h5 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h5><p><strong>/a{5}/ig</strong>：5个a</p>\n<p><strong>/a{3,5}/ig</strong>：3-5个a</p>\n<p>**+**：代表一个或多个  {1,}</p>\n<p><strong>？</strong>：代表0个或一个  {0,1}</p>\n<p>*****：代表0个或多个  {0,}</p>\n<h5 id=\"贪婪模式和惰性模式\"><a href=\"#贪婪模式和惰性模式\" class=\"headerlink\" title=\"贪婪模式和惰性模式\"></a>贪婪模式和惰性模式</h5><ol>\n<li><p>贪婪模式</p>\n<p>它会一直匹配到message字符串结尾将活着的》、《都当成了+所代表的内容了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> message = <span class=\"string\">&#x27;hello world，《活着》、《云边有个小卖部》&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mesRe = <span class=\"regexp\">/《.+》/ig</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = message.match(mesRe)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result) <span class=\"comment\">// [&quot;《活着》、《云边有个小卖部》&quot;]</span></span><br></pre></td></tr></table></figure></li>\n<li><p>惰性模式</p>\n<p>通常用惰性模式的比较多。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> message = <span class=\"string\">&#x27;hello world，《活着》、《云边有个小卖部》&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mesRe = <span class=\"regexp\">/《.+?》/ig</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = message.match(mesRe)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result) <span class=\"comment\">// [&#x27;《活着》&#x27;, &#x27;《云边有个小卖部》&#x27;]</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n","comments":true,"categories":[{"name":"JS","slug":"JS","permalink":"http://beichenzero.github.io/categories/JS/"}],"tags":[{"name":"throw","slug":"throw","permalink":"http://beichenzero.github.io/tags/throw/"},{"name":"storage","slug":"storage","permalink":"http://beichenzero.github.io/tags/storage/"},{"name":"正则","slug":"正则","permalink":"http://beichenzero.github.io/tags/%E6%AD%A3%E5%88%99/"}]},{"title":"13.防抖-节流","date":"2022-10-30T05:31:59.000Z","path":"2022/10/30/js高级/13.防抖-节流/","content":"<h3 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h3><h4 id=\"防抖的了解和基本使用\"><a href=\"#防抖的了解和基本使用\" class=\"headerlink\" title=\"防抖的了解和基本使用\"></a>防抖的了解和基本使用</h4><p>当我们在输入框中输入内容的时候，例如百度搜索和淘宝搜索的时候，下面会出现很多联想的内容，比如我们输入一个书，下面会出现如下图所示内容。<img src=\"../../images/img/防抖和节流/fangdou.png\" width=\"70%\"></p>\n<p>当我们频繁的去输入内容的时候，甚至是我在输入书的拼音s -&gt; sh -&gt; she的时候，他都会产生对应的联想内容，但是那些并不是我们想要去搜索的内容，这也就产生了很多不必要的网络请求。</p>\n<p>假设我们可以在输入我们想要的内容之前不去发送网络请求，或者是说尽量少发送几次网络请求。</p>\n<p>防抖就是让我们在输入 s和h之间的间隔事件比较短，就不去发送s所对应联想的内容，当我们输入框在一定时间内有内容改变的时候不去发送网络请求，在一定的的时间内内容没有改变，然后在去发送网络请求。</p>\n<p><strong>我的理解就是，在输入内容之后等待一定时间去发送网络请求，如果在此期间内输入框中的内容有改变，则重置时间，重新计算需要去发送发网络请求的时间。直到达到设定的等待时间，则去执行我们对应的操作或是发送网络请求。</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/underscore@1.13.6/underscore-umd-min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">const</span> input = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;.input&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> i = <span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"javascript\">        input.oninput = _.debounce(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`发送第<span class=\"subst\">$&#123;i++&#125;</span>次网络请求`</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;, <span class=\"number\">500</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>coderwhy的ppt中的解释：</p>\n<ul>\n<li>当事件触发的时候，响应的函数不会立即执行，而是会等待一定的时间</li>\n<li>当时间密集触发的时候，函数的触发会被频繁的推迟</li>\n<li>只有等待了一段时间也没有时间触发，才会真正的执行响应函数。</li>\n</ul>\n<p><img src=\"/2022/10/30/js%E9%AB%98%E7%BA%A7/13/JS高级\\code\\img\\防抖和节流\\fdzhixingguocheng.png\"></p>\n<span id=\"more\"></span>\n<h4 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><ul>\n<li>输入框频繁输入内容，搜索，提交信息</li>\n<li>频繁的点击某个按钮，触发某个事件</li>\n<li>监听浏览器滚动事件，完成某些特定的操作</li>\n<li>用户缩放浏览器的resize事件</li>\n</ul>\n<h3 id=\"节流throttle\"><a href=\"#节流throttle\" class=\"headerlink\" title=\"节流throttle\"></a>节流throttle</h3><p>当事件触发时，在一定时间内无论事件被触发都多少次，事件响应函数会执行一次。</p>\n<p>也就是说事件响应函数时按照固定的频率来指定的，而不是由事件触发的次数或时间来决定的。</p>\n<p><img src=\"/../../images/img/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/jieliu.png\"></p>\n<h4 id=\"应用场景-1\"><a href=\"#应用场景-1\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><ul>\n<li>监听页面的滚动事件</li>\n<li>鼠标移动事件</li>\n<li>用户频繁点击按钮操作</li>\n<li>游戏中的一些设计</li>\n</ul>\n","comments":true,"categories":[{"name":"JS","slug":"JS","permalink":"http://beichenzero.github.io/categories/JS/"}],"tags":[{"name":"debounce","slug":"debounce","permalink":"http://beichenzero.github.io/tags/debounce/"},{"name":"throttle","slug":"throttle","permalink":"http://beichenzero.github.io/tags/throttle/"}]},{"title":"12.进程-线程","date":"2022-10-30T05:30:51.000Z","path":"2022/10/30/js高级/12.进程-线程-微任务-宏任务/","content":"<h3 id=\"进程和线程\"><a href=\"#进程和线程\" class=\"headerlink\" title=\"进程和线程\"></a>进程和线程</h3><p>进程：是计算机已经运行的程序，是操作系统管理程序的一种方式</p>\n<p>线程：操作系统能运行运算调度的最小单位，通常情况下是被包含在进程中·</p>\n<p><strong>每一个进程中至少有一个线程</strong>。</p>\n<p>当我们启动一个应用程序的时候，默认就会启动一个进程(也可以是多进程的)</p>\n<p>每一个进程中都会启动至少一个线程用来执行程序中的代码，这个线程被称为<strong>主线程</strong>。</p>\n<p>所以我们也说进程是线程的<strong>容器</strong>。</p>\n<h4 id=\"宏任务和微任务\"><a href=\"#宏任务和微任务\" class=\"headerlink\" title=\"宏任务和微任务\"></a>宏任务和微任务</h4><p>事件循环包含执行上下文，浏览器，同时也维护着队列。</p>\n<p>但是不止维护着一个队列，有宏任务队列和微任务队列。</p>\n<p><strong>宏任务队列</strong>：AJAX、setTimeout、setInterval、DOM监听、UI Rendering等</p>\n<p><strong>微任务队列</strong>：Promise的then回调、Mutation Observer API、queueMicrotask()等</p>\n<p>在执行上下文栈中为空时，会去队列中寻找任务进行执行，在HTML浏览器和NODE中都会按照这样一个方式执行。先执行微任务队列，然后在执行宏任务队列，在微任务还没有的时候，先去执行宏任务队列，如果在执行宏任务之前发现微任务队列中有任务，那么会优先去执行微任务队列。<strong>在每次执行宏任务之前都会去看一下微任务队列中有没有执行完，如果没有则会先清空微任务队列，然后在执行宏任务队列</strong>。</p>\n","comments":true,"categories":[{"name":"JS","slug":"JS","permalink":"http://beichenzero.github.io/categories/JS/"}],"tags":[{"name":"进程","slug":"进程","permalink":"http://beichenzero.github.io/tags/%E8%BF%9B%E7%A8%8B/"},{"name":"线程","slug":"线程","permalink":"http://beichenzero.github.io/tags/%E7%BA%BF%E7%A8%8B/"},{"name":"微任务","slug":"微任务","permalink":"http://beichenzero.github.io/tags/%E5%BE%AE%E4%BB%BB%E5%8A%A1/"},{"name":"宏任务","slug":"宏任务","permalink":"http://beichenzero.github.io/tags/%E5%AE%8F%E4%BB%BB%E5%8A%A1/"}]},{"title":"11.iterator-generator","date":"2022-10-30T05:29:58.000Z","path":"2022/10/30/js高级/11.iterator-generator/","content":"<h3 id=\"iterator-迭代器\"><a href=\"#iterator-迭代器\" class=\"headerlink\" title=\"iterator(迭代器)\"></a>iterator(迭代器)</h3><p>含义：使用户在容器对象上遍访的对象，使用该接口无需关心对象的内部细节。</p>\n<p>迭代器在JavaScript中的标准：</p>\n<ul>\n<li>包含一个next方法<ul>\n<li>next方法的可以有0个或1个参数</li>\n<li>返回的对象应当包含done，value</li>\n<li>done(boolean)为false的时候表示这个对象还没有迭代完，为true表示该对象已经迭代完了</li>\n<li>value表示当前需要迭代的对象，迭代结束之后返回默认值undefined。</li>\n</ul>\n</li>\n</ul>\n<p>数组迭代器：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> names = [<span class=\"string\">&#x27;abc&#x27;</span>, <span class=\"string\">&#x27;cba&#x27;</span>, <span class=\"string\">&#x27;nba&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">// 封装一个函数为数组创建迭代器。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createArrayIterator</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> index = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">next</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index &lt; arr.length) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                    <span class=\"attr\">done</span>: <span class=\"literal\">false</span>, <span class=\"attr\">value</span>: arr[index++]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                    <span class=\"attr\">done</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// namesIterator就是迭代器。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> namesIterator = createArrayIterator(names)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(namesIterator.next())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(namesIterator.next())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(namesIterator.next())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(namesIterator.next())</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h4 id=\"可迭代对象\"><a href=\"#可迭代对象\" class=\"headerlink\" title=\"可迭代对象\"></a>可迭代对象</h4><p>可迭代对象：</p>\n<ol>\n<li>必须实现一个特定的函数: [Symbol.iterator]</li>\n<li>这个函数需要返回一个迭代器(这个迭代器用于迭代当前的的对象)</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> info = &#123;</span><br><span class=\"line\">    <span class=\"attr\">names</span>: [<span class=\"string\">&#x27;abc&#x27;</span>, <span class=\"string\">&#x27;cba&#x27;</span>, <span class=\"string\">&#x27;nba&#x27;</span>],</span><br><span class=\"line\">    [<span class=\"built_in\">Symbol</span>.iterator]() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// console.log(this) // info对象</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> index = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> iterator = &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">next</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// console.log(this) // iterator对象(如果调用call)</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (index &lt; <span class=\"built_in\">this</span>.names.length) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">done</span>: <span class=\"literal\">false</span>, <span class=\"attr\">value</span>: <span class=\"built_in\">this</span>.names[index++] &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">done</span>: <span class=\"literal\">true</span>, <span class=\"attr\">value</span>: <span class=\"literal\">undefined</span> &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> iterator</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 不能直接通过console.log(info[Symbol.iterator]().next())去运行，不然每次都会新建index。只能获取到第一个值。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator = info[<span class=\"built_in\">Symbol</span>.iterator]().next.bind(info)</span><br><span class=\"line\"><span class=\"comment\">// iterator.next.bind(info)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果在返回的对象中使用this</span></span><br><span class=\"line\"><span class=\"comment\">// 第一种方式</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(iterator.next.call(info))</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(iterator.next.call(info))</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(iterator.next.call(info))</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(iterator.next.call(info))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二种方式</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第三种方式，直接将next: () =&gt; &#123;&#125;变成箭头函数。</span></span><br></pre></td></tr></table></figure>\n\n<p>for-of的本质就是拿到这个可迭代对象调用其中的<code>[Symbol.iterator]()</code>，知道done为true时结束。</p>\n<p><strong>可迭代对象迭代键值对的对象</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> info = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;beichen&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">    <span class=\"attr\">height</span>: <span class=\"number\">1.75</span>,</span><br><span class=\"line\">    [<span class=\"built_in\">Symbol</span>.iterator]: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> keys = <span class=\"built_in\">Object</span>.keys(info) <span class=\"comment\">// 迭代keys</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> values = <span class=\"built_in\">Object</span>.values(info) <span class=\"comment\">// 迭代values</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> entires = <span class=\"built_in\">Object</span>.entries(info) <span class=\"comment\">// 迭代key and value</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> index = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> iterator = &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">next</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (index &lt; entires.length) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">done</span>: <span class=\"literal\">false</span>, <span class=\"attr\">value</span>: entires[index++] &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">done</span>: <span class=\"literal\">true</span>, <span class=\"attr\">value</span>: <span class=\"literal\">undefined</span> &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> iterator</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> info) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [key, value] = item</span><br><span class=\"line\">    <span class=\"comment\">// console.log(item)</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key, value)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"generator-生成器\"><a href=\"#generator-生成器\" class=\"headerlink\" title=\"generator(生成器)\"></a>generator(生成器)</h3><p>生成器也是一个特殊的迭代器。</p>\n<p>生成器函数的特点：</p>\n<ol>\n<li>function后面会跟上一个符号: *   (*号可以在function后面function* foo()，也可以在函数名前面<code>function *foo()</code>，通常会跟在function，看个人习惯吧。)</li>\n<li>代码的执行可以被yield控制。（yield的作用在函数开始到yield的后面的代码，yield前面的代码时不执行的）</li>\n<li>生成器函数默认在执行的时候会返回一个生成器对象<ul>\n<li>要想执行生成器函数内部的代码，需要执行生成器对象的next方法</li>\n<li>当遇到yield就会终端执行。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;111&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;222&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;yield后面的代码，所在的哪一行&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;333&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;444&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">yield</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;555&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> generator = foo()</span><br><span class=\"line\">generator.next() <span class=\"comment\">// 111 222 yield后面的代码，所在的哪一行</span></span><br><span class=\"line\">generator.next() <span class=\"comment\">// 111 222 333 444</span></span><br><span class=\"line\">generator.next() <span class=\"comment\">// 111 222 333 444 555</span></span><br></pre></td></tr></table></figure>\n\n<p>进阶用法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;111&#x27;</span>, num)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;222&#x27;</span>, num)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> next2 = <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;aaaa&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;333&#x27;</span>, next2)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;444&#x27;</span>, next2)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> next3 = <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;bbbb&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;555&#x27;</span>, next3)</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;结尾cccc&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;函数执行结束&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> generator = foo(<span class=\"string\">&#x27;next1&#x27;</span>) <span class=\"comment\">// 第一次传入的参数会在foo(num)由num接收</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> g1 = generator.next() <span class=\"comment\">// 这里传入的参数接收不到</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> g2 = generator.next(<span class=\"string\">&#x27;next2&#x27;</span>) <span class=\"comment\">// 这里传入的参数时在第一次调用yield的前面的接收到的</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> g3 = generator.next(<span class=\"string\">&#x27;next3&#x27;</span>) <span class=\"comment\">// 这里传入的参数时在第二次调用yield的前面接收到的</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(g1) <span class=\"comment\">// &#123; done: false, value: &#x27;aaaa&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(g2) <span class=\"comment\">// &#123; done: false, value: &#x27;bbbb&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(g3) <span class=\"comment\">// &#123; done: false, value: &#x27;cccc&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// foo()最后返回的是&#123; done: true, value: 函数执行结束 &#125;表示直接结束，返回值为undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>return提前结束。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">generator.return(<span class=\"string\">&#x27;aaa&#x27;</span>)<span class=\"comment\">// 可以传递参数，但是在yield哪一行就是结束了，下面的代码不会执行。</span></span><br></pre></td></tr></table></figure>\n\n<p>throw new Error()结束。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">generator.throw(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;抛出异常结束&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成器代替迭代器\"><a href=\"#生成器代替迭代器\" class=\"headerlink\" title=\"生成器代替迭代器\"></a>生成器代替迭代器</h3><ol>\n<li><p>第一个例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> names = [<span class=\"string\">&#x27;abc&#x27;</span>, <span class=\"string\">&#x27;cba&#x27;</span>, <span class=\"string\">&#x27;nba&#x27;</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">createArrayGenerator</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span>* arr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> namesGenerator = createArrayGenerator(names)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(namesGenerator.next())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(namesGenerator.next())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(namesGenerator.next())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(namesGenerator.next())</span><br></pre></td></tr></table></figure></li>\n<li><p>yield替换类中的实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name, age, height, friends</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.height = height</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.friends = friends</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    *[<span class=\"built_in\">Symbol</span>.iterator]() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span>* <span class=\"built_in\">Object</span>.values(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">        <span class=\"comment\">// yield* Object.keys(this)</span></span><br><span class=\"line\">        <span class=\"comment\">// yield* Object.entries(this)</span></span><br><span class=\"line\">        <span class=\"comment\">// yield* this.friends</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">&#x27;beichen&#x27;</span>, <span class=\"number\">22</span>, <span class=\"number\">1.76</span>, [<span class=\"string\">&#x27;beichen&#x27;</span>, <span class=\"string\">&#x27;mygirl-haixia&#x27;</span>, <span class=\"string\">&#x27;xiaoqiang&#x27;</span>])</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> p) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> pItem = p[<span class=\"built_in\">Symbol</span>.iterator]()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pItem.next())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pItem.next())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pItem.next())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pItem.next())</span><br></pre></td></tr></table></figure></li>\n</ol>\n","comments":true,"categories":[{"name":"JS","slug":"JS","permalink":"http://beichenzero.github.io/categories/JS/"}],"tags":[{"name":"iterator","slug":"iterator","permalink":"http://beichenzero.github.io/tags/iterator/"},{"name":"generator","slug":"generator","permalink":"http://beichenzero.github.io/tags/generator/"}]},{"title":"10.Promise的基本使用和理解","date":"2022-10-30T05:29:03.000Z","path":"2022/10/30/js高级/10.Promise基本使用和理解/","content":"<h3 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h3><h4 id=\"1-异步处理代码的困境\"><a href=\"#1-异步处理代码的困境\" class=\"headerlink\" title=\"1.异步处理代码的困境\"></a>1.异步处理代码的困境</h4><p>不用Promise处理异步代码，在ES6之前处理异步代码的一般方式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">execCode</span>(<span class=\"params\">count, successCallback, failureCallback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(count)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> totalCount = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">                totalCount += i</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            successCallback(totalCount)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            failureCallback(<span class=\"string\">`<span class=\"subst\">$&#123;count&#125;</span>出错`</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, <span class=\"number\">3000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">execCode(<span class=\"number\">100</span>, <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;执行成功，结果为:&#x27;</span>, value)</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;执行失败，原因为:&#x27;</span>, err)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>设计处理异步代码函数的人，设计的方案可能有多种方法，比如函数名的不同、传递参数的顺序等</p>\n<p>当使用这个函数的人去使用这个处理异步代码函数的时候，不知道函数名的命名规范，不知道传递参数的顺序，很容易出现问题，就像“一千个人有一千个哈姆雷特”，很难统一规范，虽然随着时间的推移，在社区中也会慢慢的去统一这种规范，但是需要花费很长的时间的演变。</p>\n<p>在ES6之后推出了Promise，为了解决这种困境。</p>\n<span id=\"more\"></span>\n<h4 id=\"2-Promise处理异步代码\"><a href=\"#2-Promise处理异步代码\" class=\"headerlink\" title=\"2.Promise处理异步代码\"></a>2.Promise处理异步代码</h4><p>我们从代码量上来看，两者好像都差不多，主要思想也都是差不多的，参数，回调函数这些东西，但是Promise在execCode函数的执行，传入参数上来说，所传的参数不同，前者需要传入参数，以及成功和失败的回调函数，后者(Promise)只需要传入参数即可，回调函数它内部或是底层帮我们完成了，我们只需要按照统一的规范去编写代码就可以了，不用担心哪里会有问题。不用担心规范的问题。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">execCode</span>(<span class=\"params\">total</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (total &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> totalCount = <span class=\"number\">0</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; total; i++) &#123;</span><br><span class=\"line\">                    totalCount += i</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                resolve(totalCount)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                reject(<span class=\"string\">`<span class=\"subst\">$&#123;total&#125;</span>出错`</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">3000</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">execCode(<span class=\"number\">100</span>).then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`执行成功，结果为：<span class=\"subst\">$&#123;value&#125;</span>`</span>)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`执行失败，原因为：<span class=\"subst\">$&#123;err&#125;</span>`</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-Promise的状态\"><a href=\"#3-Promise的状态\" class=\"headerlink\" title=\"3.Promise的状态\"></a>3.Promise的状态</h4><ul>\n<li>pending：待定状态(没有兑现，没有拒绝)</li>\n<li>fulfilled：兑现状态(已经兑现)</li>\n<li>rejected：拒绝状态(已经拒绝)</li>\n</ul>\n<p><em><strong>Promise的状态一旦从pending转变到另一状态(pending=&gt; fulfilled/pending =&gt; rejected),那么状态就不会在改变，即使再次执行其他的回调函数也不能改变状态。</strong></em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Promise的状态一旦确定下来，就不会更改，在执行其他的回调函数不能改变状态</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 1.pending(待定状态)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2.fulfilled(兑现状态)</span></span><br><span class=\"line\">    resolve() <span class=\"comment\">// 只会调用一次</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 3.rejected(拒绝状态)</span></span><br><span class=\"line\">    reject() <span class=\"comment\">// 虽然后面的代码也会执行，但是then/catch只会调用一个。</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise.then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;成功的回调&quot;</span>)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;失败的回调&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Promise的resolve-reject\"><a href=\"#Promise的resolve-reject\" class=\"headerlink\" title=\"Promise的resolve/reject\"></a>Promise的resolve/reject</h4><h5 id=\"1-resolve的参数\"><a href=\"#1-resolve的参数\" class=\"headerlink\" title=\"1.resolve的参数\"></a>1.resolve的参数</h5><ul>\n<li><p>普通值(数组/对象/字符串…)</p>\n</li>\n<li><p>resolve(promise)</p>\n<p>这里传入的新的promise，那么新的promise的会决定原有promise的状态。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newPromise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">reject</span> =&gt;</span> reject())</span><br><span class=\"line\"><span class=\"keyword\">const</span> oldPromise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> resolve(newPromise))</span><br></pre></td></tr></table></figure>\n\n<p>也就是说oldPromise原本的状态是从pending(待定状态)转变成fulfilled(已兑现的状态)，但是由于resolve接收的参数是一个promise对象，那么oldPromise的状态会编程newPromise的状态，也就是oldPromise的状态编程了已拒绝的状态(rejected。</p>\n</li>\n<li><p>如果resolve传入的对象实现了then方法，那么会执行该then方法，并根据then方法的返回结果来决定Promise的状态</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> resolve(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;beichen&#x27;</span>,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">then</span>(<span class=\"params\">resolve</span>)</span> &#123;</span><br><span class=\"line\">        resolve(<span class=\"string\">&#x27;111&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(res)) <span class=\"comment\">// 111</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"2-promise的then方法的参数\"><a href=\"#2-promise的then方法的参数\" class=\"headerlink\" title=\"2.promise的then方法的参数\"></a>2.promise的then方法的参数</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// resolve(&#x27;success&#x27;)</span></span><br><span class=\"line\">    reject(<span class=\"string\">&#x27;failure&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`成功回调:<span class=\"subst\">$&#123;res&#125;</span>`</span>)</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`失败回调:<span class=\"subst\">$&#123;err&#125;</span>`</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-Promise-then的返回值是一个promise对象\"><a href=\"#3-Promise-then的返回值是一个promise对象\" class=\"headerlink\" title=\"3.Promise.then的返回值是一个promise对象\"></a>3.Promise.then的返回值是一个promise对象</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">&#x27;aaaa&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;resolve&quot;</span>, res) <span class=\"comment\">// aaaa</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res + <span class=\"string\">&#x27;bbbbb&#x27;</span></span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;resolve2&quot;</span>, res) <span class=\"comment\">// aaaabbbbb</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res + <span class=\"string\">&#x27;ccccc&#x27;</span></span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;resolve3&#x27;</span>, res) <span class=\"comment\">// aaaabbbbbccccc</span></span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;reject&#x27;</span>, err)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-Promise-catch的返回值\"><a href=\"#4-Promise-catch的返回值\" class=\"headerlink\" title=\"4.Promise.catch的返回值\"></a>4.Promise.catch的返回值</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">&#x27;aaaa&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;resolve&quot;</span>, res) <span class=\"comment\">// 执行 resolve aaaa</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res + <span class=\"string\">&#x27;bbbbb&#x27;</span></span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;resolve2&quot;</span>, res) <span class=\"comment\">// 执行 resolve2 aaaabbbbb</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;错误&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res + <span class=\"string\">&#x27;ccccc&#x27;</span></span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;resolve3&#x27;</span>, res) <span class=\"comment\">// 不会执行</span></span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;reject&#x27;</span>, err) <span class=\"comment\">// reject 错误</span></span><br></pre></td></tr></table></figure>\n\n<p>最最后加的catch捕获错误，并不是加到第三个then返回的promise对象上的，如果想要执行catch函数，捕获到错误，第一种方式就是在<code>new Promise((resolve, reject) =&gt; reject())</code>这里调用reject回调函数，他不会进入到then里面，而是找到当前promise调用的第一个catch，无论前面写了多少个then，都不会执行。第二种就是通过resolve进入到then里面，然后在then中抛出异常，终端函数的执行，promise会捕获异常，直接catch函数。</p>\n<h5 id=\"5-finally的回调\"><a href=\"#5-finally的回调\" class=\"headerlink\" title=\"5.finally的回调\"></a>5.finally的回调</h5><p>无论promise的状态是fulfilled还是rejected的状态，最终都会执行finally函数，且不接收参数。</p>\n<h4 id=\"Promise的类方法\"><a href=\"#Promise的类方法\" class=\"headerlink\" title=\"Promise的类方法\"></a>Promise的类方法</h4><ol>\n<li><p>resolve/reject方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">&quot;成功&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject(<span class=\"string\">&quot;失败&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n<li><p>all方法</p>\n<p><strong>其中只要有一个拒绝状态就回调Promise.all().catch(err=&gt; {})</strong></p>\n<p>当all()里面的promise对象的决议都为fulfilled的时候，会将这两个promise的决议结果存放在数组中，并调用Promise.all().then()方法。如果决议在定时器中拿到结果，那么也会等所有的resolve决议结束后在执行all.then方法，前提是所有决议中没有reject()。否则会直接执行all.catch()。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">&quot;p1 resolve&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// resolve(&quot;p2 resolve&quot;)</span></span><br><span class=\"line\">    reject(<span class=\"string\">&quot;p2 reject&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([p1, p2]).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(res) // [&quot;p1 resolve&quot;, &quot;p2 resolve&quot;]</span></span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err) <span class=\"comment\">// p2 reject</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>当all()里面有一个promise对象的决议为rejected的时候，就会将这个拒绝的决议的结果付给Promise.all().catch(err)的参数err。</p>\n</li>\n<li><p>allSettled方法</p>\n<p><strong>所有的Promise都有结果时返回，并且结果包含对应promise的决议状态和返回的结果，返回一个数组，数组中用对象存储决议状态和结果</strong></p>\n<p>该方法会在所有的promise结果都返回的时候执行，无论决议结果是fulfilled还是rejected，并一定执行<code>Promise.allSettled([p1, p2]).then(res =&gt; console.log(res))</code>，返回的结果包含对应promise的决议状态和返回的结果。</p>\n</li>\n<li><p>race方法</p>\n<p><strong>谁先拿到结果就返回谁。race([])传入一个数组</strong></p>\n<p>谁有结果就先用谁的，无论决议结果如何。<code>Promise.race([p1, p2]).then(res =&gt; console.log(res)).catch(err =&gt; console.log(err))</code></p>\n</li>\n<li><p>any方法</p>\n<p><strong>谁先有兑现状态就用谁的，否则返回所有的promise都是拒绝状态</strong></p>\n<p>谁先有fulfilled的结果就用谁的，如果都没有，那么就返回all promise were rejected。</p>\n</li>\n</ol>\n<h3 id=\"async-await\"><a href=\"#async-await\" class=\"headerlink\" title=\"async/await\"></a>async/await</h3><p>async/await就是Promise和generator的语法糖，结合两种方法一起使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">requestData</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            resolve(url)</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">getData</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res1 = <span class=\"keyword\">yield</span> requestData(<span class=\"string\">&#x27;beichen&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res2 = <span class=\"keyword\">yield</span> requestData(res1 + <span class=\"string\">&#x27; and&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res3 = <span class=\"keyword\">yield</span> requestData(res2 + <span class=\"string\">&#x27; haixia&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> generator = getData()</span><br><span class=\"line\"><span class=\"comment\">// console.log(generator.next()) // &#123; done: false, value: Promise对象 &#125;</span></span><br><span class=\"line\">generator.next().value.then(<span class=\"function\"><span class=\"params\">res1</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res1) <span class=\"comment\">// beichen</span></span><br><span class=\"line\">    generator.next(res1).value.then(<span class=\"function\"><span class=\"params\">res2</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res2) <span class=\"comment\">// beichen and</span></span><br><span class=\"line\">        generator.next(res2).value.then(<span class=\"function\"><span class=\"params\">res3</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(res3) <span class=\"comment\">// beichen and haixia</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>解释一下执行的顺序：</p>\n<ul>\n<li>定义了一个requestData的函数，并传入一个参数</li>\n<li>定义了一个getData的生成器函数</li>\n<li>调用getData生成器函数，返回一个生成器对象。</li>\n<li>调用生成器的next()方法获取到的是requestData(‘beichen’)所返回的一个对象，这个对象里面的value的值是一个Promise对象，因为在requestData中的定时器中返回的promise的状态是fulfilled，所以我们继续调用promise对象的then方法，获取到resolve(url)返回的值，并打印res1。得到beichen。</li>\n<li>然后继续调用生成器的next()方法，并把res 也就是beichen字符串传递给getData生成器函数中的res1，第一个yield前面的函数得到返回值res(‘beichen’)，并继续执行第二个yield后面的函数，参数进行拼接，继续重复上一步的操作。</li>\n<li>拿到res2的结果，继续将res2作为参数传递给下一个yield前面的res，继续执行。最后打印得到res3的结果。</li>\n<li>如果继续执行生成器的next函数，那么会得到<code>&#123; done: true, value: undefined &#125;</code>获取不到value的值，所以继续执行也就没有什么意义了。</li>\n</ul>\n<p>接下来就是async/await的简便方法(语法糖)执行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">requestData</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            resolve(url)</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getData</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res1 = <span class=\"keyword\">await</span> requestData(<span class=\"string\">&#x27;beichen&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res1) <span class=\"comment\">// beichen</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> res2 = <span class=\"keyword\">await</span> requestData(res1 + <span class=\"string\">&#x27; and&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res2) <span class=\"comment\">// beichen and</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> res3 = <span class=\"keyword\">await</span> requestData(res2 + <span class=\"string\">&#x27; haixia&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res3) <span class=\"comment\">// beichen and haixia</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getData()</span><br></pre></td></tr></table></figure>\n\n<p>从代码上来看，简洁了很多，从结构上来看，更加的清晰。</p>\n","comments":true,"categories":[{"name":"JS","slug":"JS","permalink":"http://beichenzero.github.io/categories/JS/"}],"tags":[{"name":"Primise","slug":"Primise","permalink":"http://beichenzero.github.io/tags/Primise/"},{"name":"promiseAPI","slug":"promiseAPI","permalink":"http://beichenzero.github.io/tags/promiseAPI/"}]},{"title":"9.Proxy-Reflect","date":"2022-10-30T05:28:05.000Z","path":"2022/10/30/js高级/9.Proxy-reflect/","content":"<h3 id=\"Proxy\"><a href=\"#Proxy\" class=\"headerlink\" title=\"Proxy\"></a>Proxy</h3><ol>\n<li><p>监听对象的操作</p>\n<p>vue2中响应式原理的核心代码(ES5之前)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;beichen&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">    <span class=\"attr\">height</span>: <span class=\"number\">1.75</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = obj[key]</span><br><span class=\"line\">    <span class=\"comment\">// 存取属性描述符</span></span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(obj, key, &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">newValue</span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`监听: <span class=\"subst\">$&#123;key&#125;</span>属性的改变: <span class=\"subst\">$&#123;newValue&#125;</span>`</span>)</span><br><span class=\"line\">            value = newValue</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`监听: 获取<span class=\"subst\">$&#123;key&#125;</span>属性的值`</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.name)</span><br><span class=\"line\">obj.name = <span class=\"string\">&quot;haixia&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>缺点：</p>\n<ul>\n<li>Object.defineProperty设计初衷不是为了监听对象中的某个属性。</li>\n<li>我们在定义某些属性的时候，初衷是定义一个普通的属性，但是后面我们强行把它变成了数据属性描述符。</li>\n<li>如果我们想要监听更加更富的操作，比如，添加/删除属性，那么Object.defineProperty是做不到的。<span id=\"more\"></span>\n<h4 id=\"proxy的set-get-捕获器\"><a href=\"#proxy的set-get-捕获器\" class=\"headerlink\" title=\"proxy的set/get(捕获器)\"></a>proxy的set/get(捕获器)</h4></li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p><strong>get</strong></p>\n<p>get() {}有三个参数</p>\n<ul>\n<li>target：被监听的对象(此处的obj)</li>\n<li>property：被获取属性的key</li>\n<li>receiver：被调用的代理对象(objProxy)</li>\n</ul>\n</li>\n<li><p><strong>set</strong></p>\n<p>set() {}有四个参数</p>\n<ul>\n<li>target：被监听的对象(此处的obj)</li>\n<li>property：将要设置属性的key</li>\n<li>value：新属性值</li>\n<li>receiver：被调用的代理对象(objProxy)</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;haixia&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">24</span>,</span><br><span class=\"line\">    <span class=\"attr\">height</span>: <span class=\"number\">1.58</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> objProxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(obj, &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">target, key, newValue, proxyObject</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`监听：<span class=\"subst\">$&#123;key&#125;</span>被设置为<span class=\"subst\">$&#123;newValue&#125;</span>`</span>)</span><br><span class=\"line\">        target[key] = newValue</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">target, key, proxyObject</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`监听：<span class=\"subst\">$&#123;key&#125;</span>被获取`</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> target[key]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">objProxy.name = <span class=\"string\">&quot;beichen&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(objProxy.age)</span><br><span class=\"line\">objProxy.address = <span class=\"string\">&quot;江西九江&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>**tips:**对obj的操作是不会被监听到的，在代理对象中设置新的属性值也是没问题的。如果我们不去重写get/set方法，也是可以完成响应式的获取和设置，但是当我们重写get/set之后，我们需要额外的做一些操作，就需要我们自己完成对应的事情，比如get返回对应的值，set设置新的值等。</p>\n<h4 id=\"其他捕获器的监听方法\"><a href=\"#其他捕获器的监听方法\" class=\"headerlink\" title=\"其他捕获器的监听方法\"></a>其他捕获器的监听方法</h4><ol>\n<li><p>deleteProperty（删除）</p>\n</li>\n<li><p>has（key in tartget）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>, num1, num2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> fooProxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(foo, &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">apply</span>(<span class=\"params\">target, thisArg, otherArgs</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;监听了apply操作&quot;</span>)</span><br><span class=\"line\">        target.apply(thisArg, otherArgs)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">construct</span>(<span class=\"params\">target, argArray, newTarget</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;---&quot;</span> + target, argArray, newTarget)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> target(...argArray)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">fooProxy.apply(<span class=\"string\">&quot;abc&quot;</span>, [<span class=\"string\">&#x27;111&#x27;</span>, <span class=\"string\">&#x27;222&#x27;</span>])</span><br><span class=\"line\"><span class=\"keyword\">new</span> fooProxy(<span class=\"string\">&#x27;111&#x27;</span>, <span class=\"string\">&#x27;222&#x27;</span>)</span><br></pre></td></tr></table></figure></li>\n<li><p>apply（foo.apply()）</p>\n</li>\n<li><p>construct（new fooProxy()）</p>\n</li>\n</ol>\n<h3 id=\"Reflect\"><a href=\"#Reflect\" class=\"headerlink\" title=\"Reflect\"></a>Reflect</h3><p>Reflect和Proxy共同完成</p>\n<p>好处:</p>\n<ul>\n<li>转而间接的去操作对象，这也是代理对象的目的</li>\n<li>Reflect的捕获器和Proxy是一一对应的，且有返回值，对于代码的角度来说更加的严谨</li>\n<li>好处三:<ul>\n<li>receiver就是外层的Proxy对象</li>\n<li>Reflect.set/get的最后一个参数可以决定对象访问器中的setter/getter中的this指向</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">_name</span>: <span class=\"string\">&quot;beichen&quot;</span>,</span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"title\">name</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>) <span class=\"comment\">// 默认是obj</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>._name = value</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title\">name</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>._name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> objProxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(obj, &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">target, key, newValue, receiver</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 不要直接操作原对象，也就是不要直接操作target(obj)</span></span><br><span class=\"line\">        <span class=\"comment\">// 转而间接的去操作对象，这也是代理对象的目的</span></span><br><span class=\"line\">        <span class=\"comment\">// Reflect的捕获器和Proxy是一一对应的，且有返回值，对于代码的角度来说更加的严谨</span></span><br><span class=\"line\">        <span class=\"comment\">// Reflect.set(target, key, newValue)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Reflect</span>.set(target, key, newValue, receiver)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`修改<span class=\"subst\">$&#123;key&#125;</span>成功，值为<span class=\"subst\">$&#123;newValue&#125;</span>`</span>)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`修改<span class=\"subst\">$&#123;key&#125;</span>失败`</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">target, key, receiver</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> value = <span class=\"built_in\">Reflect</span>.get(target, key, receiver)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`获取<span class=\"subst\">$&#123;key&#125;</span>的值成功`</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`获取<span class=\"subst\">$&#123;key&#125;</span>的值失败`</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">objProxy.name = <span class=\"string\">&#x27;haixia&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(objProxy.name)</span><br></pre></td></tr></table></figure>\n\n<p>reflect结合construct的使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在ES5中就有这样的代码，如果浏览器支持Reflect可以这样做，但是如果不支持，我们也可以用call/apply的方式来写</span></span><br><span class=\"line\">    Person.call(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;haixia&quot;</span>, <span class=\"number\">24</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 这里含义是借用Person的构造函数，传入[&quot;beichen&quot;, 18]的参数，创建一个Student的对象的实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> stu = <span class=\"built_in\">Reflect</span>.construct(Person, [<span class=\"string\">&quot;beichen&quot;</span>, <span class=\"number\">18</span>], Student)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> stu2 = <span class=\"keyword\">new</span> Student()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stu2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stu) <span class=\"comment\">// Student</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stu.__proto__ === Student.prototype) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stu <span class=\"keyword\">instanceof</span> Student) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n","comments":true,"categories":[{"name":"JS","slug":"JS","permalink":"http://beichenzero.github.io/categories/JS/"}],"tags":[{"name":"proxy","slug":"proxy","permalink":"http://beichenzero.github.io/tags/proxy/"},{"name":"reflect","slug":"reflect","permalink":"http://beichenzero.github.io/tags/reflect/"}]},{"title":"8.ES7-ES13新特性","date":"2022-10-30T05:27:03.000Z","path":"2022/10/30/js高级/8.ES7-ES13新特性/","content":"<h4 id=\"ES7新特性\"><a href=\"#ES7新特性\" class=\"headerlink\" title=\"ES7新特性\"></a>ES7新特性</h4><ul>\n<li><strong>includes</strong>：查询是否包含某一个值</li>\n<li>******：类似<code>Math.pow</code>,做平方，比如<code>num ** 2 == Math.pow(num, 2)</code>  </li>\n</ul>\n<h4 id=\"ES8新特性\"><a href=\"#ES8新特性\" class=\"headerlink\" title=\"ES8新特性\"></a>ES8新特性</h4><ol>\n<li><p>对象相关属性</p>\n<ul>\n<li>Object.keys：获取常见对象的key</li>\n<li>Object.values：获取常见对象的value</li>\n<li>Object.entries：获取常见对象的[key，value]，也可以对数组/字符串进行操作。</li>\n</ul>\n</li>\n<li><p>字符串填充方法</p>\n<ul>\n<li><p>padStart/padEnd</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 场景一: 对事件处理</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> minute = <span class=\"string\">&#x27;5&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(minute.padStart(<span class=\"number\">2</span>, <span class=\"string\">&#x27;0&#x27;</span>)) <span class=\"comment\">// 05</span></span><br><span class=\"line\"><span class=\"comment\">// 如果大于两位则不会变</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(minute.padEnd(<span class=\"number\">2</span>, <span class=\"string\">&#x27;0&#x27;</span>)) <span class=\"comment\">// 50</span></span><br><span class=\"line\"><span class=\"comment\">// 场景二：对身份证/银行卡等进行隐藏数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cardNumber = <span class=\"string\">&#x27;123456789123456789&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> lastNumber = cardNumber.slice(-<span class=\"number\">4</span>) <span class=\"comment\">// 截取最后四位</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> finalCardNumber = lastNumber.padStart(cardNumber.length, <span class=\"string\">&#x27;*&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(finalCardNumber) <span class=\"comment\">// **************6789</span></span><br></pre></td></tr></table></figure></li>\n<li><p><em>Object</em>.getOwnPropertyDescriptors</p>\n</li>\n<li><p>async/await(后续补充)</p>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"ES9新特性\"><a href=\"#ES9新特性\" class=\"headerlink\" title=\"ES9新特性\"></a>ES9新特性</h4><ol>\n<li><p>iterators</p>\n</li>\n<li><p>Promise finally （后续补充）</p>\n<span id=\"more\"></span>\n<h4 id=\"ES10新特性\"><a href=\"#ES10新特性\" class=\"headerlink\" title=\"ES10新特性\"></a>ES10新特性</h4></li>\n<li><p>flat/flatMap</p>\n<p>flat数组扁平化。</p>\n</li>\n<li><p>Object.fromEntries可以把entries转成对象</p>\n</li>\n<li><p>trimStart/trimEnd去除首/尾部的空格</p>\n</li>\n<li><p>Symbol description</p>\n</li>\n<li><p>Option catch binding: 后续补充</p>\n</li>\n</ol>\n<h4 id=\"ES11新特性\"><a href=\"#ES11新特性\" class=\"headerlink\" title=\"ES11新特性\"></a>ES11新特性</h4><ol>\n<li><p>BigInt：表示大数字。在大数字结尾加一个n</p>\n</li>\n<li><p>??(空值合并运算符)：前面的值为undefined/null会指向后面的值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> message = <span class=\"literal\">null</span> ?? <span class=\"string\">&quot;默认值&quot;</span> <span class=\"comment\">// &quot;默认值&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> message = <span class=\"literal\">undefined</span> ?? <span class=\"string\">&quot;默认值&quot;</span> <span class=\"comment\">// &quot;默认值&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> message = <span class=\"string\">&quot;&quot;</span> ?? <span class=\"string\">&quot;默认值&quot;</span> <span class=\"comment\">// &quot;&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>Optional Chaining（可选链） <code>?. =&gt; .</code></p>\n</li>\n<li><p>Global This</p>\n</li>\n<li><p>for…in</p>\n</li>\n</ol>\n<h4 id=\"ES12新特性\"><a href=\"#ES12新特性\" class=\"headerlink\" title=\"ES12新特性\"></a>ES12新特性</h4><ol>\n<li><p>FinalizationRegistry</p>\n<p>监听对象是否被回收，传入回调函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> finalRegistry = <span class=\"keyword\">new</span> FinalizationRegistry(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;对象被回收了&quot;</span>, value)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">finalRegistry.register(obj, <span class=\"string\">&#x27;beichen&#x27;</span>)</span><br><span class=\"line\">obj = <span class=\"literal\">null</span></span><br></pre></td></tr></table></figure></li>\n<li><p>WeakRef</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> info = <span class=\"keyword\">new</span> WeakRef(obj)</span><br><span class=\"line\"><span class=\"keyword\">const</span> finalRegistry = <span class=\"keyword\">new</span> FinalizationRegistry(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;对象被回收了&quot;</span>, value)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> infoRef = info.deref() <span class=\"comment\">// 获取弱引用中的内容</span></span><br><span class=\"line\">finalRegistry.register(obj, <span class=\"string\">&#x27;beichen&#x27;</span>)</span><br><span class=\"line\">obj = <span class=\"literal\">null</span></span><br></pre></td></tr></table></figure></li>\n<li><p>逻辑赋值运算符</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">message</span>) </span>&#123;</span><br><span class=\"line\">\tmessage ||= <span class=\"string\">&quot;默认值&quot;</span></span><br><span class=\"line\">\tmessage ??= <span class=\"string\">&quot;默认值&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"title\">running</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;run&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj &amp;&amp; obj.running() &amp;&amp; obj.running()</span><br></pre></td></tr></table></figure></li>\n<li><p>数字分隔符<code>10000_10000000</code></p>\n</li>\n<li><p>String.replaceAll</p>\n<p>replace只会替换第一个。replaceAll可以替换所有。</p>\n</li>\n</ol>\n<h4 id=\"ES13新特性\"><a href=\"#ES13新特性\" class=\"headerlink\" title=\"ES13新特性\"></a>ES13新特性</h4><ol>\n<li><p>method.at()</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> names = [<span class=\"string\">&#x27;abc&#x27;</span>, <span class=\"string\">&#x27;nba&#x27;</span>, <span class=\"string\">&#x27;cba&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(names.at(-<span class=\"number\">1</span>)) <span class=\"comment\">// cba</span></span><br></pre></td></tr></table></figure></li>\n<li><p>hasOwn(obj, ‘name’)（替代hasOwnProperty）</p>\n</li>\n<li><p>class中的新成员</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 公共的</span></span><br><span class=\"line\">\theight = <span class=\"number\">1.88</span></span><br><span class=\"line\">\t<span class=\"comment\">// 私有的,外部不能访问</span></span><br><span class=\"line\">\t#age = <span class=\"number\">18</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name</span>)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 静态代码块，一般执行初始化的东西</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;hello world&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">&#x27;beichen&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p) <span class=\"comment\">// 所有通过new Person()创建出来的都包含height属性</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n","comments":true,"categories":[{"name":"JS","slug":"JS","permalink":"http://beichenzero.github.io/categories/JS/"}],"tags":[{"name":"ES7-ES13","slug":"ES7-ES13","permalink":"http://beichenzero.github.io/tags/ES7-ES13/"}]},{"title":"7.ECMA-262中的var-let-const","date":"2022-10-30T05:25:22.000Z","path":"2022/10/30/js高级/7.ECMA-262中的var-let-const/","content":"<h3 id=\"ECMA-262中的var-let-const\"><a href=\"#ECMA-262中的var-let-const\" class=\"headerlink\" title=\"ECMA-262中的var/let/const\"></a>ECMA-262中的var/let/const</h3><p>在ECMA-262中，ES6之后对代码的执行流程描述改成了另外的一些词汇</p>\n<p>基本的执行思路是不变的</p>\n<p>比如：ECS(执行上下文栈)和EC(执行上下文)</p>\n<p>在代码被解析之前，执行上下文栈中会创建一个全局的执行上下文，但是其中包含的是词法环境(lexicalEnviroment)和变量环境(variableEnviroment)，同时会在堆内存中生成全局的词法环境，而词法环境又包含环境记录(Enviroment Record)和外部词法环境(outer)，全局的词法环境的outer为null，环境记录会指向对应的环境记录的对象，会有自己的属性和方法。</p>\n<p><em><strong>全局的环境记录!=window， 全局的环境记录是由两个环境记录合成的</strong></em></p>\n<p>环境记录主要包含声明式环境记录和对象环境记录。</p>\n<ul>\n<li>声明式环境记录：声明性环境记录用于定义ECMAScript语言语法元素的效果，如函数声明、变量声明和直接将标识符绑定与ECMAScript语言值关联起来的Catch子句。(全局的环境记录中-let/const)</li>\n<li>对象式环境记录：对象环境记录用于定义ECMAScript元素的效果，例如WithStatement，它将标识符绑定与某些对象的属性关联起来。（全局的环境记录中-window）</li>\n</ul>\n<p><img src=\"/2022/10/30/js%E9%AB%98%E7%BA%A7/7/JS高级\\code\\img\\ES6~ES13\\图片1.png\"></p>\n<p><strong>var和let/const的区别</strong></p>\n<p>var是被存放在变量环境(variableEnvironment)中，当代码被解析的时候就创建出来了，可以在赋值执行前被访问到，值为undefined。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(message) <span class=\"comment\">// undefined</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> message = <span class=\"string\">&quot;beichen&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>let/const是被存放在词法环境中(lexicalEnviroment)中，当代码被解析的时候也被创建出来了，但是在被赋值之前是不能被访问的，如果访问会报错。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">// 从这个大括号开始</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(message) <span class=\"comment\">// 会报错</span></span><br><span class=\"line\">    <span class=\"comment\">//  暂时性死区(非官方，社区中讨论出的结果)</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// 直到下一行，执行结束前(message被赋值之前)会形成暂时性死区</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> message = <span class=\"string\">&quot;beichen&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n\n<h4 id=\"let-const的基本使用\"><a href=\"#let-const的基本使用\" class=\"headerlink\" title=\"let/const的基本使用\"></a>let/const的基本使用</h4><p>let和var区别不大，声明一个变量可以被赋值(早期语言的设计缺陷)。</p>\n<p>const声明一个常量，如果赋值一个对象的，可以修改对象里面的内容。</p>\n<p><strong>let和const不允许重复声明</strong>。var是可以的，后面的会把前面的覆盖。</p>\n<ul>\n<li>var定义的变量会被添加到window上</li>\n<li>let/const不会被添加到window上</li>\n</ul>\n<h4 id=\"let-const有作用域提升嘛？\"><a href=\"#let-const有作用域提升嘛？\" class=\"headerlink\" title=\"let/const有作用域提升嘛？\"></a>let/const有作用域提升嘛？</h4><p>作用域提升:在声明变量的作用域中，如果这个变量可以在声明之前被访问，那么我们可以称之为作用域提升。</p>\n<p>但是在这里let和const是有被提前创建出来，但是不能访问，所以我认为是let/const不具备作用域提升。</p>\n<h4 id=\"暂时性死区-TDZ-temporal-dead-zone\"><a href=\"#暂时性死区-TDZ-temporal-dead-zone\" class=\"headerlink\" title=\"暂时性死区(TDZ,temporal dead zone)\"></a>暂时性死区(TDZ,temporal dead zone)</h4><p>暂时性死区和代码的定义位置无关，和代码的执行顺序有关。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(message)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> message = <span class=\"string\">&#x27;hello world&#x27;</span></span><br><span class=\"line\">foo()</span><br></pre></td></tr></table></figure>\n\n<p>这里是先创建foo()，定义message，然后给message赋值，最后执行foo()，所以在foo()的函数体中可以访问到message。</p>\n<h3 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips\"></a>tips</h3><p>早期JS（ES6之前）只有全局作用域和函数作用域。</p>\n<h4 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&quot;beichen&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(args)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo<span class=\"string\">`this is name <span class=\"subst\">$&#123;name&#125;</span>, ???`</span></span><br></pre></td></tr></table></figure>\n\n<p>模板字符串可以通过``来调用函数，并且传入参数，以及我们自己想添加的东西</p>\n<p>args打印的东西分两类，一个是通过${}分割的字符串，会存入到一个数组中[‘this is name ‘, ‘, ???’],第二个就是”beichen”。</p>\n<p><code>args = [[&quot;this is name &quot;, &quot;, ???&quot;], &quot;beichen&quot;]</code></p>\n<h4 id=\"展开语法\"><a href=\"#展开语法\" class=\"headerlink\" title=\"展开语法\"></a>展开语法</h4><p>可迭代对象: 数组/字符串/arguments</p>\n<p>对象默认不是可迭代对象。</p>\n<h4 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a>Symbol</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// description描述</span></span><br><span class=\"line\"><span class=\"comment\">// Symbol创建出来的一定是独一无二的值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> s1 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;hello beichen&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s1) <span class=\"comment\">//Symbol(hello beichen)</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s1.description) <span class=\"comment\">//hello beichen</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过Symbol.for可以创建出相同的Symbol值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> s2 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">&#x27;haixia&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> s3 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">&#x27;haixia&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s2 === s3) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过Symbol.keyFor可以获取到Symbol值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Symbol</span>.keyFor(s2))</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"set-map\"><a href=\"#set-map\" class=\"headerlink\" title=\"set/map\"></a>set/map</h4><p>set基本使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> names = [<span class=\"string\">&#x27;abc&#x27;</span>, <span class=\"string\">&#x27;abd&#x27;</span>, <span class=\"string\">&#x27;nba&#x27;</span>, <span class=\"string\">&#x27;cba&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> newNameSet = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(names) <span class=\"comment\">// newNameSet还是一个set</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> newnameArray = <span class=\"built_in\">Array</span>.from(newNameSet)</span><br></pre></td></tr></table></figure>\n\n<p>set常用属性: size</p>\n<p>set常用方法: </p>\n<ul>\n<li>add(value)</li>\n<li>delete(value)</li>\n<li>has(value)</li>\n<li>clear()</li>\n<li>forEach()</li>\n<li>for-of</li>\n</ul>\n<p>map基本使用: 以对象作为key来储存</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj1 = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;beichen&quot;</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj2 = &#123; <span class=\"attr\">age</span>: <span class=\"number\">18</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">map.set(obj1, <span class=\"string\">&#x27;aaa&#x27;</span>)</span><br><span class=\"line\">map.set(obj2, <span class=\"string\">&#x27;aaa&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map.get(obj1))</span><br></pre></td></tr></table></figure>\n\n<p>map常用属性: size</p>\n<p>map常用方法:</p>\n<ul>\n<li>set(key)</li>\n<li>get(key)</li>\n<li>has(key)</li>\n<li>delete(key)</li>\n<li>clear()</li>\n<li>forEach(item =&gt; console.log(item))</li>\n<li>for-of</li>\n</ul>\n","comments":true,"categories":[{"name":"JS","slug":"JS","permalink":"http://beichenzero.github.io/categories/JS/"}],"tags":[{"name":"let/const/var","slug":"let-const-var","permalink":"http://beichenzero.github.io/tags/let-const-var/"},{"name":"模板字符串","slug":"模板字符串","permalink":"http://beichenzero.github.io/tags/%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2/"},{"name":"Symbol","slug":"Symbol","permalink":"http://beichenzero.github.io/tags/Symbol/"},{"name":"set/map","slug":"set-map","permalink":"http://beichenzero.github.io/tags/set-map/"}]},{"title":"原型继承关系图","date":"2022-10-30T05:23:20.000Z","path":"2022/10/30/js高级/原型继承关系图/","content":"<p>就一张图，没什么其他的。<br><img src=\"/../../images/img/%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB/%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.jpg\"></p>\n","comments":true,"categories":[{"name":"JS","slug":"JS","permalink":"http://beichenzero.github.io/categories/JS/"}],"tags":[{"name":"继承","slug":"继承","permalink":"http://beichenzero.github.io/tags/%E7%BB%A7%E6%89%BF/"},{"name":"原型","slug":"原型","permalink":"http://beichenzero.github.io/tags/%E5%8E%9F%E5%9E%8B/"}]},{"title":"6.继承的多种方案及其优缺点","date":"2022-10-30T05:21:20.000Z","path":"2022/10/30/js高级/6.继承的多种方案及其优缺点/","content":"<h3 id=\"继承的方案以及优缺点\"><a href=\"#继承的方案以及优缺点\" class=\"headerlink\" title=\"继承的方案以及优缺点\"></a>继承的方案以及优缺点</h3><p><strong>1. 通过原型链实现继承</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.定义父类构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.info = <span class=\"string\">&quot;beichen&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 2.在父类原型上添加eating方法</span></span><br><span class=\"line\">Person.prototype.eating = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;eating&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 3.定义子类构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;student&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 4.创建父类对象，并作为子类的原型对象</span></span><br><span class=\"line\">Student.prototype = <span class=\"keyword\">new</span> Person()</span><br><span class=\"line\"><span class=\"comment\">// 5.在子类原型上添加running方法</span></span><br><span class=\"line\">Student.prototype.running = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;running&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> stu1 = <span class=\"keyword\">new</span> Student()</span><br><span class=\"line\">stu1.running() <span class=\"comment\">// running</span></span><br><span class=\"line\">stu1.eating() <span class=\"comment\">// eating</span></span><br></pre></td></tr></table></figure>\n\n<p>优点: 子类可以继承父类的方法</p>\n<p>缺点: </p>\n<ul>\n<li>第一，我们通过直接打印对象是看不到这个属性的； </li>\n<li>第二，这个属性会被多个对象共享，如果这个对象是一个引用类型，那么就会造成问题； </li>\n<li>第三，不能给Person传递参数（让每个stu有自己的属性），因为这个对象是一次性创建的（没办法定制化）；</li>\n</ul>\n<p><strong>2. 借用构造函数继承</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.定义父类构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">info, age</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.info = info</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 2.在父类原型上添加eating方法</span></span><br><span class=\"line\">Person.prototype.eating = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;eating&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 3.定义子类构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\">info, age, name</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 借用构造函数继承</span></span><br><span class=\"line\">    Person.apply(<span class=\"built_in\">this</span>, [info, age])</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 5.在子类原型上添加running方法</span></span><br><span class=\"line\">Student.prototype.running = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;running&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> stu1 = <span class=\"keyword\">new</span> Student()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stu1.info) <span class=\"comment\">// beichen</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stu1.name) <span class=\"comment\">// student</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stu1.age) <span class=\"comment\">// 22</span></span><br></pre></td></tr></table></figure>\n\n<p>在子类中可以通过apply或call调用都可以</p>\n<p>优点：属性不会被共享，可以给父类传入参数</p>\n<p>缺点：父类的方法不能复用，子类实例的方法每次都是单独创建的。</p>\n<span id=\"more\"></span>\n\n<p><strong>3. 组合继承</strong></p>\n<p>核心：原型式继承和构造函数继承的组合，兼具了二者的优点。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.定义父类构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">info, age</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.info = info</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 2.在父类原型上添加eating方法</span></span><br><span class=\"line\">Person.prototype.eating = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;eating&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 3.定义子类构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\">info, age, name</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 借用构造函数继承</span></span><br><span class=\"line\">    Person.apply(<span class=\"built_in\">this</span>, [info, age]) <span class=\"comment\">// 第二次调用父类方法</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 4.创建父类对象，并作为子类的原型对象</span></span><br><span class=\"line\">Student.prototype = <span class=\"keyword\">new</span> Person() <span class=\"comment\">// 第一次调用父类方法</span></span><br><span class=\"line\"><span class=\"comment\">// 5.在子类原型上添加running方法</span></span><br><span class=\"line\">Student.prototype.running = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;running&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> stu1 = <span class=\"keyword\">new</span> Student()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stu1.info) <span class=\"comment\">// beichen</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stu1.name) <span class=\"comment\">// student</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stu1.age) <span class=\"comment\">// 22</span></span><br></pre></td></tr></table></figure>\n\n<p>优点：</p>\n<ul>\n<li>父类的方法可以被复用</li>\n<li>父类的引用属性不会被共享</li>\n<li>子类构建实例时可以向父类传递参数</li>\n</ul>\n<p>缺点：无论什么情况都会调用两次父类方法，这种被覆盖的情况造成了性能上的浪费。</p>\n<p><strong>4. 原型式继承</strong></p>\n<p>历史：这种模式最早是道格拉斯·可罗克福德（Douglas Crockford，著名的前端大师，JSON的创立者）在2006年写的一篇文章说起：Prototypal Inheritance in JavaScript(在JavaScript中使用原型式继承) </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createObject</span>(<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">\tF.prototype = o</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Student.prototype = createObject(Person.prototype)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在后来的也可以通过Object.create()方法，功能和createObject类似，但是create存在兼容性问题</span></span><br><span class=\"line\"><span class=\"comment\">// 但是createObject不存在兼容性问题，可以放心使用</span></span><br></pre></td></tr></table></figure>\n\n<p>优缺点和原型链继承一样，父类的方法可以复用，但父类的引用属性会被子类实例共享，子类构建不能向父类传递参数</p>\n<p><em><strong>ECMAScript 5 通过新增 Object.create()方法规范化了原型式继承。这个方法接收两个参数:一 个用作新对象原型的对象和(可选的)一个为新对象定义额外属性的对象。在传入一个参数的情况下， Object.create()与 object()方法的行为相同。</strong></em></p>\n<p>所以上面的代码可以转换成</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student.prototype = createObject(Person.prototype)</span><br><span class=\"line\"><span class=\"comment\">// =&gt;</span></span><br><span class=\"line\">Student.prototype = <span class=\"built_in\">Object</span>.create(Person.prototype)</span><br><span class=\"line\"><span class=\"comment\">// =&gt;</span></span><br><span class=\"line\">Student.prototype = object(Person.prototype)</span><br></pre></td></tr></table></figure>\n\n<p><strong>5. 寄生式继承</strong></p>\n<ul>\n<li>寄生式(Parasitic)继承是与原型式继承紧密相关的一种思想, 并且同样由道格拉斯·克罗克福德(Douglas Crockford)提出和推 广的； </li>\n<li>寄生式继承的思路是结合原型类继承和工厂模式的一种方式； </li>\n<li>即创建一个封装继承过程的函数, 该函数在内部以某种方式来增强对象，最后再将这个对象返回；</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStudent</span>(<span class=\"params\">person</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> newObj = object(person)</span><br><span class=\"line\">\tnewObj.studying = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name + <span class=\"string\">&quot;studying&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> newObj</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p><strong>6. 寄生组合式继承</strong></p>\n<p>组合继承是比较理想的继承方式, 但是存在两个问题: </p>\n<ul>\n<li>问题一: 构造函数会被调用两次: 一次在创建子类型原型对象的时候, 一次在创建子类型实例的时候. </li>\n<li>问题二: 父类型中的属性会有两份: 一份在原型对象中, 一份在子类型实例中</li>\n</ul>\n<p>寄生组合式继承就可以解决这两个问题</p>\n<p>优缺点：完美！</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建对象的过程</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CreateObject</span>(<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 传入o是显式原型 </span></span><br><span class=\"line\">    F.prototype = o</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 寄生式函数</span></span><br><span class=\"line\"><span class=\"comment\">// 传入子函数和父函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inherit</span>(<span class=\"params\">Subtype, Supertype</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Subtype.prototype = Object.create(Supertype.prototype)</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果create可以用就用create，因为create存在兼容性问题</span></span><br><span class=\"line\">    Subtype.prototype = CreateObject(Supertype.prototype)</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(Subtype.prototype, <span class=\"string\">&#x27;constructor&#x27;</span>, &#123;</span><br><span class=\"line\">        <span class=\"attr\">enumerable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">writable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">value</span>: Subtype</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.running = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;running&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.eating = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;eating&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 借用构造函数实现属性继承</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\">name, age, height, address</span>) </span>&#123;</span><br><span class=\"line\">    Person.call(<span class=\"built_in\">this</span>, name, age)</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.height = height</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.address = address</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">inherit(Student, Person)</span><br><span class=\"line\">Student.prototype.studying = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;student studying&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> stu1 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;kobe&quot;</span>, <span class=\"number\">33</span>, <span class=\"number\">1.88</span>, <span class=\"string\">&quot;纽约&quot;</span>)</span><br><span class=\"line\">stu1.running() <span class=\"comment\">// running</span></span><br><span class=\"line\">stu1.studying() <span class=\"comment\">// student studying</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>7. class extend继承(ES6中的继承)</strong></p>\n<p>在ES6中用这种方式写的继承，最后都会转成ES5的代码，继承的原理式一样的，extend相当于式上面寄生组合式继承的一种语法糖。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name, age</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">running</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;running&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">eating</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;eating&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name, age, info, sno</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(name, age)</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.info = info</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sno = sno</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">studying</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;studying&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> stu = <span class=\"keyword\">new</span> Student(<span class=\"string\">&#x27;beichen&#x27;</span>, <span class=\"number\">22</span>, <span class=\"string\">&quot;学生&quot;</span>, <span class=\"number\">123456</span>)</span><br><span class=\"line\">stu.eating()</span><br><span class=\"line\">stu.running()</span><br><span class=\"line\">stu.studying()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stu.name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name, age, title</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(name, age)</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.title = title</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">teaching</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;teaching&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> teacher = <span class=\"keyword\">new</span> Teacher(<span class=\"string\">&quot;coderwhy&quot;</span>, <span class=\"number\">18</span>, <span class=\"string\">&quot;老师&quot;</span>, <span class=\"number\">1.88</span>)</span><br><span class=\"line\">teacher.eating()</span><br><span class=\"line\">teacher.running()</span><br><span class=\"line\">teacher.teaching()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(teacher.name)</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"对象方法的补充\"><a href=\"#对象方法的补充\" class=\"headerlink\" title=\"对象方法的补充\"></a>对象方法的补充</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;beichen”&#125;</span></span><br><span class=\"line\"><span class=\"string\">var info = object(obj)</span></span><br><span class=\"line\"><span class=\"string\">info.address = &quot;</span>中国<span class=\"string\">&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>hasOwnProperty</p>\n<p>对象是否有某一个属于自己的属性(不是在原型上的属性)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(info.hasOwnProperty(<span class=\"string\">&quot;name&quot;</span>)) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(info.hasOwnProperty(<span class=\"string\">&quot;address&quot;</span>)) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>in/for in操作符</p>\n<p>判断某个属性是否在某个对象或者对象的原型上</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;name&quot;</span> <span class=\"keyword\">in</span> info) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;address&quot;</span> <span class=\"keyword\">in</span> info) <span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> info) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(key) <span class=\"comment\">// address, name</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>tips: for in 遍历不仅仅是自己对象上的内容，也包括原型对象上的内容</p>\n<p>Object上的属性和方法也能找到，但是他们的enmuerable为false，不可被遍历。</p>\n</li>\n<li><p>instanceof</p>\n<p>用来判断类(构造函数)和对象之间的关系。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">inherit(Student, Person)</span><br><span class=\"line\"><span class=\"comment\">// stu是实例对象，Student可以看成是一个类(构造函数)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> stu = <span class=\"keyword\">new</span> Student()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stu <span class=\"keyword\">instanceof</span> Student) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stu <span class=\"keyword\">instanceof</span> Person) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stu <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>简洁一点说就寻找Student/Person/Object是否在stu的原型链上constructor所指的对象上</p>\n</li>\n<li><p>isPrototypeOf</p>\n<p>判断对象之间的继承。但是用的比较少。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(Student.prototype.isPrototypeOf(stu)) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Person.prototype.isPrototypeOf(stu)) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.isPrototypeOf(stu)) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>简单说就是判断Student.prototype(原型)是否在stu的原型脸上</p>\n</li>\n</ol>\n","comments":true,"categories":[{"name":"JS","slug":"JS","permalink":"http://beichenzero.github.io/categories/JS/"}],"tags":[{"name":"继承","slug":"继承","permalink":"http://beichenzero.github.io/tags/%E7%BB%A7%E6%89%BF/"},{"name":"ES5及ES6+","slug":"ES5及ES6","permalink":"http://beichenzero.github.io/tags/ES5%E5%8F%8AES6/"}]},{"title":"5.对象增强","date":"2022-10-30T05:19:19.000Z","path":"2022/10/30/js高级/5.对象增强/","content":"<h3 id=\"对象增强\"><a href=\"#对象增强\" class=\"headerlink\" title=\"对象增强\"></a>对象增强</h3><p><strong>属性描述符需要使用到<code>Object.defineProperty</code></strong></p>\n<p>接收三个参数：</p>\n<p>​    第一个参数: obj</p>\n<p>​    第二个参数: prop要定义或修改的属性的名称或Symbol</p>\n<p>​    第三个参数: descriptor要定义或修改的属性描述</p>\n<p><strong>属性描述符有类：数据属性、存取属性</strong></p>\n<ul>\n<li><p>数据属性描述符</p>\n<ul>\n<li>configurable </li>\n</ul>\n<p>设置为false不可配置(不可被删除,不可在把值变为true)，默认为true</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.defineProperty(&#123;</span><br><span class=\"line\">\tconfigurable: false</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>enumerable</li>\n</ul>\n<p>设为false不可被枚举</p>\n<ul>\n<li>writable</li>\n</ul>\n<p>不可被写入(只读)</p>\n<ul>\n<li>value</li>\n</ul>\n<p>设置之后每次读取的值都为固定的值。</p>\n</li>\n<li><p>存取属性描述符</p>\n<ul>\n<li>configurable</li>\n<li>enumerable</li>\n<li>set</li>\n</ul>\n<p>当定义的属性被修改/赋值，就会执行set方法，并将修改的值传入set函数的参数中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var _name = &#x27;&#x27; // 私有变量</span><br><span class=\"line\">Object.defineProperty(&#123;</span><br><span class=\"line\">\tset: function(value) &#123;</span><br><span class=\"line\">\t\tconsole.log(value) //value为修改后的值 默认为undefined</span><br><span class=\"line\">\t&#125;，</span><br><span class=\"line\">\tget: function() &#123;</span><br><span class=\"line\">\t\treturn _name</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>get</li>\n</ul>\n<p>在调用obj.name就会执行get方法，默认的值也为undefined。</p>\n</li>\n</ul>\n<p><code>Object.defineProperties</code>可以监听多个属性描述符。</p>\n<span id=\"more\"></span>\n<h3 id=\"对象增强-1\"><a href=\"#对象增强-1\" class=\"headerlink\" title=\"对象增强\"></a>对象增强</h3><p><strong>属性描述符需要使用到<code>Object.defineProperty</code></strong></p>\n<p>接收三个参数：</p>\n<p>​    第一个参数: obj</p>\n<p>​    第二个参数: prop要定义或修改的属性的名称或Symbol</p>\n<p>​    第三个参数: descriptor要定义或修改的属性描述</p>\n<p><strong>属性描述符有类：数据属性、存取属性</strong></p>\n<ul>\n<li><p>数据属性描述符</p>\n<ul>\n<li>configurable </li>\n</ul>\n<p>设置为false不可配置(不可被删除,不可在把值变为true)，默认为true</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.defineProperty(&#123;</span><br><span class=\"line\">\tconfigurable: false</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>enumerable</li>\n</ul>\n<p>设为false不可被枚举</p>\n<ul>\n<li>writable</li>\n</ul>\n<p>不可被写入(只读)</p>\n<ul>\n<li>value</li>\n</ul>\n<p>设置之后每次读取的值都为固定的值。</p>\n</li>\n<li><p>存取属性描述符</p>\n<ul>\n<li>configurable</li>\n<li>enumerable</li>\n<li>set</li>\n</ul>\n<p>当定义的属性被修改/赋值，就会执行set方法，并将修改的值传入set函数的参数中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var _name = &#x27;&#x27; // 私有变量</span><br><span class=\"line\">Object.defineProperty(&#123;</span><br><span class=\"line\">\tset: function(value) &#123;</span><br><span class=\"line\">\t\tconsole.log(value) //value为修改后的值 默认为undefined</span><br><span class=\"line\">\t&#125;，</span><br><span class=\"line\">\tget: function() &#123;</span><br><span class=\"line\">\t\treturn _name</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>get</li>\n</ul>\n<p>在调用obj.name就会执行get方法，默认的值也为undefined。</p>\n</li>\n</ul>\n<p><code>Object.defineProperties</code>可以监听多个属性描述符。</p>\n","comments":true,"categories":[{"name":"JS","slug":"JS","permalink":"http://beichenzero.github.io/categories/JS/"}],"tags":[]},{"title":"4.柯里化函数-纯函数","date":"2022-10-30T05:18:31.000Z","path":"2022/10/30/js高级/4.柯里化-纯函数/","content":"<h3 id=\"类数组-array-like-转成数组\"><a href=\"#类数组-array-like-转成数组\" class=\"headerlink\" title=\"类数组(array-like)转成数组\"></a>类数组(array-like)转成数组</h3><ol>\n<li><p>通过for循环遍历存入新的数组</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var newArguments = []</span><br><span class=\"line\">for (var arg of arguments) &#123;</span><br><span class=\"line\">\tnewarguments.push(arg)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>Array.from()  (ES6中的方式)</p>\n<p>from()中传入一个可迭代对象</p>\n<p><code>var newArgs1 = Array.from(arguments)</code></p>\n</li>\n<li><p><code>...</code>的语法   (ES6中的方式)</p>\n<p><code>var newArgs2 = [...arguments]</code></p>\n</li>\n<li><p>使用slice()方法</p>\n<p><code>var newArgs3 = [].slice.apply(arguments)</code></p>\n<p><code>var newArgs3 = Array.prototype.slice.apply(arguments)</code></p>\n<p>slice也可以说是一种浅拷贝的方法。</p>\n<p>slice不会对原数组进行修改，而是返回一个新数组。(纯函数)</p>\n<p>splice会返回一个新数组，也会对原数组进行修改。</p>\n</li>\n</ol>\n<p>箭头函数中没有arguments</p>\n<span id=\"more\"></span>\n<h3 id=\"纯函数的作用和优势\"><a href=\"#纯函数的作用和优势\" class=\"headerlink\" title=\"纯函数的作用和优势\"></a>纯函数的作用和优势</h3><p>可以安心的编写和安心的使用</p>\n<p>有确定的输入就有确定的输入，不需要依赖外部的参数和变量。</p>\n<h3 id=\"柯里化\"><a href=\"#柯里化\" class=\"headerlink\" title=\"柯里化\"></a>柯里化</h3><p>柯里化函数是将接收的多个参数的函数转变成接收单个参数的函数,并且返回余下参数,而且返回结果的新函数的计数.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(x,y,z) &#123;</span><br><span class=\"line\">\tconsole.log(x+y+z)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(10,20,30)</span><br><span class=\"line\"></span><br><span class=\"line\">-&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">function foo(x) &#123;</span><br><span class=\"line\">\treturn function(y) &#123;</span><br><span class=\"line\">\t\treturn function(z) &#123;</span><br><span class=\"line\">\t\t\tconsole.log(x+y+z)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(10)(20)(30)</span><br><span class=\"line\"></span><br><span class=\"line\">// 第二种柯里化函数</span><br><span class=\"line\">var foo3 = x =&gt; y =&gt; z =&gt; console.log(x+y+z)</span><br><span class=\"line\"></span><br><span class=\"line\">这个转化的之后的就成为柯里化函数</span><br></pre></td></tr></table></figure>\n\n<p><strong>优势</strong></p>\n<ol>\n<li><p>函数的职责单一</p>\n<p>每一个函数都有自己的职责,与剩余的函数/参数无关</p>\n</li>\n<li><p>函数参数的复用</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var foo = x =&gt; &#123;</span><br><span class=\"line\">\tx += 2</span><br><span class=\"line\">\treturn y =&gt; &#123;</span><br><span class=\"line\">        y *= 2</span><br><span class=\"line\">        return z =&gt; &#123;</span><br><span class=\"line\">\t\t\tz = z ** 2</span><br><span class=\"line\">\t\t\tconsole.log(x+y+z)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var fooAdd = foo(2)</span><br><span class=\"line\">var fooadd2multiply2 = fooAdd(2)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"组合函数\"><a href=\"#组合函数\" class=\"headerlink\" title=\"组合函数\"></a>组合函数</h3><h3 id=\"with\"><a href=\"#with\" class=\"headerlink\" title=\"with\"></a>with</h3><p>扩展一个语句的作用域链</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">    var message = &quot;hello beichen&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">with (obj) &#123;</span><br><span class=\"line\">\tconsole.log(message) // hello beichen</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em><strong>tips:不建议使用,产生作用域混淆和兼容性的问题</strong></em></p>\n<h3 id=\"eval\"><a href=\"#eval\" class=\"headerlink\" title=\"eval\"></a>eval</h3><p>将所传入的字符串作为一段JS代码来执行</p>\n<p>将最后一行作为返回值结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var message = `var name = &#x27;beichen&#x27;; console.log(name)`</span><br><span class=\"line\">eval(message) // beichen</span><br></pre></td></tr></table></figure>\n\n<p><em><strong>tips:也不怎么用,了解就行了</strong></em></p>\n<ul>\n<li>可读性差</li>\n<li>eval必须经过JavaScript解释器,不能被JS引擎优化</li>\n<li>eval是一个字符串,有可能在执行过程中被可以篡改,那么可能会造成攻击的风险</li>\n</ul>\n","comments":true,"categories":[{"name":"JS","slug":"JS","permalink":"http://beichenzero.github.io/categories/JS/"}],"tags":[{"name":"柯里化","slug":"柯里化","permalink":"http://beichenzero.github.io/tags/%E6%9F%AF%E9%87%8C%E5%8C%96/"},{"name":"纯函数","slug":"纯函数","permalink":"http://beichenzero.github.io/tags/%E7%BA%AF%E5%87%BD%E6%95%B0/"}]},{"title":"3.js的内存管理和闭包","date":"2022-10-30T05:17:27.000Z","path":"2022/10/30/js高级/3.js的内存管理和闭包/","content":"<h2 id=\"JS内存管理和闭包\"><a href=\"#JS内存管理和闭包\" class=\"headerlink\" title=\"JS内存管理和闭包\"></a>JS内存管理和闭包</h2><h3 id=\"1-JS内存管理\"><a href=\"#1-JS内存管理\" class=\"headerlink\" title=\"1.JS内存管理\"></a>1.JS内存管理</h3><h3 id=\"2-垃圾回收机制\"><a href=\"#2-垃圾回收机制\" class=\"headerlink\" title=\"2.垃圾回收机制\"></a>2.垃圾回收机制</h3><h5 id=\"常见的GC算法\"><a href=\"#常见的GC算法\" class=\"headerlink\" title=\"常见的GC算法\"></a>常见的GC算法</h5><ol>\n<li><p>引用计数(Reference Counting)</p>\n<p>当有一个对象引用指向它时，那么这个对象就+1</p>\n<p>当一个对象的引用为0时，这个对象就被销毁掉了</p>\n<p>ex: 循环引用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj1 = &#123;&#125;</span><br><span class=\"line\">obj2 = &#123;&#125;</span><br><span class=\"line\">obj1.info = obj2</span><br><span class=\"line\">obj2.info = obj1</span><br><span class=\"line\">// 此时obj1和obj2的引用计数都为2</span><br><span class=\"line\"></span><br><span class=\"line\">obj1 = null</span><br><span class=\"line\">obj2 = null</span><br><span class=\"line\">// 此时obj1和obj2的引用计数都为1，不为0，不会被销毁掉，需要我们手动销毁</span><br></pre></td></tr></table></figure></li>\n<li><p>标记清除(Mark-Sweep)</p>\n<p><strong>标记清除的核心思想就是可达性(Reachability)</strong></p>\n<p>描述: 这个算法是设置一个根对象(Root Object/window/Global Object，在不同地方有不同的叫法，但是i都是指的同一个对象)，垃圾回收器会定期从这个根开始，找所有从这个根开始有引用到的对象，对于那么没有引用到的对象，就认为是不可用对象。</p>\n<p><em><strong>这个算法能很好的解决循环引用的问题</strong></em></p>\n<p>ex:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var RootObject = &#123;</span><br><span class=\"line\">\tobj: &#123;</span><br><span class=\"line\">        foo: function a() &#123;&#125;,</span><br><span class=\"line\">        bar: function b() &#123;&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">RootObject -&gt; obj -&gt; foo/bar</span><br><span class=\"line\">foo -&gt; function</span><br><span class=\"line\">bar -&gt; function</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h5 id=\"其他算法优化补充\"><a href=\"#其他算法优化补充\" class=\"headerlink\" title=\"其他算法优化补充\"></a>其他算法优化补充</h5></li>\n<li><p>标记整理</p>\n</li>\n<li><p>分代收集</p>\n</li>\n<li><p>增量收集</p>\n</li>\n<li><p>闲时收集</p>\n</li>\n</ol>\n<h3 id=\"3-闭包\"><a href=\"#3-闭包\" class=\"headerlink\" title=\"3.闭包\"></a>3.闭包</h3><h4 id=\"3-1概念\"><a href=\"#3-1概念\" class=\"headerlink\" title=\"3.1概念\"></a>3.1概念</h4><ol>\n<li><p><strong>闭包的定义</strong></p>\n<p>闭包(Closure)：又称词法闭包或函数闭包。</p>\n<p>闭包在实现上是一个结构体，他储存了一个函数和一个关联的环境。</p>\n<p>闭包和函数最大的区别在于，当捕获闭包的时候，它的自由变量会在被捕获时确定，这样即使脱离了捕获时的上下文，也可以正常运行。</p>\n</li>\n</ol>\n<p><strong>理解和总结</strong></p>\n<ol>\n<li>一个普通的函数，如果它可以访问外层作用域的自由变量，那么这个函数和周围环境就形成了闭包</li>\n<li>从广义的角度来看：JS中的函数都是闭包。</li>\n<li>从狭义的角度来看：JS中的一个函数如果访问了外层作用域的变量，那么它就是一个闭包。</li>\n</ol>\n","comments":true,"categories":[{"name":"JS","slug":"JS","permalink":"http://beichenzero.github.io/categories/JS/"}],"tags":[{"name":"内存管理","slug":"内存管理","permalink":"http://beichenzero.github.io/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"},{"name":"闭包","slug":"闭包","permalink":"http://beichenzero.github.io/tags/%E9%97%AD%E5%8C%85/"}]},{"title":"2.浏览器和js运行原理","date":"2022-10-30T05:02:07.000Z","path":"2022/10/30/js高级/2.浏览器和js的运行原理/","content":"<h2 id=\"浏览器运行原理\"><a href=\"#浏览器运行原理\" class=\"headerlink\" title=\"浏览器运行原理\"></a>浏览器运行原理</h2><ul>\n<li>网页请求的过程<br>输入一个url/域名，会经过DNS解析成ip地址，然后去请求指定的服务器，服务器返回资源(大多是html)给域名进行展示</li>\n</ul>\n<h3 id=\"回流和重绘-面试重点\"><a href=\"#回流和重绘-面试重点\" class=\"headerlink\" title=\"回流和重绘(面试重点)\"></a>回流和重绘(面试重点)</h3><p><strong>回流</strong><br>回流reflow: (也可以称之为重排)</p>\n<ul>\n<li>第一次确定节点大小和位置称之为布局。</li>\n<li>之后对节点的大小，位置修改重新计算称之为回流<br>回流举例: 修改的盒子的大小/宽高，移除等。</li>\n</ul>\n<ol>\n<li>修改DOM结构(添加/删除节点)</li>\n<li>改变布局(width/height/padding/font-size)</li>\n<li>改变窗口大小(手动修改)<br>反面例子: 如果是修改了文字的颜色之类的是不需要进行重新布局，所以不会产生回流。</li>\n</ol>\n<p><strong>重绘</strong><br>第一次渲染内容称之为绘制(paint)<br>之后重新渲染称之为重绘</p>\n<p>回流一定会引起重绘，所以需要尽量避免回流，且非常消耗浏览器性能。<br>避免回流的方式:</p>\n<ul>\n<li>1.修改样式尽量一次性修改</li>\n<li>2.尽量避免频繁的操作DOM</li>\n<li>3.尽量避免通过getComputedStyle获取尺寸、位置等信息</li>\n<li>4.对某些元素使用position的absolute和fixed (会引起回流，但是开销相对较小)</li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"defer-async\"><a href=\"#defer-async\" class=\"headerlink\" title=\"defer/async\"></a>defer/async</h3><p><strong>defer</strong></p>\n<ul>\n<li>1.加上defer之后，js文件的下载和执行，不会影响后面DOM Tree的构建</li>\n<li>2.在defer代码中的DOM Tree已经构建完成</li>\n<li>3.defer代码是在DOMContentLoaded事件发出之前执行</li>\n<li>4.多个defer是可以保证代码的正确执行的</li>\n<li>5.defer在某种程度上是可以提升性能的，推荐将defer的script放在header中</li>\n<li>6.defer仅适用于外部脚本</li>\n</ul>\n<p><strong>async</strong><br><em><strong>慎用！！！</strong></em></p>\n<ul>\n<li>1.浏览器不会因async脚本而阻塞(同defer)</li>\n<li>2.async不能保证执行顺序，他是独立下载，下载后立即执行，不会等待其他脚本</li>\n<li>3.async不能保证在DOMContentLoaded之前或之后执行</li>\n</ul>\n<h3 id=\"渲染页面的详细流程\"><a href=\"#渲染页面的详细流程\" class=\"headerlink\" title=\"渲染页面的详细流程\"></a>渲染页面的详细流程</h3><p>HTML -&gt; (html Parser) -&gt; DOM Tree -&gt; (Attachment) -&gt; Render Tree -&gt; (painting) -&gt; display<br>style sheets -&gt; (css parser) -&gt; style Rules -&gt; (Attachment) -&gt;同上<br>其中Dom Tree 会有 (DOM操作) 对DOM Tree进行操作<br>Render Tree 会有 (layout) 对Render Tree进行布局</p>\n<h2 id=\"JS的执行原理\"><a href=\"#JS的执行原理\" class=\"headerlink\" title=\"JS的执行原理\"></a>JS的执行原理</h2><h3 id=\"1-初始化全局对象\"><a href=\"#1-初始化全局对象\" class=\"headerlink\" title=\"1.初始化全局对象\"></a>1.初始化全局对象</h3><h5 id=\"1-1js引擎在执行代码之前，会在堆内存中创建一个全局对象：Global-Object-简称GO\"><a href=\"#1-1js引擎在执行代码之前，会在堆内存中创建一个全局对象：Global-Object-简称GO\" class=\"headerlink\" title=\"1.1js引擎在执行代码之前，会在堆内存中创建一个全局对象：Global Object (简称GO)\"></a>1.1js引擎在执行代码之前，会在堆内存中创建一个全局对象：Global Object (简称GO)</h5><ul>\n<li>该对象所有的作用域都可以访问得到</li>\n<li>里面会包含Data、Array、String、Number、setTimeout、setInterval等等</li>\n<li>里面还有一个window对象指向自己<br><img src=\"/../../images/img/js%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86/%E5%A0%86%E5%86%85%E5%AD%98%E4%B8%AD%E5%88%9B%E5%BB%BAGO.png\" alt=\"img error\"></li>\n</ul>\n<h4 id=\"2-执行上下文\"><a href=\"#2-执行上下文\" class=\"headerlink\" title=\"2.执行上下文\"></a>2.执行上下文</h4><h5 id=\"js引擎内部有一个执行上下文-栈-Execution-Context-Stack-简称ECS-，它是用于执行代码的调用栈\"><a href=\"#js引擎内部有一个执行上下文-栈-Execution-Context-Stack-简称ECS-，它是用于执行代码的调用栈\" class=\"headerlink\" title=\"js引擎内部有一个执行上下文(栈)(Execution Context Stack 简称ECS)，它是用于执行代码的调用栈\"></a>js引擎内部有一个执行上下文(栈)(Execution Context Stack 简称ECS)，它是用于执行代码的调用栈</h5><p>执行上下文是需要去执行全局的代码块的：<br>    全局代码快为了执行会创建一个Global Execution Context(GEC)</p>\n<p>​    GEC会被放到ECS中</p>\n<p>GEC会被放到ECS中包含两部分：<br><strong>第一部分</strong>：在代码执行前，在parser转化成抽象语法树(AST)的过程中，会将全局的变量、函数等加入到GO中，但是并不会赋值。默认给定undefined。<br><strong>这个过程也被称为变量的作用域提升(hoisting)</strong></p>\n<p><strong>第二部分</strong>：在代码的执行过程中，对变量进行赋值，或者执行其他函数</p>\n<h4 id=\"3-认识VO对象-Variable-Object\"><a href=\"#3-认识VO对象-Variable-Object\" class=\"headerlink\" title=\"3.认识VO对象(Variable Object)\"></a>3.认识VO对象(Variable Object)</h4><p>​    每一个执行上下文都会关联一个VO(变量对象)，变量和函数声明会被添加到这个VO对象中</p>\n<p>tip：当全局代码被执行的时候，VO 即 GO。</p>\n<p><strong>全局代码执行过程(执行前)</strong></p>\n<p><img src=\"/../../images/img/js%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86/%E5%85%A8%E5%B1%80%E4%BB%A3%E7%A0%81%E8%A2%AB%E6%89%A7%E8%A1%8C%E5%89%8D.png\"></p>\n<p>可以看到创建GO的时候，会包含Data、Array等，之前提到过的， 全局自带的一些属性和方法。</p>\n<p>自己定义的变量，例如name、foo(函数)、num1、num2等等，默认值都为undefined。</p>\n<p>其中在函数被创建的时候也会在创建一个函数所指向的对象。</p>\n<p>此时的foo只是被创建了，但是并没有被调用，函数的定义是最先被执行的，定义执行后，会创建对应的内存地址并将foo指向对应的内存地址。并且函数也会有自己的属性和方法(name、length等)，还有自己的函数代码，[[scopes]]函数作用域。</p>\n<p><strong>全局代码被执行后(执行后)</strong></p>\n<p><img src=\"/../../images/img/js%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86/%E5%85%A8%E5%B1%80%E4%BB%A3%E7%A0%81%E8%A2%AB%E6%89%A7%E8%A1%8C%E5%90%8E.png\"></p>\n<p>在全局代码被执行后，会给GO中的变量进行赋值，且从上到下依次按顺序进行执行。</p>\n<p><strong>当函数被执行时</strong></p>\n<p>在执行过程中碰到了函数，会根据函数体创建一个函数执行上下文(Function Execution Context，简称FEC)，并且被压入EC Stack中</p>\n<p>又因为每一个执行上下文都会关联一个VO。进入函数执行上下文会创建一个AO(Activation Object);</p>\n<p>这个AO对象会使用arguments做为初始化，并且初始化时传入的参数。</p>\n<p>这个AO对象会作为执行上下文的VO来存放变量的初始化的值。</p>\n<p><img src=\"/../../images/img/js%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86/%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B(%E6%89%A7%E8%A1%8C%E5%89%8D).png\"></p>\n<p><strong>函数被执行后</strong></p>\n<p><img src=\"/../../images/img/js%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86/%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B(%E6%89%A7%E8%A1%8C%E5%90%8E).png\"></p>\n<h4 id=\"4-作用域和作用域链\"><a href=\"#4-作用域和作用域链\" class=\"headerlink\" title=\"4.作用域和作用域链\"></a>4.作用域和作用域链</h4><p>当进入到一个执行上下文时，执行上下文都会关联一个作用域链(Scope Chain)</p>\n<ul>\n<li>作用域链是一个对象列表，用于变量标识符的求值。</li>\n<li>当进入到一个执行上下文时，这个作用域链被创建，并且根据代码类型添加一系列对象</li>\n</ul>\n<h3 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解\"></a>理解</h3><p>这里仅作为我自己学完这些之后选择老师的一个案例进行自己的理解和描述。</p>\n<img src=\"../../images/img/js执行原理/anli.png\" style=\"width: 50%\">\n\n<ol>\n<li><p>在js代码执行之前，会现在堆中创建一个全局对象：Global Object(GO)</p>\n</li>\n<li><p>在解析的时候会把var/function声明的变量/函数存放到全局对象中</p>\n<p>例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">global object = &#123;</span><br><span class=\"line\">\tbar(): 0xa00(函数对象的地址)</span><br><span class=\"line\">    foo(): 0xb00(函数对象的地址) </span><br><span class=\"line\">    message: undefined</span><br><span class=\"line\">    obj: undefined</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>全局的代码块为了执行会构建一个Global Execution Context(GEC)，这个GEC会被存放到执行上下文栈(Execution Context Stack = ECS)中，前面提到过GEC被存放到ECS中会分为两部分，第一部分是将全局定义的变量、函数加入到GO中，但是不会赋值，这一过程已经完成。</p>\n</li>\n<li><p>第二部分就开始执行js代码，最开始的是将字符串”global message”赋值给message</p>\n</li>\n<li><p>然后继续执行，将对象{ name: “beichen” }赋值给obj，此时在堆内存中会在创建一个obj的对象，里面保存着{ name: “beichen” }这个对象。并将创建出来的obj对象的地址赋值给GO中的obj，此时GO中的obj变成了<code>obj: 0xm00(obj对象的地址)</code></p>\n</li>\n</ol>\n<p><strong>tips:在赋值，也就是执行代码的过程是在ECS中完成的中，也就是在栈中完成的，在堆中保存数据</strong></p>\n<ol start=\"6\">\n<li><p>接着是bar和foo函数的，因为function声明的函数会进行提升，声明是最先声明的，所以这里会跳过这两个函数，当执行函数的时候才会进入到函数体中执行代码。</p>\n</li>\n<li><p>到了代码的第34行，开始执行foo(123)的函数，在ECS中会在创建一个新的执行上下文(EC)，并且将这个新的EC添加到ECS中，每一个执行上下文都会关联一个VO。在我们的堆内存中会创建一个AO(activation Object)，并且初始化argument，添加foo函数中需要定义的变量到AO中，默认值都为undefined。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Activation Object = &#123;</span><br><span class=\"line\">\t// 初始就会有arguments</span><br><span class=\"line\">\targuments: (是有值的)</span><br><span class=\"line\">\tnum: undefined（传入的参数）</span><br><span class=\"line\">\tmessage： undefined</span><br><span class=\"line\">\tname: undefined</span><br><span class=\"line\">\tage: undefined</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>然后开始执行foo函数体中的内容。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Activation Object = &#123;</span><br><span class=\"line\">   \t// 初始就会有arguments</span><br><span class=\"line\">   \tnum: 123</span><br><span class=\"line\">   \targuments: (是有值的)</span><br><span class=\"line\">   \tmessage： &quot;foo message&quot;</span><br><span class=\"line\">   \tname: undefined</span><br><span class=\"line\">   \tage: undefined</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里执行到bar()这里的时候，函数不会继续执行下去，而是去创建一个新的执行上下文。将新的EC添加到ECS中，同时关联一个VO，在堆内存中创建的AO，就是VO所对应的值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Activation Object = &#123;</span><br><span class=\"line\">\targuments: （有值）</span><br><span class=\"line\">\tmessage: undefined</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>开始执行bar()函数体中的内容</p>\n<p>第20行代码会在ECS中执行。</p>\n<p>将bar所对应的AO中的message赋值为字符串bar。</p>\n</li>\n<li><p>当bar中的赋值执行完毕后，bar函数就已经完全执行完了，bar所对应的EC就会从ECS弹出。此时栈顶为foo函数对应的EC。</p>\n</li>\n<li><p>然后继续执行foo函数的剩下的函数体</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Activation Object = &#123;</span><br><span class=\"line\">   \t// 初始就会有arguments</span><br><span class=\"line\">   \tnum: 123</span><br><span class=\"line\">   \targuments: (是有值的)</span><br><span class=\"line\">   \tmessage： &quot;foo message&quot;</span><br><span class=\"line\">   \tname: &quot;beichen&quot;</span><br><span class=\"line\">   \tage: 22</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时foo函数中的内容也执行完毕，foo对应的EC从ECS中弹出，此时栈顶为GEC，也就是全局的执行上下文，顺着foo(123)继续向下执行。</p>\n</li>\n<li><p>此时全局执行上下文也执行完毕，执行上下文栈中为空。此时结束。</p>\n</li>\n</ol>\n<p><strong>每一个执行上下文EC(Execution Context)都会包含一个VO(Variable Object)，全局执行上下文的VO对应的就是GO(Global Object)，而函数所创建的执行上下文的VO所对应的就是在堆内存中创建出来的AO(Activation Object)，在EC中不仅包含VO，同时也会有作用域链，且作用域链是在执行上下文最开始被执行的时候就创建好的，EC中还会包含this</strong></p>\n","comments":true,"categories":[{"name":"JS","slug":"JS","permalink":"http://beichenzero.github.io/categories/JS/"}],"tags":[{"name":"浏览器运行原理","slug":"浏览器运行原理","permalink":"http://beichenzero.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/"},{"name":"js运行原理","slug":"js运行原理","permalink":"http://beichenzero.github.io/tags/js%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/"}]},{"title":"1.this指向问题","date":"2022-10-30T05:00:02.000Z","path":"2022/10/30/js高级/1.this指向问题/","content":"<p>严格模式下，独立调用的函数的this指向时undefined</p>\n<p>typeof null      =&gt; object<br>typeof undefined =&gt; undefined</p>\n<h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2><p>箭头函数的返回值如果是一个对象，需要加一个小括号()<br>item =&gt; ({ name: ‘beichen’ })</p>\n<ul>\n<li>箭头函数中压根没有this，不能绑定arguments，super参数</li>\n<li>箭头函数是没有显示原型的，所以不能作为构造函数，不能使用new来创建对象</li>\n</ul>\n<h2 id=\"this绑定的规则的优先级\"><a href=\"#this绑定的规则的优先级\" class=\"headerlink\" title=\"this绑定的规则的优先级\"></a>this绑定的规则的优先级</h2><ul>\n<li>1.默认绑定的优先级是最低的</li>\n<li>2.显式绑定的优先级高于隐式绑定</li>\n<li>3.apply/bind/call的优先级高于隐式绑定</li>\n<li>4.new绑定优先级高于隐式绑定</li>\n<li>5.new不能和apply和call一起使用,也没有可比性</li>\n<li>6.new的优先级高于bind的优先级</li>\n<li>7.bind的优先级高于apply和call</li>\n</ul>\n<p><strong>优先级排序</strong><br>1.new<br>2.bind<br>3.apply/call<br>4.隐式绑定<br>5.默认绑定(独立函数调用)</p>\n<p><strong>sb面试题</strong><br><code>function foo() &#123;   console.log(this) &#125; var obj1 = &#123;   name: &#39;obj1&#39;,   foo: foo &#125; var obj2 = &#123;   name: &#39;obj2&#39; &#125;; (obj2.foo = obj1.foo)()  // this =&gt; Window</code></p>\n","comments":true,"categories":[{"name":"JS","slug":"JS","permalink":"http://beichenzero.github.io/categories/JS/"}],"tags":[{"name":"this指向","slug":"this指向","permalink":"http://beichenzero.github.io/tags/this%E6%8C%87%E5%90%91/"}]},{"title":"git基本使用","date":"2022-08-05T14:09:11.000Z","path":"2022/08/05/随笔/git基本使用/","content":"<ul>\n<li>前期准备</li>\n</ul>\n<ol>\n<li>下载git</li>\n<li>登录github创建仓库</li>\n</ol>\n<h3 id=\"一-git的配置\"><a href=\"#一-git的配置\" class=\"headerlink\" title=\"一.git的配置\"></a>一.git的配置</h3><p>在你项目的目录下，vscode的终端(这里需要把bash设置为vscode终端的默认启动项)，或者是在项目的目录下打开git bash。</p>\n<ol>\n<li>设置用户名、密码、邮箱</li>\n</ol>\n<p><code>git config --global user.name &quot;yourname&quot;</code></p>\n<p><code>git config --global user.password &quot;password&quot;</code></p>\n<p><code>git config --global user.email &quot;your_email@youremail.com&quot;</code></p>\n<p>也可以通过<code>git config --list</code>查看你所添加的这些属性</p>\n<ol start=\"2\">\n<li>生成密钥</li>\n</ol>\n<p><code>ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;</code></p>\n<ol start=\"3\">\n<li>添加密钥并验证</li>\n</ol>\n<p>然后将你的C -&gt; user-&gt; &lt;用户名&gt; -&gt; .ssh -&gt; id_rsa.pub(也就是公匙)</p>\n<p>ctrl+a全选复制，粘贴到刚才你的执行的生成密钥的哪里，然后一直回车就可以了</p>\n<p><code>ssh -T git@github.com</code></p>\n<p>可以验证你的密钥是否添加成功，在github的仓库中也可以添加密钥。</p>\n<span id=\"more\"></span>>\n\n<h3 id=\"二-建立连接\"><a href=\"#二-建立连接\" class=\"headerlink\" title=\"二.建立连接\"></a>二.建立连接</h3><p>初始化仓库</p>\n<p><code>git init</code></p>\n<p>与远程仓库建立连接</p>\n<p><code>git remote add origin URL</code></p>\n<p>URL -&gt; 这里是你仓库的地址，一般建议用<a href=\"mailto:&#103;&#x69;&#x74;&#x40;&#x67;&#x69;&#x74;&#104;&#117;&#x62;&#46;&#99;&#111;&#109;\">&#103;&#x69;&#x74;&#x40;&#x67;&#x69;&#x74;&#104;&#117;&#x62;&#46;&#99;&#111;&#109;</a>:用户名/仓库名.git。</p>\n<p>查看工作目录的状态</p>\n<p><code>git status</code></p>\n<p>将文件添加到暂存区</p>\n<p><code>git add &lt;file&gt;</code> / <code>git add .</code> 提交所有文件到暂缓区</p>\n<p>提交更改,添加备注信息(此时将暂存区的信息提交到本地仓库)</p>\n<p><code>git commit -m &quot;commnet&quot;</code></p>\n<p>将本地仓库的文件push到远程仓库(若 push 不成功，可加 -f 进行强推操作)</p>\n<p><code>git push origin master</code></p>\n<p>此时你就可以在你github仓库中看到你的代码了。</p>\n","comments":true,"categories":[{"name":"随笔","slug":"随笔","permalink":"http://beichenzero.github.io/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"git","slug":"git","permalink":"http://beichenzero.github.io/tags/git/"}]},{"title":"宝塔部署node项目-vue+node+mysql(前后端分离)","date":"2022-08-04T12:40:55.000Z","path":"2022/08/04/随笔/宝塔部署node项目-vue+node+mysql/","content":"<h2 id=\"使用宝塔部署node项目\"><a href=\"#使用宝塔部署node项目\" class=\"headerlink\" title=\"使用宝塔部署node项目\"></a>使用宝塔部署node项目</h2><p>我的项目是vue+node+mysql完成的前后端分离项目</p>\n<p>如果你想通过域名或者ip访问的话，需要购买域名或者服务器，购买任意一个就可以了。</p>\n<h4 id=\"1-注册宝塔\"><a href=\"#1-注册宝塔\" class=\"headerlink\" title=\"1.注册宝塔\"></a>1.注册宝塔</h4><p>这个我就不多介绍了，宝塔也是比较好用的，是一个服务器面板，里面很多东西都是免费的，感兴趣的朋友可以去了解一下，用法不难。</p>\n<p><img src=\"/../../images/baota/%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF.png\" alt=\"宝塔面板首页\"></p>\n<span id=\"more\"></span>\n\n<h4 id=\"2-添加项目到文件\"><a href=\"#2-添加项目到文件\" class=\"headerlink\" title=\"2.添加项目到文件\"></a>2.添加项目到文件</h4><p>文件-&gt;wwwroot</p>\n<p>一般在wwwroot根目录下添加自己的项目，如果是vue项目，可以先把node_modules依赖包删除掉，然后上传到文件之后，在项目文件夹下打开终端，执行<code>npm install</code> 安装一下以来就可以了，也可以启动你的项目，看一下能否正常运行，这里的终端就和你在其他编译器上的终端是一样的，一般是<code>npm run serve</code>启动项目。</p>\n<p>像这样：</p>\n<p><img src=\"/../../images/baota/%E5%AE%9D%E5%A1%94%E7%BB%88%E7%AB%AF%E8%BF%90%E8%A1%8C%E9%A1%B9%E7%9B%AE.png\" alt=\"宝塔终端运行vue项目\"></p>\n<p>其中之后你可以<code>alt+右键</code>(windows)在浏览器打开，但是此时看到的只是一个静态的界面，没有启动服务，是不能进行登录，或者其他的网络请求的。</p>\n<ul>\n<li>项目运行测试没问题，接下来就是部署项目了。</li>\n</ul>\n<h4 id=\"3-添加项目\"><a href=\"#3-添加项目\" class=\"headerlink\" title=\"3.添加项目\"></a>3.添加项目</h4><p>这里的项目是指你的vue项目，或是其他的项目。</p>\n<ul>\n<li>在添加之前应该会需要进行下载一下环境，当然，在你搭建宝塔的时候就要提示你安装部分环境，像node的版本什么的，你可以自己去控制，有推荐官方的node版本，下载和替换。</li>\n</ul>\n<p>网站-&gt;node项目-&gt;添加node项目</p>\n<p><img src=\"/../../images/baota/%E6%B7%BB%E5%8A%A0node%E9%A1%B9%E7%9B%AE.png\"></p>\n<p>添加完之后，也可以在当前项目的设置里面配置域名/服务器，我这里是配置了我自己服务器，并添加了默认端口(80)，也就是说打开这个ip地址默认是进到80端口的，也就是进入到了我的项目中。</p>\n<p><img src=\"/../../images/baota/%E6%B7%BB%E5%8A%A0ip.png\"></p>\n<p>这里完成之后，就可以通过你的ip地址访问你的项目了，但是此时依然是没有服务器的，不能进行登录和网络请求等功能。</p>\n<h4 id=\"4-添加数据库\"><a href=\"#4-添加数据库\" class=\"headerlink\" title=\"4.添加数据库\"></a>4.添加数据库</h4><p><img src=\"/../../images/baota/%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE%E5%BA%93.png\"></p>\n<p>这里添加数据库，设置数据库名和用户名，还有密码。这里要记好，待会在服务端项目会用到。</p>\n<p>可以在数据库面板中进入到phpMyAdmin界面查看自己id数据库，也可以通过sql yog等其他工具导出sql脚本，然后在添加好的数据库进行导入，在本地找到相应的sql文件，导入数据。</p>\n<p>可以通过工具查看当前数据库的结构。</p>\n<h4 id=\"5-安装PM2\"><a href=\"#5-安装PM2\" class=\"headerlink\" title=\"5.安装PM2\"></a>5.安装PM2</h4><p>在软件商店搜索<strong>PM2</strong>，会搜到pm2管理器，点击安装就可以，然后等待安装完毕，就可以在首页的软件中找到这个工具，如果找不到，就去软件商店的已安装中搜索。同时也可以勾选<strong>首页显示</strong>这样就可以在首页的软件里面找到了。</p>\n<h5 id=\"5-1测试服务是否可以启动\"><a href=\"#5-1测试服务是否可以启动\" class=\"headerlink\" title=\"5.1测试服务是否可以启动\"></a>5.1测试服务是否可以启动</h5><p>我们在导入项目的时候可以把服务的文件夹一起上传，也可以单独上传，上传到wwwroot的根目录一下，也可以是其他你想放入的文件夹中，点到启动服务器所在的文件夹，然后点击终端，利用<code>node app.js</code>启动服务，当然，我的是设置启动文件问<code>app.js</code>，也有很多人是设置的<code>index.js</code>，无论是什么，都可以，只要是能启动服务器就可以了。</p>\n<h5 id=\"5-1-1服务器配置\"><a href=\"#5-1-1服务器配置\" class=\"headerlink\" title=\"5.1.1服务器配置\"></a>5.1.1服务器配置</h5><p><img src=\"/../../images/baota/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E9%85%8D%E7%BD%AE.png\"></p>\n<p>配置如图所示，这里在的三个参数在<strong>添加数据库</strong>中已经提到了，按照对应的内容填写就好了</p>\n<h5 id=\"5-2测试服务能否正常启动\"><a href=\"#5-2测试服务能否正常启动\" class=\"headerlink\" title=\"5.2测试服务能否正常启动\"></a>5.2测试服务能否正常启动</h5><p>这里我使用的<code>nodemon</code>，nodemon是一款非常好用的node工具</p>\n<p>接下来就简单介绍一下nodemon，我认为他最好用的就是监听服务文件的改变，并实时更新。相当于是加强版。</p>\n<p>当然，node启动js文件的方式也是可以的。</p>\n<p><strong>nodemon 特性</strong></p>\n<ul>\n<li>自动重新启动应用程序。</li>\n<li>检测要监视的默认文件扩展名。</li>\n<li>默认支持 node，但易于运行任何可执行文件，如 python、ruby、make 等。</li>\n<li>忽略特定的文件或目录。</li>\n<li>监视特定目录。</li>\n<li>使用服务器应用程序或一次性运行实用程序和 REPL。</li>\n<li>可通过 Node require 语句编写脚本。</li>\n</ul>\n<p><img src=\"/../../images/baota/%E6%B5%8B%E8%AF%95%E6%9C%8D%E5%8A%A1%E8%83%BD%E5%90%A6%E6%AD%A3%E5%B8%B8%E5%90%AF%E5%8A%A8.png\"></p>\n<p>这里可以看到服务器成功启动了。接下来就是部署到PM2上面了</p>\n<h4 id=\"6-配置PM2\"><a href=\"#6-配置PM2\" class=\"headerlink\" title=\"6.配置PM2\"></a>6.配置PM2</h4><p>首页-&gt;PM2管理器</p>\n<p>点进去之后，点击添加项目</p>\n<p><img src=\"/../../images/baota/PM2%E9%85%8D%E7%BD%AE.png\"></p>\n<p>这里可以看到图片中的启动文件，只需要在你的服务的文件夹中找到启动的js文件就可以了。</p>\n<ul>\n<li>TIPs</li>\n</ul>\n<p>项目可能需要修改跨域的问题，在vue.config.js中添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">  proxy: &#123;</span><br><span class=\"line\">    &#x27;^/api&#x27;: &#123;</span><br><span class=\"line\">      target: &#x27;http://ip+端口号&#x27;,</span><br><span class=\"line\">      ws: true,        //如果要代理 websockets，配置这个参数</span><br><span class=\"line\">      pathRewrite: &#123;</span><br><span class=\"line\">        &#x27;^/api&#x27;: &#x27;&#x27;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      changeOrigin: true //虚拟的站点需要更管origin</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>在你的配置中修改axios请求的地址<code>axios.defaults.baseURL =&quot;http://ip+端口号&quot;</code></p>\n<p>最后这里的也是我自己试错了好久才反应过来需要修改这里的，因为之前都是本地启动服务并运行项目，没有不会请求到这里的数据，也就不需要做这么多修改。</p>\n<p>好了，到此，宝塔配置node项目就结束了，如果有什么疑问都可以评论留言。</p>\n","comments":true,"categories":[{"name":"随笔","slug":"随笔","permalink":"http://beichenzero.github.io/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"宝塔","slug":"宝塔","permalink":"http://beichenzero.github.io/tags/%E5%AE%9D%E5%A1%94/"},{"name":"node","slug":"node","permalink":"http://beichenzero.github.io/tags/node/"}]},{"title":"自定义指令-vue3","date":"2022-07-14T13:13:52.000Z","path":"2022/07/14/vue-other-component/自定义指令/","content":"<h3 id=\"局部指令\"><a href=\"#局部指令\" class=\"headerlink\" title=\"局部指令\"></a>局部指令</h3><p>这里的是简单实现了一下输入框获取焦点的自定义指令</p>\n<p>这里的v-focus，focus是我们自己定义的，前缀是<code>v-</code>，简单来说就是<code>v-</code> + <code>自定义的名称</code>。</p>\n<p>这里的局部指令是仅限于当前组件中，我们需要在那个地方获取焦点，就将<code>v-focus</code>添加到那个标签里面。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; v-focus&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  import &#123; ref, onMounted &#125; from &#x27;vue&#x27;</span><br><span class=\"line\">  </span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    /*</span><br><span class=\"line\">     * 局部指令</span><br><span class=\"line\">    */</span><br><span class=\"line\">    directives: &#123;</span><br><span class=\"line\">      focus: &#123;</span><br><span class=\"line\">        mounted(el, bindings, vnode, preVnode) &#123;</span><br><span class=\"line\">          console.log(&quot;focus mounted&quot;)</span><br><span class=\"line\">          el.focus()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<h3 id=\"全局指令\"><a href=\"#全局指令\" class=\"headerlink\" title=\"全局指令\"></a>全局指令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class=\"line\">import App from &#x27;./04_teleport的内置组件/App.vue&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">const app = createApp(App)</span><br><span class=\"line\"></span><br><span class=\"line\">// 注意，这里是不需要加s的</span><br><span class=\"line\">app.directive(&#x27;focus&#x27;, &#123;</span><br><span class=\"line\">\tmouted(el, bindings, vnode, preVnode) &#123;</span><br><span class=\"line\">\t\tconsole.log(&#x27;focus mounted&#x27;)</span><br><span class=\"line\">\t\tel.focus()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在main.js里面配置好全局指令后，我们可以可以在任意指令中直接调用<code>v-focus</code>，和局部指令用法一样，只是作用域不同。</li>\n</ul>\n<h4 id=\"mounted的四个参数\"><a href=\"#mounted的四个参数\" class=\"headerlink\" title=\"mounted的四个参数\"></a>mounted的四个参数</h4><ul>\n<li><p>el：是获取到的指令所添加到的整个标签， 以上面的为例就是获取到<code>&lt;input type=&quot;text&quot;&gt;</code></p>\n</li>\n<li><p>bindings:  </p>\n<p><img src=\"/.io//Blog\\blog\\source_posts\\vue-other-component\\自定义指令\\bindings.png\" alt=\"1657806046128\"></p>\n</li>\n</ul>\n<p>如图所示，我们在v-focus将进行改变，变成<code>v-focus.aaa.bbb=&quot;北辰&quot;</code></p>\n<p>此时，所展示的图片中<code>modifiers</code>数组中的aaa，bbb的值变为true，value的值也变为”北辰”。我们在需要传值的时候就可以写。用语言不太好描述，所以用了图片来解释，更加的形象直观一点。</p>\n<ul>\n<li>vnode: 返回当前自定义指令所在的虚拟节点的各种基本信息。</li>\n<li>preVnode: 返回前一个vnode的各种基本信息。</li>\n</ul>\n","comments":true,"categories":[{"name":"vue","slug":"vue","permalink":"http://beichenzero.github.io/categories/vue/"}],"tags":[]},{"title":"watch以及watchEffect的基本使用","date":"2022-05-09T14:22:08.000Z","path":"2022/05/09/vue-learn/watch以及watchEffect的基本使用/","content":"<p>在前面的Options API中，我们可以通过watch选项来侦听data或者props的数据变化，当数据变化时执行某一些操作。<br>在Composition API中，我们可以使用watchEffect和watch来完成响应式数据的侦听；</p>\n<ul>\n<li>watchEffect用于自动收集响应式数据的依赖；</li>\n<li>watch需要手动指定侦听的数据源；</li>\n</ul>\n<h2 id=\"watchEffect的基本使用\"><a href=\"#watchEffect的基本使用\" class=\"headerlink\" title=\"watchEffect的基本使用\"></a>watchEffect的基本使用</h2><ul>\n<li>watchEffect传入的函数会被立即执行一次，并且在执行的过程中会收集依赖</li>\n<li>只有收集的依赖发生变化时，watchEffect传入的函数才会再次执行<br>首先需要引入<code>import &#123; ref, watchEffect &#125; from &#39;vue&#39;;</code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setup() &#123;</span><br><span class=\"line\">  // watchEffect: 自动收集响应式的依赖</span><br><span class=\"line\">  const name = ref(&quot;kobe&quot;);</span><br><span class=\"line\">  const age = ref(18);</span><br><span class=\"line\"></span><br><span class=\"line\">  const changeName = () =&gt; name.value = &quot;beichen&quot;;</span><br><span class=\"line\">  const changeAge = () =&gt; age.value++;</span><br><span class=\"line\"></span><br><span class=\"line\">  watchEffect(() =&gt; &#123;</span><br><span class=\"line\">    // 会立即执行，因为他要收集所用到了那些响应式的依赖</span><br><span class=\"line\">    // 相当于watch中的immediate(立即执行)</span><br><span class=\"line\">    console.log(&quot;name:&quot;, name.value, &quot;age: &quot;, age.value);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    name,</span><br><span class=\"line\">    age,</span><br><span class=\"line\">    changeName,</span><br><span class=\"line\">    changeAge</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<span id=\"more\"></span>\n\n<h4 id=\"watchEffect的停止侦听\"><a href=\"#watchEffect的停止侦听\" class=\"headerlink\" title=\"watchEffect的停止侦听\"></a>watchEffect的停止侦听</h4><p>在age大于25时停止监听<br>watchEffect的返回值也是一个函数，通常返回的函数定义<code>stop</code>，调用该函数即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h2&gt;&#123;&#123;name&#125;&#125;-&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeName&quot;&gt;修改name&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeAge&quot;&gt;修改age&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  import &#123; ref, watchEffect &#125; from &quot;vue&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    setup() &#123;</span><br><span class=\"line\">      // watchEffect: 自动收集响应式的依赖</span><br><span class=\"line\">      const name = ref(&quot;kobe&quot;);</span><br><span class=\"line\">      const age = ref(18);</span><br><span class=\"line\"></span><br><span class=\"line\">      // watchEffect的返回值是一个函数。</span><br><span class=\"line\">      const stop =  watchEffect(() =&gt; &#123;</span><br><span class=\"line\">        // 会立即执行，因为他要收集所用到了那些响应式的依赖</span><br><span class=\"line\">        // 相当于watch中的immediate(立即执行)</span><br><span class=\"line\">        console.log(&quot;name:&quot;, name.value, &quot;age: &quot;, age.value);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      const changeName = () =&gt; name.value = &quot;beichen&quot;;</span><br><span class=\"line\">      const changeAge = () =&gt; &#123;</span><br><span class=\"line\">        age.value++</span><br><span class=\"line\">        if( age.value &gt; 25) &#123;</span><br><span class=\"line\">          stop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        name,</span><br><span class=\"line\">        age,</span><br><span class=\"line\">        changeName,</span><br><span class=\"line\">        changeAge</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"watchEffect清除副作用\"><a href=\"#watchEffect清除副作用\" class=\"headerlink\" title=\"watchEffect清除副作用\"></a>watchEffect清除副作用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h2&gt;&#123;&#123;name&#125;&#125;-&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeName&quot;&gt;修改name&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeAge&quot;&gt;修改age&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  import &#123; ref, watchEffect &#125; from &quot;vue&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    setup() &#123;</span><br><span class=\"line\">      // watchEffect: 自动收集响应式的依赖</span><br><span class=\"line\">      const name = ref(&quot;kobe&quot;);</span><br><span class=\"line\">      const age = ref(18);</span><br><span class=\"line\"></span><br><span class=\"line\">      // watchEffect的返回值是一个函数。</span><br><span class=\"line\">      const stop =  watchEffect((onInvalidate) =&gt; &#123;</span><br><span class=\"line\">        const timer = setTimeout(() =&gt; &#123;</span><br><span class=\"line\">          console.log(&quot;网络请求成功~&quot;);</span><br><span class=\"line\">        &#125;, 2000);</span><br><span class=\"line\"></span><br><span class=\"line\">        onInvalidate(() =&gt; &#123;</span><br><span class=\"line\">          // 在这个函数中清理额外的副作用</span><br><span class=\"line\">          // request.cancel();</span><br><span class=\"line\">          clearTimeout(timer);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        // 会立即执行，因为他要收集所用到了那些响应式的依赖</span><br><span class=\"line\">        // 相当于watch中的immediate(立即执行)</span><br><span class=\"line\">        console.log(&quot;name:&quot;, name.value, &quot;age: &quot;, age.value);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      const changeName = () =&gt; name.value = &quot;beichen&quot;;</span><br><span class=\"line\">      const changeAge = () =&gt; &#123;</span><br><span class=\"line\">        age.value++</span><br><span class=\"line\">        if( age.value &gt; 25) &#123;</span><br><span class=\"line\">          stop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        name,</span><br><span class=\"line\">        age,</span><br><span class=\"line\">        changeName,</span><br><span class=\"line\">        changeAge</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"watchEffect执行时机和ref的引用\"><a href=\"#watchEffect执行时机和ref的引用\" class=\"headerlink\" title=\"watchEffect执行时机和ref的引用\"></a>watchEffect执行时机和ref的引用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h2 ref=&quot;title&quot;&gt;beichen&lt;/h2&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  import &#123; ref, watchEffect &#125; from &quot;vue&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    setup() &#123;</span><br><span class=\"line\">      const title = ref(null);</span><br><span class=\"line\"></span><br><span class=\"line\">      // watchEffect两个参数：</span><br><span class=\"line\">      // 第一个参数是回调函数</span><br><span class=\"line\">      // 第二个参数是flush: pre(默认情况下的)</span><br><span class=\"line\">      /* </span><br><span class=\"line\">      *  调用watchEffect时会立即执行/立即执行/立即执行</span><br><span class=\"line\">      */</span><br><span class=\"line\">      watchEffect(() =&gt; &#123;</span><br><span class=\"line\">        console.log(title.value);</span><br><span class=\"line\">      &#125;, &#123;</span><br><span class=\"line\">        // pre是提前执行</span><br><span class=\"line\">        // post是等到dom挂载完了之后执行</span><br><span class=\"line\">        // sync是强制同步(官方不建议使用)</span><br><span class=\"line\">        flush: &quot;post&quot;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        title</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"watchEffect和watch的比较\"><a href=\"#watchEffect和watch的比较\" class=\"headerlink\" title=\"watchEffect和watch的比较\"></a>watchEffect和watch的比较</h2><p><strong>watch</strong></p>\n<ol>\n<li>懒执行副作用(第一次不会执行)，watchEffect会立即执行(immediate)</li>\n<li>更具体的说明了那些状态发生改变，出发监听器的执行</li>\n<li>访问监听状态变化前后的值，watchEffect只能拿到变化后的值</li>\n<li><h2 id=\"watch侦听单个数据源\"><a href=\"#watch侦听单个数据源\" class=\"headerlink\" title=\"watch侦听单个数据源\"></a>watch侦听单个数据源</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h2&gt;&#123;&#123;info.name&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeData&quot;&gt;修改&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  import &#123; reactive, ref, watch &#125; from &quot;vue&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    setup() &#123;</span><br><span class=\"line\">      const info = reactive(&#123;</span><br><span class=\"line\">        name: &quot;Kobe&quot;,</span><br><span class=\"line\">        age: 18</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      // 1.侦听watch时，传入一个getter函数</span><br><span class=\"line\">      // watch(() =&gt; info.name, (newValue, oldValue) =&gt; &#123;</span><br><span class=\"line\">      //   console.log(&quot;newValue:&quot;, newValue, &quot;oldValue:&quot;, oldValue);</span><br><span class=\"line\">      // &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      // 2.传入一个可响应式对象: reactive对象/ref对象</span><br><span class=\"line\">      /* </span><br><span class=\"line\">      * 情况一：reactive对象获取到的newValue和oldValue本身都是reactive对象</span><br><span class=\"line\">      * 情况二：ref对象获取到的newValue和oldValue是value值的本身</span><br><span class=\"line\">      */</span><br><span class=\"line\">      // 情况一：</span><br><span class=\"line\">      // watch(info, (newValue, oldValue) =&gt; &#123;</span><br><span class=\"line\">      //   console.log(&quot;newValue:&quot;, newValue, &quot;oldValue:&quot;, oldValue);</span><br><span class=\"line\">      // &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      // 情况一.1 如果希望获取到的newValue和oldValue是一个普通的对象</span><br><span class=\"line\">      watch(() =&gt; (&#123;...info&#125;), (newValue, oldValue) =&gt; &#123;</span><br><span class=\"line\">        console.log(&quot;newValue:&quot;, newValue, &quot;oldValue:&quot;, oldValue);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      // 情况二：</span><br><span class=\"line\">      // const name = ref(&quot;beichen&quot;);</span><br><span class=\"line\">      // watch(name, (newValue, oldValue) =&gt; &#123;</span><br><span class=\"line\">      //   console.log(&quot;newValue:&quot;, newValue, &quot;oldValue:&quot;, oldValue);</span><br><span class=\"line\">      // &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      const changeData = () =&gt; &#123;</span><br><span class=\"line\">        info.name = &quot;james&quot;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        info,</span><br><span class=\"line\">        changeData</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"watch侦听多个数据源\"><a href=\"#watch侦听多个数据源\" class=\"headerlink\" title=\"watch侦听多个数据源\"></a>watch侦听多个数据源</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h2&gt;&#123;&#123;info.name&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeData&quot;&gt;修改&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  import &#123; reactive, ref, watch &#125; from &quot;vue&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    setup() &#123;</span><br><span class=\"line\">      // 1.定义可响应式的对象</span><br><span class=\"line\">      const name = ref(&quot;beichen&quot;);</span><br><span class=\"line\">      const info = reactive(&#123;</span><br><span class=\"line\">        name: &quot;Kobe&quot;,</span><br><span class=\"line\">        age: 18</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      // 2.侦听器watch</span><br><span class=\"line\">      watch([() =&gt; (&#123;...info&#125;), name], ([newInfo, newName], [oldInfo, oldName]) =&gt; &#123;</span><br><span class=\"line\">        console.log(&quot;newInfo:&quot;, newInfo, &quot;newName:&quot;, newName);</span><br><span class=\"line\">        console.log(&quot;oldInfo:&quot;, oldInfo, &quot;oldName:&quot;, oldName);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      const changeData = () =&gt; &#123;</span><br><span class=\"line\">        info.name = &quot;james&quot;;</span><br><span class=\"line\">        name.value = &quot;beichenzero&quot;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        info,</span><br><span class=\"line\">        changeData</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"watch侦听响应式对象-watch选项\"><a href=\"#watch侦听响应式对象-watch选项\" class=\"headerlink\" title=\"watch侦听响应式对象/watch选项\"></a>watch侦听响应式对象/watch选项</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h2&gt;&#123;&#123;info.name&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeData&quot;&gt;修改&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  import &#123; reactive, ref, watch &#125; from &quot;vue&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    setup() &#123;</span><br><span class=\"line\">      const info = reactive(&#123;</span><br><span class=\"line\">        name: &quot;Kobe&quot;,</span><br><span class=\"line\">        age: 18,</span><br><span class=\"line\">        friend: &#123;</span><br><span class=\"line\">          name: &quot;james&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      /* </span><br><span class=\"line\">      * 这里传入的是reactive对象，他是会进行深度监听的，同时immediate为false,不会立即执行</span><br><span class=\"line\">      * vue的源码在解析watch传入的第一个参数时，如果判断为reactive对象，会执行deep: true的操作</span><br><span class=\"line\">      */</span><br><span class=\"line\">      watch(info, (newInfo, oldInfo) =&gt; &#123;</span><br><span class=\"line\">        console.log(&quot;newInfo:&quot;, newInfo, &quot;oldInfo:&quot;, oldInfo);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      /* </span><br><span class=\"line\">      * 这里对reactive对象的info进行了解构，解构之后的就是一个普通对象，vue的源码不会加入deep: true的操作</span><br><span class=\"line\">      * 如果我们需要进行深度监听，可以在添加watch的第三个参数</span><br><span class=\"line\">      */ </span><br><span class=\"line\">      watch(() =&gt; (&#123;...info&#125;), (newInfo, oldInfo) =&gt; &#123;</span><br><span class=\"line\">        console.log(&quot;newInfo:&quot;, newInfo, &quot;oldInfo:&quot;, oldInfo);</span><br><span class=\"line\">      &#125;, &#123;</span><br><span class=\"line\">        deep: true,</span><br><span class=\"line\">        immediate: true</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      const changeData = () =&gt; &#123;</span><br><span class=\"line\">        info.friend.name = &quot;beichen&quot;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        info,</span><br><span class=\"line\">        changeData</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n","comments":true,"categories":[{"name":"vue","slug":"vue","permalink":"http://beichenzero.github.io/categories/vue/"}],"tags":[{"name":"watch","slug":"watch","permalink":"http://beichenzero.github.io/tags/watch/"},{"name":"watchEffect","slug":"watchEffect","permalink":"http://beichenzero.github.io/tags/watchEffect/"}]},{"title":"computed的基本使用","date":"2022-05-09T14:21:22.000Z","path":"2022/05/09/vue-learn/computed的基本使用/","content":"<h2 id=\"computed的使用\"><a href=\"#computed的使用\" class=\"headerlink\" title=\"computed的使用\"></a>computed的使用</h2><ul>\n<li>方式一：接收一个getter函数，并为 getter 函数返回的值，返回一个不变的 ref 对象；</li>\n<li>方式二：接收一个具有 get 和 set 的对象，返回一个可变的（可读写）ref 对象</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setup() &#123;</span><br><span class=\"line\">  const firstName = ref(&quot;Kobe&quot;);</span><br><span class=\"line\">  const lastName = ref(&quot;Bryant&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">  // 用法一：传入一个getter函数</span><br><span class=\"line\">  // computed的返回值是一个不可变的响应式ref对象</span><br><span class=\"line\">  // const fullName = computed(() =&gt; firstName.value + &quot; &quot; + lastName.value);</span><br><span class=\"line\"></span><br><span class=\"line\">  // 用法二：传入一个对象，对象包含getter/setter</span><br><span class=\"line\">  const fullName = computed(&#123;</span><br><span class=\"line\">    get: () =&gt; firstName.value + &quot; &quot; + lastName.value,</span><br><span class=\"line\">    set(newValue) &#123;</span><br><span class=\"line\">      const names = newValue.split(&quot; &quot;);</span><br><span class=\"line\">      firstName.value = names[0];</span><br><span class=\"line\">      lastName.value = names[1];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">  const changeName = () =&gt; &#123;</span><br><span class=\"line\">    // firstName.value = &quot;beichen&quot;;</span><br><span class=\"line\">    fullName.value = &quot;beichen zero&quot;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    fullName,</span><br><span class=\"line\">    changeName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","comments":true,"categories":[{"name":"vue","slug":"vue","permalink":"http://beichenzero.github.io/categories/vue/"}],"tags":[{"name":"computed","slug":"computed","permalink":"http://beichenzero.github.io/tags/computed/"}]},{"title":"toRefs和toRef的基本使用","date":"2022-05-09T13:59:32.000Z","path":"2022/05/09/vue-learn/toRefs和toRef/","content":"<h2 id=\"toRefs和toRef\"><a href=\"#toRefs和toRef\" class=\"headerlink\" title=\"toRefs和toRef\"></a>toRefs和toRef</h2><h4 id=\"toRefs\"><a href=\"#toRefs\" class=\"headerlink\" title=\"toRefs\"></a>toRefs</h4><ul>\n<li>如果我们使用ES6的解构语法，对reactive返回的对象进行解构获取值，那么之后无论是修改结构后的变量，还是修改reactive<br>返回的state对象，数据都不再是响应式的<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const info = reactive(&#123;</span><br><span class=\"line\">  name: &quot;beichen&quot;,</span><br><span class=\"line\">  age: 22</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">const &#123; name, age &#125; = info;</span><br></pre></td></tr></table></figure>\n在这里return返回的<code>name</code>和<code>age</code>我们在使用的时候就不再是响应式的了</li>\n</ul>\n<p>当我们使用<code>toRefs</code>时来解构时，return返回的数据就是响应式的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const info = reactive(&#123;</span><br><span class=\"line\">  name: &quot;beichen&quot;,</span><br><span class=\"line\">  age: 22</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">const &#123; name, age &#125; = toRefs(info);</span><br></pre></td></tr></table></figure>\n<p><strong>这种做法相当于在<code>info.name</code>和<code>info.age</code>与<code>ref.value</code>之间建立的链接，修改其中任何一个的值，另外一个都会随之改变</strong></p>\n<h4 id=\"toRef\"><a href=\"#toRef\" class=\"headerlink\" title=\"toRef\"></a>toRef</h4><ul>\n<li>toRef: 对其中一个属性进行转换ref，建立链接<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const info = reactive(&#123;</span><br><span class=\"line\">  name: &quot;beichen&quot;,</span><br><span class=\"line\">  age: 22</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// toRef中有两个参数第一个是object，第二个是key值</span><br><span class=\"line\">const age = toRef(info, &quot;age&quot;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n","comments":true,"categories":[{"name":"vue","slug":"vue","permalink":"http://beichenzero.github.io/categories/vue/"}],"tags":[{"name":"toRefs","slug":"toRefs","permalink":"http://beichenzero.github.io/tags/toRefs/"},{"name":"toRef","slug":"toRef","permalink":"http://beichenzero.github.io/tags/toRef/"}]},{"title":"compositionAPI补充知识","date":"2022-05-09T08:54:23.000Z","path":"2022/05/09/vue-learn/compositionapi补充/","content":"<h2 id=\"Reactive判断的API\"><a href=\"#Reactive判断的API\" class=\"headerlink\" title=\"Reactive判断的API\"></a>Reactive判断的API</h2><h4 id=\"1-isProxy\"><a href=\"#1-isProxy\" class=\"headerlink\" title=\"1.isProxy\"></a>1.isProxy</h4><ul>\n<li>检查对象是否是由 reactive 或 readonly创建的 proxy。<h4 id=\"2-isReactive\"><a href=\"#2-isReactive\" class=\"headerlink\" title=\"2.isReactive\"></a>2.isReactive</h4></li>\n<li>检查对象是否是由 reactive创建的响应式代理： </li>\n<li>如果该代理是 readonly 建的，但包裹了由 reactive 创建的另一个代理，它也会返回 true.<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const info = readonly(reactive(&#123;name: &quot;beichen&quot;&#125;));</span><br></pre></td></tr></table></figure>\n这个时候就是返回<code>true</code></li>\n</ul>\n<h4 id=\"3-isReadonly\"><a href=\"#3-isReadonly\" class=\"headerlink\" title=\"3.isReadonly\"></a>3.isReadonly</h4><ul>\n<li>检查对象是否是由 readonly 创建的只读代理。</li>\n</ul>\n<h4 id=\"4-toRaw\"><a href=\"#4-toRaw\" class=\"headerlink\" title=\"4.toRaw\"></a>4.toRaw</h4><ul>\n<li>返回 reactive 或 readonly 代理的原始对象（不建议保留对原始对象的持久引用。请谨慎使用）。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 第一种(常见用法)</span><br><span class=\"line\">const info = &#123;name: &quot;beichen&quot;&#125;;</span><br><span class=\"line\">const readonlyInfo = readonly(info);</span><br><span class=\"line\">// 这里的info就是原始对象</span><br></pre></td></tr></table></figure></li>\n</ul>\n<span id=\"more\"></span>\n\n<h4 id=\"5-shallowReactive\"><a href=\"#5-shallowReactive\" class=\"headerlink\" title=\"5.shallowReactive\"></a>5.shallowReactive</h4><ul>\n<li>创建一个响应式代理，它跟踪其自身 property 的响应性，但不执行嵌套对象的深层响应式转换 (深层还是原生对象)。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const info = reactive(&#123;name: &quot;beichen&quot;, friends: &#123;name: &quot;beichenzero&#125;&#125;)</span><br></pre></td></tr></table></figure></li>\n<li><strong>自身原本是对info.name以及info.friends.name都包含响应式的转换</strong><br>当如我们执行：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const info = shallowReactive(&#123;name: &quot;beichen&quot;, friends: &#123;name: &quot;beichenzero&#125;&#125;)</span><br></pre></td></tr></table></figure></li>\n<li><strong>此时的info里面只有info.name是响应式改变的，原因是shallowReactive只做了一个浅层代理</strong></li>\n</ul>\n<h4 id=\"5-shallowReadonly\"><a href=\"#5-shallowReadonly\" class=\"headerlink\" title=\"5.shallowReadonly\"></a>5.shallowReadonly</h4><ul>\n<li>创建一个 proxy，使其自身的 property 为只读，但不执行嵌套对象的深度只读转换（深层还是可读、可写的）。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const info = readonly(&#123;name: &quot;beichen&quot;, friends: &#123;name: &quot;beichenzero&#125;&#125;)</span><br></pre></td></tr></table></figure></li>\n<li><strong>自身原本是对info.name以及info.friends.name都是不可改写的，都会报一个警告</strong><br>当如我们执行：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const info = shallowReadonly(&#123;name: &quot;beichen&quot;, friends: &#123;name: &quot;beichenzero&#125;&#125;)</span><br></pre></td></tr></table></figure></li>\n<li><strong>此时的info里面只有info.name是只读的，原因是shallowReadonly只做了一个浅层代理</strong></li>\n</ul>\n","comments":true,"categories":[{"name":"vue","slug":"vue","permalink":"http://beichenzero.github.io/categories/vue/"}],"tags":[{"name":"composition","slug":"composition","permalink":"http://beichenzero.github.io/tags/composition/"}]},{"title":"CompositionAPI","date":"2022-05-08T07:17:17.000Z","path":"2022/05/08/vue-learn/composition_api/","content":"<h2 id=\"optionsAPi的弊端\"><a href=\"#optionsAPi的弊端\" class=\"headerlink\" title=\"optionsAPi的弊端\"></a>optionsAPi的弊端</h2><ul>\n<li>在vue2中我们编写组件的方式是optionsAPI<br>例如：data定义的数据、methods定义的方法、computed中定义的计算属性、watch中监听属性的改变，还包括生命周期钩子</li>\n</ul>\n<h4 id=\"弊端\"><a href=\"#弊端\" class=\"headerlink\" title=\"弊端\"></a>弊端</h4><p>在我们实现某些功能的时候，例如写一个计数器<br>往往我们需要定义methods，其中定义一个+1/-1的函数、需要定义data中的counter数据、监听counter的改变。<br>当我们的代码逻辑变得很庞大的时候，逻辑就会变得不清晰，且代码量会变大很大，定义的方法和数据不连贯，使得代码的阅读和理解会变得很困难。</p>\n<h2 id=\"CompositionAPI\"><a href=\"#CompositionAPI\" class=\"headerlink\" title=\"CompositionAPI\"></a>CompositionAPI</h2><p>我们要使用Composition API时我们需要在vue组件中使用setup函数。<br>setup函数就是用来替代之前所编写的大部分选项。包括methods、computed、data、watch、生命周期等</p>\n<h4 id=\"setup函数的参数\"><a href=\"#setup函数的参数\" class=\"headerlink\" title=\"setup函数的参数\"></a>setup函数的参数</h4><p>1.props<br>props非常好理解，它其实就是父组件传递过来的属性会被放到props对象中，我们在setup中如果需要使用，那么就可以直接通过props参数获取。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;home message=&quot;父组件中的message&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<p>子组件中接收父组件传过来的messsage并指定类型和是否必须传过来。否则会报一个<strong>warning</strong>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props: &#123;</span><br><span class=\"line\">      message: &#123;</span><br><span class=\"line\">        type: String,</span><br><span class=\"line\">        required: true,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n<p>2.context<br>context也被称之为<strong>setupcontext</strong>,他包含三个属性：</p>\n<ul>\n<li>attrs<br>所有的非prop的attribute</li>\n<li>solts<br>父组件传递过来的插槽</li>\n<li>emit<br>当我们组件内部需要发出事件时会用到emit（因为我们不能访问this，所以不可以通过 this.$emit发出事件）</li>\n</ul>\n<span id=\"more\"></span>\n\n<h4 id=\"setup的返回值\"><a href=\"#setup的返回值\" class=\"headerlink\" title=\"setup的返回值\"></a>setup的返回值</h4><p>返回值是一个对象</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let counter = 100;</span><br><span class=\"line\">      const increment = () =&gt; &#123;</span><br><span class=\"line\">        console.log(&quot;+1&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        title: &quot;hello&quot;,</span><br><span class=\"line\">        counter,</span><br><span class=\"line\">        increment</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<p><em><strong>setup中不可以使用this，是因为在创建setup是压根就没有绑定this</strong></em></p>\n<h3 id=\"reactiveAPI\"><a href=\"#reactiveAPI\" class=\"headerlink\" title=\"reactiveAPI\"></a>reactiveAPI</h3><ul>\n<li>引入reactive：<br><code>import &#123; reactive &#125; from &quot;vue&quot;;</code></li>\n<li>reactive的使用<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reactive的使用</span><br><span class=\"line\">const state = reactive(&#123;</span><br><span class=\"line\">        counter: 100,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      const increment = () =&gt; &#123;</span><br><span class=\"line\">        state.counter++;</span><br><span class=\"line\">        console.log(state.counter);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        state,</span><br><span class=\"line\">        increment,</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n将counter定义在reactive中，这样会使counter变成响应式。使得我们在increment中修改counter时，我们在界面中所展示的counter的值也会跟着改变</li>\n</ul>\n<p><em><strong>reactive API对传入的类型是有限制的，要求我们传入的是一个<span style=\"color: red\">对象</span>或者<span style=\"color: red\">数组</span>。否则会报一个警告。</strong></em></p>\n<h3 id=\"refAPI\"><a href=\"#refAPI\" class=\"headerlink\" title=\"refAPI\"></a>refAPI</h3><ul>\n<li>refAPI的引入<br><code>import &#123; ref &#125; from &quot;vue&quot;;</code></li>\n</ul>\n<p>ref APT会返回一个可变的响应式对象，该对象作为一个响应式的引用维护着他内部的值。他内部的值是在<span style=\"color: red\">ref的value</span>中被维护的。</p>\n<h4 id=\"ref的自动解包\"><a href=\"#ref的自动解包\" class=\"headerlink\" title=\"ref的自动解包\"></a>ref的自动解包</h4><p>1.当我们在template中使用ref对象的时候，他会自动进行包，不需要我们在ref对象后面添加.value<br>2.此时这里的counter == counter.value<br><strong>这里的解包是浅层解包</strong></p>\n<ul>\n<li>如果外层嵌套的是一个reactive的对象时，可以自动解包</li>\n<li>如果外层对象是一个普通的对象的时候，是不能自动解包的<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* couter变成了一个ref的可响应式的引用(对象) */</span><br><span class=\"line\">//此时的counter可以说是一个对象</span><br><span class=\"line\">let counter = ref(100);</span><br><span class=\"line\"></span><br><span class=\"line\">//在编写逻辑代码的时候我们要拿到counter(对象)的值的时候是需要加.value的</span><br><span class=\"line\">//在逻辑代码中或者说在setup这个函数中是没有进行自动解包的过程</span><br><span class=\"line\">const increment = () =&gt; &#123;</span><br><span class=\"line\">  counter.value++;</span><br><span class=\"line\">  console.log(counter.value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">return &#123;</span><br><span class=\"line\">  counter,</span><br><span class=\"line\">  increment,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"readonly-只读-不可改写\"><a href=\"#readonly-只读-不可改写\" class=\"headerlink\" title=\"readonly(只读/不可改写)\"></a>readonly(只读/不可改写)</h3><p>在开发中常见的readonly方法会传入三个类型的参数：<br>类型一：普通对象；<br>类型二：reactive返回的对象；<br>类型三：ref的对象；</p>\n<p><strong>readonly的使用</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1.普通对象</span><br><span class=\"line\">const info1 = &#123;name: &quot;北辰&quot;&#125;;</span><br><span class=\"line\">const readonlyInfo1 = readonly(info1);</span><br><span class=\"line\"></span><br><span class=\"line\">// 2.响应式的对象reactive</span><br><span class=\"line\">const info2 = reactive(&#123;</span><br><span class=\"line\">  name: &quot;北辰&quot;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">const readonlyInfo2 = readonly(info2);</span><br><span class=\"line\"></span><br><span class=\"line\">// 3.响应式的对象ref</span><br><span class=\"line\">const info3 = ref(&quot;北辰&quot;);</span><br><span class=\"line\">const readonlyInfo3 = readonly(info3);</span><br><span class=\"line\"></span><br><span class=\"line\">const update = () =&gt; &#123;</span><br><span class=\"line\">  // 这三种方式是可以修改的</span><br><span class=\"line\">  info2.name = &quot;beichenzero&quot;;</span><br><span class=\"line\">  info3.value = &quot;beichenzero&quot;;</span><br><span class=\"line\">  info1.name = &quot;beichenzero&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 以下的三种方式是不可修改的，浏览器会报一个警告</span><br><span class=\"line\">  readonlyInfo1.name = &quot;beichenzero&quot;;</span><br><span class=\"line\">  readonlyInfo2.name = &quot;beichenzero&quot;;</span><br><span class=\"line\">  readonlyInfo3.value = &quot;beichenzero&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">return &#123;</span><br><span class=\"line\">  update</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","comments":true,"categories":[{"name":"vue","slug":"vue","permalink":"http://beichenzero.github.io/categories/vue/"}],"tags":[{"name":"Composition API","slug":"Composition-API","permalink":"http://beichenzero.github.io/tags/Composition-API/"}]},{"title":"mixin和extends","date":"2022-05-08T07:15:54.000Z","path":"2022/05/08/vue-learn/mixin和extends/","content":"<h2 id=\"mixin\"><a href=\"#mixin\" class=\"headerlink\" title=\"mixin\"></a>mixin</h2><h5 id=\"1-Mixin提供了一种非常灵活的方式，来分发Vue组件中的可复用功能\"><a href=\"#1-Mixin提供了一种非常灵活的方式，来分发Vue组件中的可复用功能\" class=\"headerlink\" title=\"1.Mixin提供了一种非常灵活的方式，来分发Vue组件中的可复用功能\"></a>1.Mixin提供了一种非常灵活的方式，来分发Vue组件中的可复用功能</h5><h5 id=\"2-一个Mixin对象可以包含任何组件选项\"><a href=\"#2-一个Mixin对象可以包含任何组件选项\" class=\"headerlink\" title=\"2.一个Mixin对象可以包含任何组件选项\"></a>2.一个Mixin对象可以包含任何组件选项</h5><h5 id=\"3-当组件使用Mixin对象时，所有Mixin对象的选项将被-混合-进入该组件本身的选项中\"><a href=\"#3-当组件使用Mixin对象时，所有Mixin对象的选项将被-混合-进入该组件本身的选项中\" class=\"headerlink\" title=\"3.当组件使用Mixin对象时，所有Mixin对象的选项将被 混合 进入该组件本身的选项中\"></a>3.当组件使用Mixin对象时，所有Mixin对象的选项将被 混合 进入该组件本身的选项中</h5><h3 id=\"mixin的基本使用\"><a href=\"#mixin的基本使用\" class=\"headerlink\" title=\"mixin的基本使用\"></a>mixin的基本使用</h3><p>ex:写入公共内容到demoMixin.js文件中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const demoMixin = &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      message: &quot;hello demoMixin&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    foo() &#123;</span><br><span class=\"line\">      console.log(&quot;hello Mixin foo&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created() &#123;</span><br><span class=\"line\">    console.log(&quot;Mixin created&quot;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在需要调用的vue文件下引入即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; demoMixin &#125; from &quot;./minins/demoMixin&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    mixins: [demoMixin],</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以在当前vue文件中使用demoMixin.js文件下创建的内容(data/methods/生命周期函数等)</p>\n<span id=\"more\"></span>\n<h3 id=\"Mixin的合并规则\"><a href=\"#Mixin的合并规则\" class=\"headerlink\" title=\"Mixin的合并规则\"></a>Mixin的合并规则</h3><h5 id=\"1-如果时data函数的返回值对象\"><a href=\"#1-如果时data函数的返回值对象\" class=\"headerlink\" title=\"1.如果时data函数的返回值对象\"></a>1.如果时data函数的返回值对象</h5><ul>\n<li>默认情况下时会进行合并</li>\n<li>如果data返回值对象的属性发生了冲突，那么会保留vue组件自身的数据<h5 id=\"2-如果是生命周期钩子函数\"><a href=\"#2-如果是生命周期钩子函数\" class=\"headerlink\" title=\"2.如果是生命周期钩子函数\"></a>2.如果是生命周期钩子函数</h5></li>\n<li>生命周期的钩子函数会被合并到数组中，并依次执行，都会被调用<h5 id=\"3-值为对象的选项，如methods-watch-components等，会被合并为一个对象\"><a href=\"#3-值为对象的选项，如methods-watch-components等，会被合并为一个对象\" class=\"headerlink\" title=\"3.值为对象的选项，如methods/watch/components等，会被合并为一个对象\"></a>3.值为对象的选项，如methods/watch/components等，会被合并为一个对象</h5></li>\n<li>不同方法名可以合并</li>\n<li>如果方法名等发生了冲突，还是会优先保留自身组件的方法。</li>\n</ul>\n<h3 id=\"Mixin全局混入\"><a href=\"#Mixin全局混入\" class=\"headerlink\" title=\"Mixin全局混入\"></a>Mixin全局混入</h3><p>使用Mixin全局混入，这样可以在所有的组件中都能使用全局的Mixin。<br>一旦注册，那么全局混入的选项将会影响每一个组件。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const app = createApp(App);</span><br><span class=\"line\">app.mixin(&#123;</span><br><span class=\"line\">  created() &#123;</span><br><span class=\"line\">    console.log(&quot;global mixin created&quot;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","comments":true,"categories":[{"name":"vue","slug":"vue","permalink":"http://beichenzero.github.io/categories/vue/"}],"tags":[{"name":"mixin","slug":"mixin","permalink":"http://beichenzero.github.io/tags/mixin/"}]},{"title":"列表元素的过渡","date":"2022-05-07T12:44:29.000Z","path":"2022/05/07/vue-learn/列表元素的过渡/","content":"<h2 id=\"列表元素的过渡\"><a href=\"#列表元素的过渡\" class=\"headerlink\" title=\"列表元素的过渡\"></a>列表元素的过渡</h2><ul>\n<li>过渡元素一般时针对单个元素或组件的。<br>那么如果我们渲染的时一个列表，那么就要用到<code>&lt;transition-group&gt;</code>组件来完成  </li>\n</ul>\n<h5 id=\"使用transition-group的特点\"><a href=\"#使用transition-group的特点\" class=\"headerlink\" title=\"使用transition-group的特点\"></a>使用transition-group的特点</h5><ul>\n<li>默认情况下，它不会渲染一个元素的包裹器，但是你可以指定一个元素并以 tag attribute 进行渲染</li>\n<li>过渡模式不可用，因为我们不再相互切换特有的元素</li>\n<li>内部元素总是需要提供唯一的 key attribute 值</li>\n<li>CSS 过渡的类将会应用在内部的元素中，而不是这个组/容器本身</li>\n</ul>\n<h4 id=\"列表过渡的基本使用\"><a href=\"#列表过渡的基本使用\" class=\"headerlink\" title=\"列表过渡的基本使用\"></a>列表过渡的基本使用</h4><p>我们以一个小案例了解他的基本使用：添加/删除数字</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;addNum&quot;&gt;添加数字&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;removeNum&quot;&gt;删除数字&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;shuffleNum&quot;&gt;打乱顺序&lt;/button&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;transition-group tag=&quot;p&quot; name=&quot;beichen&quot;&gt;</span><br><span class=\"line\">      &lt;span v-for=&quot;item in numbers&quot; :key=&quot;item&quot; class=&quot;item&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">    &lt;/transition-group&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  import _ from &quot;lodash&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        numbers: [1, 2, 3, 4, 5, 6, 7, 8, 9],</span><br><span class=\"line\">        numberCounter: 10</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      addNum() &#123;</span><br><span class=\"line\">        this.numbers.splice(this.randomIndex(), 0, this.numberCounter++);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      removeNum() &#123;</span><br><span class=\"line\">        this.numbers.splice(this.randomIndex(), 1);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      shuffleNum() &#123;</span><br><span class=\"line\">        this.numbers = _.shuffle(this.numbers);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      randomIndex() &#123;</span><br><span class=\"line\">        return Math.floor(Math.random() * this.numbers.length)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">  .item &#123;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    margin-right: 10px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .beichen-enter-from,</span><br><span class=\"line\">  .beichen-leave-to &#123;</span><br><span class=\"line\">    opacity: 0;</span><br><span class=\"line\">    transform: translateY(30px);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .beichen-enter-active,</span><br><span class=\"line\">  .beichen-leave-active &#123;</span><br><span class=\"line\">    transition: all 1s ease;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .beichen-leave-active &#123;</span><br><span class=\"line\">    /* 脱离标准流，在移除一个元素开始时就开始移动后面的元素 */</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .beichen-move &#123;</span><br><span class=\"line\">    transition: transform 1s ease;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h4 id=\"列表的交错过渡案例\"><a href=\"#列表的交错过渡案例\" class=\"headerlink\" title=\"列表的交错过渡案例\"></a>列表的交错过渡案例</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;input v-model=&quot;keywork&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;transition-group tag=&quot;ul&quot; name=&quot;beichen&quot; :css=&quot;false&quot;</span><br><span class=\"line\">                      @before=&quot;beforEnter&quot;</span><br><span class=\"line\">                      @enter=&quot;enter&quot;</span><br><span class=\"line\">                      @leave=&quot;leave&quot;&gt;</span><br><span class=\"line\">      &lt;li class=&quot;ul_li&quot; v-for=&quot;(item, index) in showNames&quot; :key=&quot;item&quot; :data-index=&quot;index&quot;&gt;</span><br><span class=\"line\">        &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">      &lt;/li&gt;</span><br><span class=\"line\">    &lt;/transition-group&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  import gsap from &quot;gsap&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        names: [&quot;abc&quot;, &quot;james&quot;, &quot;kobe&quot;, &quot;beichen&quot;, &quot;nba&quot;, &quot;cba&quot;, &quot;haixia&quot;],</span><br><span class=\"line\">        keywork: &quot;&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">      showNames() &#123;</span><br><span class=\"line\">        //indexof会返回item在这其中的数组下标位置。如果没找到就是-1</span><br><span class=\"line\">        //不等于-1就说明在里面，则返回下标值且不等于-1为true，就展示。</span><br><span class=\"line\">        return this.names.filter(item =&gt; item.indexOf(this.keywork) !== -1);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        beforeEnter(el) &#123;</span><br><span class=\"line\">        el.style.opacity = 0;</span><br><span class=\"line\">        el.style.height = 0;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      enter(el, done) &#123;</span><br><span class=\"line\">        gsap.to(el, &#123;</span><br><span class=\"line\">          opacity: 1,</span><br><span class=\"line\">          height: &quot;1.5em&quot;,</span><br><span class=\"line\">          delay: el.dataset.index * 0.5,</span><br><span class=\"line\">          onComplete: done</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      leave(el, done) &#123;</span><br><span class=\"line\">        gsap.to(el, &#123;</span><br><span class=\"line\">          opacity: 0,</span><br><span class=\"line\">          height: 0,</span><br><span class=\"line\">          delay: el.dataset.index * 0.5,</span><br><span class=\"line\">          onComplete: done</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">  .beichen-enter-from,</span><br><span class=\"line\">  .beichen-leave-to &#123;</span><br><span class=\"line\">    opacity: 0;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .beichen-enter-active,</span><br><span class=\"line\">  .beichen-leave-active &#123;</span><br><span class=\"line\">    transition: opacity 1s ease;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n","comments":true,"categories":[{"name":"vue","slug":"vue","permalink":"http://beichenzero.github.io/categories/vue/"}],"tags":[{"name":"transition","slug":"transition","permalink":"http://beichenzero.github.io/tags/transition/"},{"name":"案例","slug":"案例","permalink":"http://beichenzero.github.io/tags/%E6%A1%88%E4%BE%8B/"}]},{"title":"animate和gsap的基本使用","date":"2022-05-07T12:43:07.000Z","path":"2022/05/07/vue-learn/animate和gsap的使用/","content":"<h2 id=\"安装Animate-css\"><a href=\"#安装Animate-css\" class=\"headerlink\" title=\"安装Animate.css\"></a>安装Animate.css</h2><ul>\n<li>yarn安装: <code>yarn add animate.css</code></li>\n<li>npm安装: <code>npm install animate.css</code></li>\n</ul>\n<h4 id=\"animate-css的导入\"><a href=\"#animate-css的导入\" class=\"headerlink\" title=\"animate.css的导入\"></a>animate.css的导入</h4><ul>\n<li>在main.js中直接引入: <code>import &quot;animate.css&quot;</code></li>\n</ul>\n<h4 id=\"animate-css的使用\"><a href=\"#animate-css的使用\" class=\"headerlink\" title=\"animate.css的使用\"></a>animate.css的使用</h4><p>1.用法一：直接使用animate库中定义的keyframes动画</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.beichen-enter-active &#123;</span><br><span class=\"line\">  animation: flip 1s ease;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.beichen-leave-active &#123;</span><br><span class=\"line\">  animation: flip 1s ease reverse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.用法二：直接使用animate库提供给我们的类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;transiton name=&quot;beichen&quot;</span><br><span class=\"line\">           enter-active-class=&quot;animate__animated animate__lightSpeedInRight&quot;</span><br><span class=\"line\">           leave-active-class=&quot;animate__animated animate__lishtSpeedOutRight&quot;&gt;</span><br><span class=\"line\">  &lt;h2 v-if=&quot;isShow&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">&lt;/transition&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>其中<code>animate__animated</code>类时必须要添加的</strong></p>\n<h2 id=\"gsap库\"><a href=\"#gsap库\" class=\"headerlink\" title=\"gsap库\"></a>gsap库</h2><h4 id=\"实现一些动画的库\"><a href=\"#实现一些动画的库\" class=\"headerlink\" title=\"实现一些动画的库\"></a>实现一些动画的库</h4><p>利用gsap来完成js最基本的动画</p>\n<ul>\n<li><p>安装gsap库<br><code>yarn add gsap</code> or <code>npm install gsap</code></p>\n</li>\n<li><p>导入gsap库<br><code>import gsap from &quot;gsap&quot;;</code></p>\n</li>\n</ul>\n<p>transition组件提供给我们的JavaScript钩子：</p>\n<ul>\n<li>@before-enter=”beforeEnter”</li>\n<li>@enter=”enter”</li>\n<li>@after-enter=”afterEnter”</li>\n<li>@before-leave=”beforeLeave”</li>\n<li>@leave=”leave”</li>\n<li>@after-leave=”afterLeave”<span id=\"more\"></span></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">      //生命周期的钩子</span><br><span class=\"line\">      beforeEnter(el) &#123;</span><br><span class=\"line\">        console.log(&quot;beforEnter&quot;);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      enter(el, done) &#123;</span><br><span class=\"line\">        console.log(&quot;enter&quot;);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      afterEnter(el) &#123;</span><br><span class=\"line\">        console.log(&quot;afterEnter&quot;);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      beforeLeave(el) &#123;</span><br><span class=\"line\">        console.log(&quot;beforLeave&quot;);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      leave(el, done) &#123;</span><br><span class=\"line\">        console.log(&quot;Leave&quot;);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      afterLeave(el) &#123;</span><br><span class=\"line\">        console.log(&quot;afterLeave&quot;);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>当我们使用JavaScript来执行过渡动画时，需要进行 done 回调，否则它们将会被同步调用，过渡会立即完成</strong><br><code>enter</code>和<code>leave</code>钩子时有<code>el(target)</code>和<code>done</code>参数的,其余的钩子只有el参数。</p>\n<h4 id=\"css-”false”-属性\"><a href=\"#css-”false”-属性\" class=\"headerlink\" title=\"css=”false” 属性\"></a>css=”false” 属性</h4><p>添加<code>:css=&quot;false&quot;</code>会让VUE跳过css的检测，不仅能提高性能，还能避免css的规则的影响。</p>\n<h4 id=\"gsap库的使用\"><a href=\"#gsap库的使用\" class=\"headerlink\" title=\"gsap库的使用\"></a>gsap库的使用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;transition @enter=&quot;enter&quot;</span><br><span class=\"line\">                @leave=&quot;leave&quot;</span><br><span class=\"line\">                :css=&quot;false&quot;&gt;</span><br><span class=\"line\">      &lt;h2 class=&quot;title&quot; v-if=&quot;isShow&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;/transition&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">      //生命周期的钩子</span><br><span class=\"line\">      enter(el, done) &#123;</span><br><span class=\"line\">        console.log(&quot;enter&quot;);</span><br><span class=\"line\">        gsap.from(el, &#123;</span><br><span class=\"line\">          scale: 0,</span><br><span class=\"line\">          /* 等同于transfrom: straslate(200px) */</span><br><span class=\"line\">          //相关的文档在官网中有，可以查得到</span><br><span class=\"line\">          x: this.distance,</span><br><span class=\"line\">          /* 动画执行的时间,默认是的0.5s */</span><br><span class=\"line\">          // duration: 1,</span><br><span class=\"line\">          //在动画过渡完成后回调done，表示执行结束</span><br><span class=\"line\">          onComplete: done</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      leave(el, done) &#123;</span><br><span class=\"line\">        console.log(&quot;Leave&quot;);</span><br><span class=\"line\">        gsap.to(el, &#123;</span><br><span class=\"line\">          scale: 0,</span><br><span class=\"line\">          x: this.distance,</span><br><span class=\"line\">          onComplete: done</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"gsap实现数字递增的一个小案例\"><a href=\"#gsap实现数字递增的一个小案例\" class=\"headerlink\" title=\"gsap实现数字递增的一个小案例\"></a>gsap实现数字递增的一个小案例</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;input type=&quot;number&quot; step=&quot;100&quot; v-model=&quot;counter&quot;&gt;</span><br><span class=\"line\">    &lt;h2&gt;当前计数:&#123;&#123;ShowCounter&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;h2&gt;当前计数:&#123;&#123;ShowNumber.toFixed(0)&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  import gsap from &quot;gsap&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        counter: 0,</span><br><span class=\"line\">        ShowNumber: 0</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">      ShowCounter() &#123;</span><br><span class=\"line\">        return this.ShowNumber.toFixed(0);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    watch: &#123;</span><br><span class=\"line\">      counter(NewValue) &#123;</span><br><span class=\"line\">        gsap.to(this, &#123;</span><br><span class=\"line\">          // duration: 0.5,</span><br><span class=\"line\">          ShowNumber: NewValue</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n","comments":true,"categories":[{"name":"vue","slug":"vue","permalink":"http://beichenzero.github.io/categories/vue/"}],"tags":[{"name":"animate","slug":"animate","permalink":"http://beichenzero.github.io/tags/animate/"},{"name":"gsap","slug":"gsap","permalink":"http://beichenzero.github.io/tags/gsap/"}]},{"title":"动画的基本使用","date":"2022-05-07T12:40:37.000Z","path":"2022/05/07/vue-learn/动画的基本使用/","content":"<h2 id=\"过渡动画class\"><a href=\"#过渡动画class\" class=\"headerlink\" title=\"过渡动画class\"></a>过渡动画class</h2><ul>\n<li><span style=\"color:red\">v-enter-from</span>:定义进入过过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。</li>\n<li><span style=\"color:red\">v-enter-active</span>定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。</li>\n<li><span style=\"color:red\">v-enter-to</span>定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 v-enter-from 被移除)，在过渡/动画完成之后移除</li>\n<li><span style=\"color:red\">v-leave-from</span>定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除</li>\n<li><span style=\"color:red\">v-leave-active</span>定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。</li>\n<li><span style=\"color:red\">v-leave-to</span>离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 v-leave-from 被删除)，在过渡/动画完成之后移除。</li>\n</ul>\n<p><strong>如果我们在transition中没有添加name属性,那么他的默认前缀就v-,如果添加了name属性，以name=”beichen”为例，那么所有的class会以beichen-开头。</strong></p>\n<ul>\n<li>如果同时设置了animationend和transitionend，我们可以在transition中设置type属性为transition和animation来明确告知vue监听的类型。<h4 id=\"显示指定动画时间\"><a href=\"#显示指定动画时间\" class=\"headerlink\" title=\"显示指定动画时间\"></a>显示指定动画时间</h4></li>\n<li>显示指定动画时间可以通过duration属性。<br>1.number类型：同时设置进入和离开的时间<br>ex：<code>:duration: 1000</code><br>2.object类型：分别设置进入和离开的时间<br>ex：<code>:duration: &#123;enter: 1000, leave: 800&#125;</code></li>\n</ul>\n<h4 id=\"过渡模式的mode\"><a href=\"#过渡模式的mode\" class=\"headerlink\" title=\"过渡模式的mode\"></a>过渡模式的<code>mode</code></h4><ul>\n<li><code>in-out</code>:新元素先进行过渡，完成之后当前元素过渡离开(<strong>先进后出</strong>)</li>\n<li><code>out-in</code>:当前元素先进行过渡，完成之后新元素过渡进入(<strong>先出后进</strong>)</li>\n</ul>\n<h4 id=\"appear属性\"><a href=\"#appear属性\" class=\"headerlink\" title=\"appear属性\"></a><code>appear</code>属性</h4><ul>\n<li>用来设置在加载界面/初次渲染时也是有动画显示的。</li>\n</ul>\n","comments":true,"categories":[{"name":"vue","slug":"vue","permalink":"http://beichenzero.github.io/categories/vue/"}],"tags":[{"name":"transiton","slug":"transiton","permalink":"http://beichenzero.github.io/tags/transiton/"}]},{"title":"slot","date":"2022-03-05T12:56:19.000Z","path":"2022/03/05/vue-learn/slot/","content":"<h3 id=\"渲染作用域\"><a href=\"#渲染作用域\" class=\"headerlink\" title=\"渲染作用域\"></a>渲染作用域</h3><blockquote>\n<p>父级模板里面的所有内容都是在父级作用域中编译的<br>子模板里面的所有内容都是在子作用域中编译的</p>\n</blockquote>\n<h3 id=\"作用域插槽\"><a href=\"#作用域插槽\" class=\"headerlink\" title=\"作用域插槽\"></a>作用域插槽</h3><ul>\n<li>我们希望插槽<strong>可以访问到子组件中的内容</strong>是非常重要的</li>\n<li>1.在App.vue中定义好数据</li>\n<li>2.传递给ShowNames组件中</li>\n<li>3.ShowNames组件中遍历name数组的数据</li>\n<li>4.定义插槽的prop</li>\n<li>5.通过v-slot:default的方式获取到slot的props</li>\n<li>6.使用slotProps中的item和index<br>代码如下<br>ShowNames.vue</li>\n</ul>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;template v-for=&quot;(item, index) in name&quot;&gt;</span><br><span class=\"line\">      &lt;slot :item=&quot;item&quot; :index=&quot;index&quot;&gt;&lt;/slot&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\">      name: &#123;</span><br><span class=\"line\">        type: Array,</span><br><span class=\"line\">        default: () =&gt; []</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>App.vue</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;show-names :name=&quot;names&quot;&gt;</span><br><span class=\"line\">      &lt;template v-slot=&quot;slotProps&quot;&gt;</span><br><span class=\"line\">        &lt;button&gt;&#123;&#123;slotProps.item&#125;&#125;&lt;/button&gt;</span><br><span class=\"line\">      &lt;/template&gt;</span><br><span class=\"line\">    &lt;/show-names&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  import ShowNames from &quot;./ShowNames.vue&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">      ShowNames</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        names: [&#x27;北辰&#x27;, &#x27;beichen&#x27;, &#x27;海霞&#x27;],</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>独占默认插槽缩写</strong></p>\n</blockquote>\n<blockquote>\n<p>独占：只使用一个插槽，但是可以有多个插槽<br>默认：是指slot默认的name是default</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;template v-for=&quot;(item, index) in name&quot;&gt;</span><br><span class=\"line\">      &lt;slot :item=&quot;item&quot; :index=&quot;index&quot;&gt;&lt;/slot&gt;</span><br><span class=\"line\">      // 这里的可以定义多个插槽</span><br><span class=\"line\">      &lt;slot name=&quot;beichen&quot;&gt;&lt;/slot&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<p>正确使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;show-names :name=&quot;names&quot; v-slot=&quot;slotProps&quot;&gt;</span><br><span class=\"line\">  // 在使用时只能有一个插槽</span><br><span class=\"line\">  &lt;p&gt;&#123;&#123;slotProps.item&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;/show-names&gt;</span><br></pre></td></tr></table></figure>\n<p>错误使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;show-names :name=&quot;names&quot; v-slot=&quot;slotProps&quot;&gt;</span><br><span class=\"line\">  &lt;p&gt;&#123;&#123;slotProps.item&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">  // 这里就是定义了两个插槽，他会报错</span><br><span class=\"line\">  &lt;template #beichen&gt;</span><br><span class=\"line\">    &lt;h2&gt;具名插槽的使用&lt;/h2&gt;</span><br><span class=\"line\">  &lt;/template&gt;</span><br><span class=\"line\">&lt;/show-names&gt;</span><br></pre></td></tr></table></figure>\n\n<p>或是不使用<strong>独占默认插槽缩写</strong>，则可以写成如下这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;show-names :name=&quot;names&quot;&gt;</span><br><span class=\"line\">  &lt;template v-slot=&quot;slotProps&quot;&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;&#123;slotProps.item&#125;&#125;&lt;/p&gt;      </span><br><span class=\"line\">  &lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;template #beichen&gt;</span><br><span class=\"line\">    &lt;h2&gt;具名插槽的使用&lt;/h2&gt;</span><br><span class=\"line\">  &lt;/template&gt;</span><br><span class=\"line\">&lt;/show-names&gt;</span><br></pre></td></tr></table></figure>\n","comments":true,"categories":[{"name":"vue","slug":"vue","permalink":"http://beichenzero.github.io/categories/vue/"}],"tags":[{"name":"slot","slug":"slot","permalink":"http://beichenzero.github.io/tags/slot/"}]},{"title":"attribute和$attrs","date":"2022-03-04T11:42:39.000Z","path":"2022/03/04/vue-easy/attribute和attrs/","content":"<h2 id=\"inherirAttrs\"><a href=\"#inherirAttrs\" class=\"headerlink\" title=\"inherirAttrs\"></a>inherirAttrs</h2><blockquote>\n<p>Attribute继承问题<br>首先，attribute是我们在父组件中定义了<span style=\"color: red\">非prop的Attribute</span>，该属性没有定义对应的props或者emits。</p>\n</blockquote>\n<ul>\n<li>常见的包括class,style,id属性等<br>例如我们在父组件中定义了如下的值：<br><code>&lt;show-message class=&quot;beichen&quot; id=&quot;beichenzero&quot;&gt;&lt;/show-message&gt;</code><br>这里的<code>class=&quot;beichen&quot;</code>和<code>id=&quot;beichenzero&quot;</code>就是<span style=\"color: red\">非prop的Attribute</span><br>如果我们的子组件中包含有根组件,例如<code>&lt;div&gt;&lt;/div&gt;</code>。<br>运行项目时，我们就会看到它自动变成<code>&lt;div class=&quot;beichen&quot; id=&quot;beichenzero&quot;&gt;&lt;/div&gt;</code>,添加了class属性和id属性。</li>\n</ul>\n<p>当我们不想出现这种特殊的情况是，我们可以在子组件中添加：<br><code>inheritAttrs: flase,</code>代码，这就等于时禁用了，<code>inheritAttrs</code>默认的值时true。</p>\n<span id=\"more\"></span>\n<h2 id=\"attrs\"><a href=\"#attrs\" class=\"headerlink\" title=\"$attrs\"></a>$attrs</h2><p><strong><span style=\"color: red\">$attrs</span>可以访问所有的非props的attribute。</strong><br>案例:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">App.vue</span><br><span class=\"line\">&lt;show-message class=&quot;beichen&quot; id=&quot;beichenzero&quot; title=&quot;title&quot; content=&quot;content&quot;&gt;&lt;/show-message&gt;</span><br><span class=\"line\">ShowMessage.vue</span><br><span class=\"line\">&lt;h2 :class=&quot;$attrs.class&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/h2&gt;</span><br></pre></td></tr></table></figure>\n<p>在ShowMessage.vue中禁用了<code>inheritAttrs: false</code>.<br>页面显示效果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2 class=&quot;beichen&quot;&gt;title&lt;/h2&gt;</span><br></pre></td></tr></table></figure>","comments":true,"categories":[{"name":"vue","slug":"vue","permalink":"http://beichenzero.github.io/categories/vue/"}],"tags":[{"name":"attribute","slug":"attribute","permalink":"http://beichenzero.github.io/tags/attribute/"},{"name":"attrs","slug":"attrs","permalink":"http://beichenzero.github.io/tags/attrs/"}]},{"title":"vue-商品切换案例","date":"2022-03-03T10:50:43.000Z","path":"2022/03/03/vue-easy/vue-商品切换案例/","content":"<h2 id=\"商品切换小案例\"><a href=\"#商品切换小案例\" class=\"headerlink\" title=\"商品切换小案例\"></a>商品切换小案例</h2><blockquote>\n<p><strong>思路</strong></p>\n</blockquote>\n<p>1.父组件中定义<code>titles</code>数组<br>2.利用父传子的方式将<code>titles</code>数组传给子组件<br>3.子组件中接收，利用<code>v-for</code>指令遍历数组，动态绑定key。<br>4.添加class，动态绑定class，使点击的那个标题处于活跃状态，利用index和自己定义的currentIndex的关系。<br>5.<code>props</code>可以限定父组件传过来的值使什么，并添加默认值。<br>6.通过<code>@click</code>的方式，将<code>index</code>的值通过子传父传递父组件，同时在点击事件传值的同时将index的值赋给currentsIndex。<br>7.定义<code>contents</code>数组，并再次定义currentIndex，默认值为0。<br>8.最后监听子组件的传递并执行函数titleCLick，将index的值也赋值给currentIndex，目的是为了让title和content的变化是一致的。  </p>\n<ul>\n<li>代码如下</li>\n</ul>\n<span id=\"more\"></span>\n<p>App.vue</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;tab-control :title=&quot;titles&quot; @titleClick=&quot;titleClick&quot;&gt;&lt;/tab-control&gt;</span><br><span class=\"line\">    &lt;h2&gt;&#123;&#123;contents[currentIndex]&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  import TabControl from &quot;./TabControl.vue&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">      TabControl</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        titles: [&quot;衣服&quot;, &quot;鞋子&quot;, &quot;裤子&quot;],</span><br><span class=\"line\">        contents: [&quot;衣服内容&quot;, &quot;鞋子内容&quot;, &quot;裤子内容&quot;],</span><br><span class=\"line\">        currentIndex: 0</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      titleClick(index) &#123; </span><br><span class=\"line\">        this.currentIndex = index;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>TabControl.vue</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;tab-control&quot;&gt;</span><br><span class=\"line\">    &lt;div  v-for=&quot;(item ,index) in title&quot;</span><br><span class=\"line\">          :key=&quot;index&quot;</span><br><span class=\"line\">          class=&quot;tab-control-item&quot;</span><br><span class=\"line\">          :class=&quot;&#123;active: currentIndex === index&#125;&quot;</span><br><span class=\"line\">          @click=&quot;itemClick(index)&quot;&gt;</span><br><span class=\"line\">      &lt;span&gt;&#123;&#123;item&#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    // 可以通过 emits 选项来定义组件可触发的事件</span><br><span class=\"line\">    emits: [&quot;titleClick&quot;],</span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\">      title: &#123;</span><br><span class=\"line\">        type: Array,</span><br><span class=\"line\">        default() &#123;</span><br><span class=\"line\">          return []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        currentIndex: 0,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      itemClick(index) &#123;</span><br><span class=\"line\">        this.currentIndex = index;</span><br><span class=\"line\">        this.$emit(&quot;titleClick&quot;, index)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">  .tab-control &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .tab-control-item&#123;</span><br><span class=\"line\">    flex: 1;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .tab-control-item.active &#123;</span><br><span class=\"line\">    color: red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .tab-control-item.active span &#123;</span><br><span class=\"line\">    border-bottom: 3px solid red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>以上代码均在vue-cli创建的项目中完成，主要看思路。</p>\n","comments":true,"categories":[{"name":"vue","slug":"vue","permalink":"http://beichenzero.github.io/categories/vue/"}],"tags":[{"name":"vue案例","slug":"vue案例","permalink":"http://beichenzero.github.io/tags/vue%E6%A1%88%E4%BE%8B/"}]},{"title":"vue-组件传值","date":"2022-03-03T10:43:30.000Z","path":"2022/03/03/vue-easy/vue-组件传值/","content":"<h3 id=\"禁用Attribute继承和多根节点\"><a href=\"#禁用Attribute继承和多根节点\" class=\"headerlink\" title=\"禁用Attribute继承和多根节点\"></a>禁用Attribute继承和多根节点</h3><blockquote>\n<p><strong>父(组件)传子(组件)时</strong></p>\n</blockquote>\n<p>父组件中有<code>class</code>、<code>id</code>等元素的时候<br>在需要传值给子组件时<br>子组件中:<br><code>&lt;h2 :=&quot;$attrs&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/h2&gt;&lt;h2 :class=&quot;$attrs.class&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/h2&gt;</code><br>父组件中:<br><code>&lt;show-message class=&quot;beichen&quot; id=&quot;beichenzero&quot; title=&quot;哈哈哈&quot; content=&quot;嘿嘿嘿&quot;&gt;&lt;/show-message</code></p>\n<blockquote>\n<p><strong>子组件传递信息给父组件</strong></p>\n</blockquote>\n<p>逻辑关系：<br>在子组件中定义需要传递的name -&gt; 通过<code>$emit</code>来传递。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 一般时用数组传递信息</span><br><span class=\"line\">emits: [&quot;add&quot;, &quot;sub&quot;, &quot;add_N&quot;],</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  increment() &#123;</span><br><span class=\"line\">    console.log(&quot;+1&quot;);</span><br><span class=\"line\">    // 触发事件</span><br><span class=\"line\">    this.$emit(&quot;add&quot;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  decrement() &#123;</span><br><span class=\"line\">    console.log(&quot;-1&quot;);</span><br><span class=\"line\">    // 触发时间</span><br><span class=\"line\">    this.$emit(&quot;sub&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>这里我时通过按钮的点击时间触发函数的方式进行值传递。<br>同时在父组件中通过<code>v-on</code>或是<code>@</code>的语法糖来监听  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">template代码：</span><br><span class=\"line\">&lt;h2&gt;当前计数:&#123;&#123;counter&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">&lt;counter-operation @add=&quot;add()&quot; @sub=&quot;sub()&quot;&gt;&lt;/counter-operation&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">script代码：</span><br><span class=\"line\">data() &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    counter: 0,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  add() &#123;</span><br><span class=\"line\">    this.counter++;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  sub() &#123;</span><br><span class=\"line\">    this.counter--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><em><strong>问题1：子组件使用this.$emit(‘父组件事件名’,参数)，父组件接收参数报undifined</strong></em></p>\n<ul>\n<li>解决办法：<br>去掉父组件监听后使用方法的方法名的括号，子组件未识别。<br>错误案例(<strong>以下代码为父组件中的</strong>)：<br><code>&lt;counter-operation @addN=&quot;addNum()&quot;&gt; &lt;/counter-operation&gt;</code><br><span style=\"color: red\">去掉addNum后面的括号就好了</span></li>\n</ul>\n","comments":true,"categories":[{"name":"vue","slug":"vue","permalink":"http://beichenzero.github.io/categories/vue/"}],"tags":[{"name":"组件传值","slug":"组件传值","permalink":"http://beichenzero.github.io/tags/%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/"}]},{"title":"vue-watch","date":"2022-02-28T14:33:41.000Z","path":"2022/02/28/vue-easy/vue-watch/","content":"<h2 id=\"1-监听器-侦听器的基本使用watch\"><a href=\"#1-监听器-侦听器的基本使用watch\" class=\"headerlink\" title=\"1. 监听器/侦听器的基本使用watch\"></a>1. 监听器/侦听器的基本使用watch</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">    // message是需要监听的data中的属性名称</span><br><span class=\"line\">    // newValue是变化后的新值</span><br><span class=\"line\">    // oldValue是变化前的旧值</span><br><span class=\"line\">    message: function(newValue, oldValue) &#123;</span><br><span class=\"line\">        // console.log(&quot;新值&quot;, newValue, &quot;旧值&quot; ,oldValue);</span><br><span class=\"line\">        this.queryAnwser();</span><br><span class=\"line\">        // 监听到变化后就执行搜索答案的方法</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其他的代码就没有放上去了，这里主要说明watch的用法。</p>\n<h3 id=\"2-监听器的配置选项\"><a href=\"#2-监听器的配置选项\" class=\"headerlink\" title=\"2. 监听器的配置选项\"></a>2. 监听器的配置选项</h3><p>默认情况下侦听器只会侦听数据本身的改变（对于内部发生的改变是监听不到的）<br>深度侦听(deep) / 立即执行(immediate)（一定会执行一次）<br><code>depp: true</code> 用于表示进行深度监听。<br><code>immediate: true</code> 用于表示在加载时就执行一次，无论被监听的值是否改变。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  // 语法糖</span><br><span class=\"line\">  info(newValue, oldValue)&#123;</span><br><span class=\"line\">    console.log(&quot;new&quot;,newValue, &quot;old&quot;,oldValue);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 普通写法</span><br><span class=\"line\">  info: &#123;</span><br><span class=\"line\">    handler: function(newInfo, oldInfo)&#123;</span><br><span class=\"line\">      console.log(&quot;new&quot;,newInfo, &quot;old&quot;,oldInfo);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    deep: true,//确认为深度监听</span><br><span class=\"line\">    immediate: true, //立即执行</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","comments":true,"categories":[{"name":"vue","slug":"vue","permalink":"http://beichenzero.github.io/categories/vue/"}],"tags":[{"name":"watch","slug":"watch","permalink":"http://beichenzero.github.io/tags/watch/"}]},{"title":"electron出使用","date":"2022-02-28T14:28:01.000Z","path":"2022/02/28/随笔/electron出使用/","content":"<h1 id=\"利用脚手架创建一个新的项目\"><a href=\"#利用脚手架创建一个新的项目\" class=\"headerlink\" title=\"利用脚手架创建一个新的项目\"></a>利用脚手架创建一个新的项目</h1><ol>\n<li>创建一个electron的基础模板<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm create electron-app my-app</span><br></pre></td></tr></table></figure></li>\n<li>进入项目目录下<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd my-app</span><br></pre></td></tr></table></figure></li>\n<li>运行项目<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm start</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"打包程序\"><a href=\"#打包程序\" class=\"headerlink\" title=\"打包程序\"></a>打包程序</h2><ol>\n<li>打包程序，变为可运行exe程序<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run make</span><br></pre></td></tr></table></figure></li>\n<li>打包程序，变为可运行exe程序<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dist</span><br></pre></td></tr></table></figure></li>\n</ol>\n","comments":true,"categories":[{"name":"随笔","slug":"随笔","permalink":"http://beichenzero.github.io/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"electron","slug":"electron","permalink":"http://beichenzero.github.io/tags/electron/"}]},{"title":"markdown常用语法","date":"2022-02-28T14:26:21.000Z","path":"2022/02/28/随笔/markdown常用语法/","content":"<p>本文主要记录markdown的基本语法，更多详细的语法请查看<a href=\"http://markdown.p2hp.com/basic-syntax/\">markdown官网</a></p>\n<h2 id=\"一、标题等级\"><a href=\"#一、标题等级\" class=\"headerlink\" title=\"一、标题等级\"></a>一、标题等级</h2><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a><strong>代码</strong></h3>  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 一级标题</span><br><span class=\"line\">## 二级标题</span><br><span class=\"line\">### 三级标题</span><br><span class=\"line\">#### 四级标题</span><br><span class=\"line\">##### 五级标题</span><br><span class=\"line\">###### 六级标题</span><br></pre></td></tr></table></figure>\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a><strong>效果</strong></h3><blockquote>\n<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a>四级标题</h4><h5 id=\"五级标题\"><a href=\"#五级标题\" class=\"headerlink\" title=\"五级标题\"></a>五级标题</h5><h6 id=\"六级标题\"><a href=\"#六级标题\" class=\"headerlink\" title=\"六级标题\"></a>六级标题</h6></blockquote>\n<p>\n<span id=\"more\"></span>\n\n</p><h2 id=\"二、字体\"><a href=\"#二、字体\" class=\"headerlink\" title=\"二、字体\"></a>二、字体</h2><h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a><strong>代码</strong></h3><ol>\n<li>加粗<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__加粗__</span><br><span class=\"line\">**加粗**</span><br></pre></td></tr></table></figure></li>\n<li>斜体<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_斜体_</span><br><span class=\"line\">*斜体*</span><br></pre></td></tr></table></figure></li>\n<li>斜体加粗<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">___斜体加粗___</span><br><span class=\"line\">***斜体加粗***</span><br></pre></td></tr></table></figure></li>\n<li>删除线<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~~删除线~~</span><br></pre></td></tr></table></figure>\n<h3 id=\"效果-1\"><a href=\"#效果-1\" class=\"headerlink\" title=\"效果\"></a><strong>效果</strong></h3><blockquote>\n<p><strong>加粗</strong><br><br><em>斜体</em><br><br><em><strong>斜体加粗</strong></em><br><br><del>删除线</del><br></p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"三、块引用\"><a href=\"#三、块引用\" class=\"headerlink\" title=\"三、块引用\"></a>三、块引用</h2><h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a><strong>代码</strong></h3><ul>\n<li><em>这里可以有好多级，具体看你自己怎么用</em><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 第一级</span><br><span class=\"line\">&gt;&gt; 第二级</span><br><span class=\"line\">&gt;&gt;&gt; 第三级</span><br><span class=\"line\">&gt;&gt;&gt;&gt; ....</span><br></pre></td></tr></table></figure>\n<h3 id=\"效果-2\"><a href=\"#效果-2\" class=\"headerlink\" title=\"效果\"></a><strong>效果</strong></h3><blockquote>\n<p>第一级</p>\n<blockquote>\n<p>第二级</p>\n<blockquote>\n<p>第三级</p>\n<blockquote>\n<p>….</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"四、列表\"><a href=\"#四、列表\" class=\"headerlink\" title=\"四、列表\"></a>四、列表</h2><h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a><strong>代码</strong></h3><ul>\n<li>有序列表<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 内容 </span><br><span class=\"line\">2. 内容</span><br><span class=\"line\">3. 内容</span><br></pre></td></tr></table></figure></li>\n<li>无序列表<br></li>\n</ul>\n<p><em>其中无序列表用+、-、*都可以</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ 内容 </span><br><span class=\"line\">- 内容</span><br><span class=\"line\">* 内容</span><br></pre></td></tr></table></figure>\n<h2 id=\"效果-3\"><a href=\"#效果-3\" class=\"headerlink\" title=\"效果\"></a><strong>效果</strong></h2><blockquote>\n<p>有序列表</p>\n<blockquote>\n<ol>\n<li>内容 </li>\n<li>内容</li>\n<li>内容</li>\n</ol>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>无序列表</p>\n<blockquote>\n<ul>\n<li>内容 </li>\n</ul>\n<ul>\n<li>内容</li>\n</ul>\n<ul>\n<li>内容</li>\n</ul>\n</blockquote>\n</blockquote>\n<h2 id=\"五、分割线\"><a href=\"#五、分割线\" class=\"headerlink\" title=\"五、分割线\"></a>五、分割线</h2><h3 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a><strong>代码</strong></h3><ul>\n<li>三个*或-都可以。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">***</span><br></pre></td></tr></table></figure>\n<h3 id=\"效果-4\"><a href=\"#效果-4\" class=\"headerlink\" title=\"效果\"></a><strong>效果</strong></h3></li>\n</ul>\n<hr>\n<hr>\n<h2 id=\"六、图片\"><a href=\"#六、图片\" class=\"headerlink\" title=\"六、图片\"></a>六、图片</h2><h3 id=\"代码-5\"><a href=\"#代码-5\" class=\"headerlink\" title=\"代码\"></a><strong>代码</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![图片alt](图片地址 &#x27;图片标题&#x27;)</span><br><span class=\"line\">&lt;img src=&#x27;https://haixia-1303842518.cos.ap-guangzhou.myqcloud.com/%E6%B5%B7%E9%9C%9E/head-photo/-4ad73ad5fcaad4be(1).jpg&#x27; width=&quot;200px&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">![beichenzero_photo](https://haixia-1303842518.cos.ap-guangzhou.myqcloud.com/%E6%B5%B7%E9%9C%9E/head-photo/-4ad73ad5fcaad4be(1).jpg &#x27;beichenzero&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">alt为替代文本</span><br><span class=\"line\">图片地址为路径或是图片的网络地址</span><br><span class=\"line\">图片标题就是图片的标题</span><br></pre></td></tr></table></figure>\n<h3 id=\"效果-5\"><a href=\"#效果-5\" class=\"headerlink\" title=\"效果\"></a><strong>效果</strong></h3><ul>\n<li>这里有两种插入图片的方式，第一种是直接插入HTML的语法，使用img标签，可以修改图片的尺寸以及各种属性。</li>\n<li>第二种是使用markdown自身的语法插入。<br><img src=\"https://haixia-1303842518.cos.ap-guangzhou.myqcloud.com/%E6%B5%B7%E9%9C%9E/head-photo/-4ad73ad5fcaad4be(1).jpg\" width=\"200px\"></li>\n</ul>\n<p><img src=\"https://haixia-1303842518.cos.ap-guangzhou.myqcloud.com/%E6%B5%B7%E9%9C%9E/head-photo/-4ad73ad5fcaad4be(1).jpg\" alt=\"beichenzero_photo\"></p>\n<h2 id=\"七、超链接\"><a href=\"#七、超链接\" class=\"headerlink\" title=\"七、超链接\"></a>七、超链接</h2><h3 id=\"代码-6\"><a href=\"#代码-6\" class=\"headerlink\" title=\"代码\"></a><strong>代码</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. &lt;a href=&quot;https://beichenzero.netlify.app/&quot; alt=&quot;&quot;&gt;地址一:北辰个人博客&lt;/a&gt;</span><br><span class=\"line\">2. [地址二:北辰个人博客](https://beichenzero.netlify.app/ &quot;beichenzero&quot;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"效果-6\"><a href=\"#效果-6\" class=\"headerlink\" title=\"效果\"></a><strong>效果</strong></h3><ol>\n<li><a href=\"https://beichenzero.netlify.app/\" alt>地址一:北辰个人博客</a><br></li>\n<li><a href=\"https://beichenzero.netlify.app/\" title=\"beichenzero\">地址二:北辰个人博客</a></li>\n</ol>\n<h2 id=\"八、表格\"><a href=\"#八、表格\" class=\"headerlink\" title=\"八、表格\"></a>八、表格</h2><h3 id=\"代码-7\"><a href=\"#代码-7\" class=\"headerlink\" title=\"代码\"></a><strong>代码</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">表头  |  表头  |  表头</span><br><span class=\"line\">:---: | :---: | :---:</span><br><span class=\"line\">内容  |  内容  |  内容</span><br><span class=\"line\">内容  |  内容  |  内容</span><br><span class=\"line\"></span><br><span class=\"line\">:---:表示居中</span><br><span class=\"line\">:---表示左对齐(默认左对齐)</span><br><span class=\"line\">---:表示右对齐</span><br></pre></td></tr></table></figure>\n<h3 id=\"效果-7\"><a href=\"#效果-7\" class=\"headerlink\" title=\"效果\"></a><strong>效果</strong></h3><table>\n<thead>\n<tr>\n<th align=\"center\">表头</th>\n<th align=\"center\">表头</th>\n<th align=\"center\">表头</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">内容</td>\n<td align=\"center\">内容</td>\n<td align=\"center\">内容</td>\n</tr>\n<tr>\n<td align=\"center\">内容</td>\n<td align=\"center\">内容</td>\n<td align=\"center\">内容</td>\n</tr>\n</tbody></table>\n<h2 id=\"九、代码\"><a href=\"#九、代码\" class=\"headerlink\" title=\"九、代码\"></a>九、代码</h2><h3 id=\"代码-8\"><a href=\"#代码-8\" class=\"headerlink\" title=\"代码\"></a><strong>代码</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`代码内容`</span><br><span class=\"line\">`&lt;a href=&#x27;https://beichenzero.github.io&#x27;&gt;北辰个人博客&lt;/a&gt;`</span><br><span class=\"line\">`...`</span><br></pre></td></tr></table></figure>\n<h3 id=\"效果-8\"><a href=\"#效果-8\" class=\"headerlink\" title=\"效果\"></a><strong>效果</strong></h3><p><code>&lt;a href=&#39;https://beichenzero.github.io&#39;&gt;北辰个人博客&lt;/a&gt;</code><br><code>&lt;img src=&quot;图片地址&quot; alt=&quot;&quot;&gt;</code></p>\n<h2 id=\"十、任务列表\"><a href=\"#十、任务列表\" class=\"headerlink\" title=\"十、任务列表\"></a>十、任务列表</h2><ul>\n<li><input checked disabled type=\"checkbox\"> 第一项任务</li>\n<li><input disabled type=\"checkbox\"> 第二项任务</li>\n<li><input disabled type=\"checkbox\"> 第三项任务</li>\n</ul>\n","comments":true,"categories":[{"name":"学习","slug":"学习","permalink":"http://beichenzero.github.io/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://beichenzero.github.io/tags/markdown/"}]},{"title":"v-model的基本使用","date":"2022-02-28T14:22:23.000Z","path":"2022/02/28/vue-easy/v-model的基本使用/","content":"<h3 id=\"v-model的基本使用\"><a href=\"#v-model的基本使用\" class=\"headerlink\" title=\"v-model的基本使用\"></a>v-model的基本使用</h3><ul>\n<li>v-model三种常见的修饰符默认是string</li>\n<li>number的修饰符主要是将string转化成number类型</li>\n<li>trim修饰符主要是去除内容前后的空格<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;input type=&quot;text&quot; v-model.trim=&quot;message&quot;&gt;</span><br><span class=\"line\">  // &lt;input type=&quot;text&quot; v-model.number=&quot;message&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">  &lt;button @click=&quot;showType()&quot;&gt;查看类型&lt;/button&gt;</span><br><span class=\"line\">  &lt;button @click=&quot;showCon()&quot;&gt;查看内容&lt;/button&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  showType() &#123;</span><br><span class=\"line\">    console.log(this.message, typeof this.message);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  showCon() &#123;</span><br><span class=\"line\">    console.log(this.message);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<strong>仅截取部分核心代码</strong><br>EX:<br>217498daowh   值为217498      类型为number<br>njdkhaw3431   值为njdkhaw3431 类型为string</li>\n</ul>\n","comments":true,"categories":[{"name":"vue","slug":"vue","permalink":"http://beichenzero.github.io/categories/vue/"}],"tags":[{"name":"model","slug":"model","permalink":"http://beichenzero.github.io/tags/model/"}]},{"title":"vite的基本使用","date":"2022-02-28T14:21:27.000Z","path":"2022/02/28/随笔/vite的基本使用/","content":"<h2 id=\"vite安装\"><a href=\"#vite安装\" class=\"headerlink\" title=\"vite安装\"></a>vite安装</h2><blockquote>\n<p><strong>1.安装</strong></p>\n</blockquote>\n<ul>\n<li>全局安装<br><code>npm install vite -g</code></li>\n<li>局部安装<br><code>npm install vite -D</code><br>npx vite</li>\n</ul>\n<h2 id=\"vite对css的处理\"><a href=\"#vite对css的处理\" class=\"headerlink\" title=\"vite对css的处理\"></a>vite对css的处理</h2><p><strong>默认对css的加载</strong></p>\n<ul>\n<li>1.安装less<br><code>npm install less -D</code>  </li>\n<li>2.安装postcss<br><code>npm install postcss -D</code><br>还需要安装<br><code>npm install postcss-preset-env -D</code>  </li>\n</ul>\n<span id=\"more\"></span>\n<p>配置<em>postcss.config.js</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.export = &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    require(&quot;postcss-preset-env&quot;),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>vite对ts文件也是支持的</strong></p>\n<p><strong>vite对vue的支持</strong></p>\n<ul>\n<li>安装:<br><code>npm install vue@next -D</code></li>\n</ul>\n<p><em><strong>vite对vue提供第一优先级支持</strong></em></p>\n<ul>\n<li>1.Vue3单文件组件支持：<br><code>@vitejs/plugin-vue</code></li>\n<li>2.Vue3 JSX支持：<br><code>@vitejs/plugin-vue-jsx</code></li>\n<li>3.Vue2支持：<br><code>underfin/vite-plugin-vue2</code></li>\n</ul>\n<p>配置<em>vite.config.js</em>  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const vue = require(&#x27;@vitejs/plugin-vue&#x27;)</span><br><span class=\"line\">//导出的是一个函数</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    vue()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>报错后继续安装：<br><code>npm install @vue/compiler-sfc -D</code>  </p>\n<blockquote>\n<p>打包  </p>\n</blockquote>\n<p><code>npx vite build</code><br>在package.json中配置script  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;serve&quot;: &quot;vite&quot;,</span><br><span class=\"line\">&quot;build&quot;: &quot;vite build&quot;,</span><br><span class=\"line\">&quot;preview&quot;: &quot;vite preview&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"vite的脚手架\"><a href=\"#vite的脚手架\" class=\"headerlink\" title=\"vite的脚手架\"></a>vite的脚手架</h2><p><em><strong>支持多种语言的框架</strong></em> </p>\n<ul>\n<li><p>安装：<br><code>npm install @vitejs/create-app -g/-D</code>  </p>\n</li>\n<li><p>创建项目：<br><code>create-app &quot;name&quot;</code>  </p>\n</li>\n<li><p>安装依赖：<br><code>npm install</code>  </p>\n</li>\n</ul>\n<h2 id=\"ESbuild解析\"><a href=\"#ESbuild解析\" class=\"headerlink\" title=\"ESbuild解析\"></a>ESbuild解析</h2><blockquote>\n<p>1.特点</p>\n</blockquote>\n<ul>\n<li>超快的构建速度<a style=\"color: red\">(极快)</a>，并且不需要缓存</li>\n<li>支持ES6和CommonJS的模块化</li>\n<li>支持ES6的Tree Shaking</li>\n<li>支持Go，JavaScript的API</li>\n<li>支持TypeScript,JSX等语法编译</li>\n<li>支持sourceMap</li>\n<li>支持代码压缩</li>\n<li>支持扩展其他插件</li>\n</ul>\n<blockquote>\n<p>2.本身使用Go语言编写的，可以直接转化为机器码，无需经过字节码(ESbuild这么快？)</p>\n</blockquote>\n<blockquote>\n<p>3.ESbuild可以充分利用CPU的多内核，尽可能让他们饱和运行</p>\n</blockquote>\n<blockquote>\n<p>4.ES6的所有代码都是从零去编写的，没有借用外部的包</p>\n</blockquote>\n","comments":true,"categories":[{"name":"vite","slug":"vite","permalink":"http://beichenzero.github.io/categories/vite/"}],"tags":[{"name":"vite","slug":"vite","permalink":"http://beichenzero.github.io/tags/vite/"}]},{"title":"nvm的安装-windows","date":"2022-02-28T14:20:33.000Z","path":"2022/02/28/随笔/nvm的安装-windows/","content":"<h2 id=\"下载nvm的安装包\"><a href=\"#下载nvm的安装包\" class=\"headerlink\" title=\"下载nvm的安装包\"></a>下载nvm的安装包</h2><p><strong>一定要下载1.1.7版本的nvm！</strong><br><strong>(目前最新是1.1.9版本,可以使用1.1.9,也比较稳定)</strong></p>\n<ul>\n<li>事先需要卸载原有的node.js<br>下载地址：<a href=\"https://github.com/coreybutler/nvm-windows/releases\">https://github.com/coreybutler/nvm-windows/releases</a></li>\n<li>下载后双击exe文件安装</li>\n<li>安装后在环境变量中会默认看到<br><img src=\"/images/photo_01.png\"></li>\n<li>用户变量和系统变量中都会有</li>\n</ul>\n<p>对了下载完找到nvm的安装目录，打开setting.txt文件，添加上下面两个配置(选做)：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm node_mirror https://npm.taobao.org/mirrors/node/</span><br><span class=\"line\">nvm npm_mirror https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span> \n<!-- 截断 -->\n<ul>\n<li><code>nvm -v</code> 检验是否成功<br><img src=\"/images/photo_02.png\"><!-- <img src=\"../images/photo_02.png\"> --></li>\n</ul>\n<h2 id=\"安装node\"><a href=\"#安装node\" class=\"headerlink\" title=\"安装node\"></a>安装node</h2><ol>\n<li>查看版本 <code>nvm list available</code> </li>\n<li>下载node(选择你需要的版本下载即可)  </li>\n</ol>\n<p><strong>下载最新版本<code>nvm list latest</code></strong></p>\n<blockquote>\n<p>拿<code>16.11.0</code>版本作为例子<code>nvm install 16.11.0</code></p>\n</blockquote>\n<ol>\n<li>紧接着上面的语句在终端输入：<code>nvm use 16.11.0</code></li>\n</ol>\n<p><strong>install完了node版本后，一定要use你所安装的版本，一定！一定！一定！</strong>  </p>\n<h2 id=\"nvm常用命令\"><a href=\"#nvm常用命令\" class=\"headerlink\" title=\"nvm常用命令\"></a>nvm常用命令</h2><table>\n<thead>\n<tr>\n<th>Tables</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>nvm list</td>\n<td align=\"center\">查看已经安装的版本</td>\n</tr>\n<tr>\n<td>nvm list installed</td>\n<td align=\"center\">查看已经安装的版本</td>\n</tr>\n<tr>\n<td>nvm list available</td>\n<td align=\"center\">查看网络可以安装的版本</td>\n</tr>\n<tr>\n<td>nvm arch</td>\n<td align=\"center\">查看当前系统的位数和当前nodejs的位数</td>\n</tr>\n<tr>\n<td>nvm install [arch]</td>\n<td align=\"center\">安装制定版本的node 并且可以指定平台 version 版本号 arch 平台</td>\n</tr>\n<tr>\n<td>nvm on</td>\n<td align=\"center\">打开nodejs版本控制</td>\n</tr>\n<tr>\n<td>nvm off</td>\n<td align=\"center\">关闭nodejs版本控制</td>\n</tr>\n<tr>\n<td>nvm uninstall</td>\n<td align=\"center\">卸载制定的版本</td>\n</tr>\n<tr>\n<td>nvm use [version] [arch]</td>\n<td align=\"center\">切换制定的node版本和位数</td>\n</tr>\n<tr>\n<td>nvm version</td>\n<td align=\"center\">查看当前的版本</td>\n</tr>\n</tbody></table>\n<p><em>其中 [arch]表示系统位数，直接用64/32代替就好了</em></p>\n","comments":true,"categories":[{"name":"学习","slug":"学习","permalink":"http://beichenzero.github.io/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"nvm","slug":"nvm","permalink":"http://beichenzero.github.io/tags/nvm/"}]},{"title":"vue-组件通信","date":"2022-02-28T14:19:28.000Z","path":"2022/02/28/vue-learn/vue-组件通信/","content":"<h2 id=\"父子组件之间通信的方式\"><a href=\"#父子组件之间通信的方式\" class=\"headerlink\" title=\"父子组件之间通信的方式\"></a>父子组件之间通信的方式</h2><blockquote>\n<p>1.<strong>父组件(Patent)传递给子组件(Child)</strong>  </p>\n</blockquote>\n<p>通过<span style=\"color: red\"><strong>props</strong></span>属性传递  </p>\n<blockquote>\n<p>2.<strong>子组件传递给父组件</strong>  </p>\n</blockquote>\n<p>通过<span style=\"color: red\"><strong>$emit Events</strong></span></p>\n<h2 id=\"传值时props可以是数组也可以是对象\"><a href=\"#传值时props可以是数组也可以是对象\" class=\"headerlink\" title=\"传值时props可以是数组也可以是对象\"></a>传值时props可以是数组也可以是对象</h2><blockquote>\n<p><strong>1.传值对象————数组</strong>  </p>\n</blockquote>\n<p><em><strong>一般不用这种方式</strong></em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default &#123;</span><br><span class=\"line\">  props: [</span><br><span class=\"line\">    &#x27;title&#x27;,</span><br><span class=\"line\">    &#x27;content&#x27;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n<blockquote>\n<p><strong>2.传值对象————对象</strong>  </p>\n</blockquote>\n<p><em><strong>这种方式用的人比较多，其中<code>require</code>和<code>default</code>一般只用写一个就可以了</strong></em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props: &#123;</span><br><span class=\"line\">      title: String,</span><br><span class=\"line\">      content: &#123;</span><br><span class=\"line\">        // 指定类型</span><br><span class=\"line\">        type: Number,</span><br><span class=\"line\">        // 是否为必传值</span><br><span class=\"line\">        require: true,</span><br><span class=\"line\">        // 默认值</span><br><span class=\"line\">        default: 123,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"细节一之type的类型可以是那些？\"><a href=\"#细节一之type的类型可以是那些？\" class=\"headerlink\" title=\"细节一之type的类型可以是那些？\"></a>细节一之type的类型可以是那些？</h2><blockquote>\n<p>type的类型值:</p>\n<blockquote>\n<ul>\n<li>String</li>\n<li>Number</li>\n<li>Boolean</li>\n<li>Array</li>\n<li>Object</li>\n<li>Date</li>\n<li>Function</li>\n<li>Symbol</li>\n</ul>\n</blockquote>\n</blockquote>\n<h2 id=\"细节二之对象类型的其他写法\"><a href=\"#细节二之对象类型的其他写法\" class=\"headerlink\" title=\"细节二之对象类型的其他写法\"></a>细节二之对象类型的其他写法</h2><blockquote>\n<p>1.带有默认值的对象</p>\n</blockquote>\n<ul>\n<li><strong><span style=\"color: green\">正确写法</span></strong><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props: &#123;</span><br><span class=\"line\">  propA: &#123;</span><br><span class=\"line\">    type: Object,</span><br><span class=\"line\">    // 对象或数组默认值必须从一个工厂函数获取</span><br><span class=\"line\">    default() &#123;</span><br><span class=\"line\">      return &#123;name: &quot;beichen&quot;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></li>\n<li><strong><span style=\"color: red\">错误写法</span></strong><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props: &#123;</span><br><span class=\"line\">  propA: &#123;</span><br><span class=\"line\">    type: Object,</span><br><span class=\"line\">    default: &#123;name: &quot;beichen&quot;&#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></li>\n<li><strong>二者写法的区别</strong><br>当默认值是一个<code>defaule()</code>函数时，在多次调用<code>propA</code>时，default函数会返回三个对象，这时修改单个对象中的<code>name</code>值时不会影响另外两个对象的值<br>而当默认值时一个对象时，在多次调用<code>propA</code>时，他们的值都指向同一个地址的<code>name</code>,当修改其中一个对象的name值时，另外两个对象的name值也会跟这修改，会造成数据紊乱。</li>\n</ul>\n<blockquote>\n<p>2.自定义验证函数</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props: &#123;</span><br><span class=\"line\">  propB: &#123;</span><br><span class=\"line\">    validator(value) &#123;</span><br><span class=\"line\">      // 这个值必须是匹配下列字符串中的一个</span><br><span class=\"line\">      return [&quot;success&quot;, &quot;failed&quot;, &quot;beichenzero&quot;].includes(value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>这里表示当传过来的值进行一个判断，查看这个值是否是我们定义数组中的其中一个值，如果是则返回这个值，否则返回false就会报一个警告，表示你传的值不是我们期望的值。</p>\n<h2 id=\"细节三之Props的大小写命名的问题\"><a href=\"#细节三之Props的大小写命名的问题\" class=\"headerlink\" title=\"细节三之Props的大小写命名的问题\"></a>细节三之Props的大小写命名的问题</h2><p><span style=\"color: red\"><strong>Html中的attribute大小写命名时不敏感的</strong></span>，所以浏览器会把所有大写字符解释为小写字符<br>这就以为着你在使用DOM中的模板时，<code>camelCase(驼峰命名法)</code>的prop名需要使用其等价的<code>kekab-case(短横线分隔命名)</code><br><em><strong>但是在vue文件中时不需要的，因为在vue中的模板会被vue-loader解析，而vue-loader会帮我们处理好大小写命名的问题。</strong></em></p>\n","comments":true,"categories":[{"name":"vue","slug":"vue","permalink":"http://beichenzero.github.io/categories/vue/"}],"tags":[{"name":"vue-components","slug":"vue-components","permalink":"http://beichenzero.github.io/tags/vue-components/"}]},{"title":"vue初期学习笔记","date":"2022-02-28T14:18:27.000Z","path":"2022/02/28/vue-easy/vue初期学习笔记/","content":"<h3 id=\"编程范式\"><a href=\"#编程范式\" class=\"headerlink\" title=\"编程范式\"></a>编程范式</h3><p><strong>①命令式编程 (how to do)</strong><br>  EX:js/jquery<br><strong>②声明式编程 what to do  框架(机器)帮助完成</strong><br>    EX:vue/react/angular</p>\n<h3 id=\"MVC——modle-view-controller-MVC\"><a href=\"#MVC——modle-view-controller-MVC\" class=\"headerlink\" title=\"MVC——modle view controller(MVC)\"></a>MVC——modle view controller(MVC)</h3><p>modle: 操作的数据<br>view: body里面的内容<br>controller: script里面的内容</p>\n<h3 id=\"MVVM——modle-view-view-modle-MVVC\"><a href=\"#MVVM——modle-view-view-modle-MVVC\" class=\"headerlink\" title=\"MVVM——modle view view_modle(MVVC)\"></a>MVVM——modle view view_modle(MVVC)</h3><p>view: DOM           template<br>view_modle: VUE<br>modle: plain js object    data、methods…</p>\n<span id=\"more\"></span>\n\n<h3 id=\"条件-列表渲染-diff算法\"><a href=\"#条件-列表渲染-diff算法\" class=\"headerlink\" title=\"条件-列表渲染-diff算法\"></a>条件-列表渲染-diff算法</h3><p>diff算法就是将旧的VNodes和新的Vnodes进行对比的过程，然后观察需要变换那些东西。</p>\n<h3 id=\"在用v-for便利数组时，如果是要更新-添加-删除-数组的内容\"><a href=\"#在用v-for便利数组时，如果是要更新-添加-删除-数组的内容\" class=\"headerlink\" title=\"在用v-for便利数组时，如果是要更新(添加/删除)数组的内容\"></a>在用v-for便利数组时，如果是要更新(添加/删除)数组的内容</h3><p><strong>v-for进行渲染的时候，我们通常会给元素或者组件绑定一个key属性</strong><br>没有加key的时候，vue的源码会执行patchUnkeyedChildren<br>三步：123<br>在加了key的时候，vue源码会执行patchKeyedChildren<br>五步：12345</p>\n<h3 id=\"计算属性-computed-和方法-methods-的区别\"><a href=\"#计算属性-computed-和方法-methods-的区别\" class=\"headerlink\" title=\"计算属性(computed)和方法(methods)的区别\"></a>计算属性(computed)和方法(methods)的区别</h3><p><strong>计算属性(computed)和方法(methods)的差别不大，但是计算属性是有缓存的。</strong><br>分别console打印三次，computed只会出现一次，methods会打印三次。<br>data中的数据是响应式的，当修改了data中打印在界面上的数据时，会重新渲染，也就是说如上的methods中的打印在再次执行多次。而computed还是只会执行一次.</p>\n<p><strong>computed的get和set方法</strong></p>\n<ul>\n<li>普通写法:<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fullName: &#123;</span><br><span class=\"line\">  get: function()&#123;</span><br><span class=\"line\">    return this.firstName+&quot; &quot;+this.lastName;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  set: function(newValue)&#123;</span><br><span class=\"line\">    console.log(newValue);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>语法糖:<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fullName: function()&#123;</span><br><span class=\"line\">  return this.firstName+&quot; &quot;+this.lastName;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure></li>\n</ul>\n","comments":true,"categories":[{"name":"vue","slug":"vue","permalink":"http://beichenzero.github.io/categories/vue/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://beichenzero.github.io/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"vue源码的打包","date":"2022-02-28T14:17:15.000Z","path":"2022/02/28/vue-easy/vue源码的打包/","content":"<h3 id=\"vue源码打包\"><a href=\"#vue源码打包\" class=\"headerlink\" title=\"vue源码打包\"></a>vue源码打包</h3><ul>\n<li>1.导入<br><code>import &#123; createApp &#125; from &quot;vue&quot;</code></li>\n<li>2.安装<br><code>npm install vue@next</code><br>ERROR in ./src/vue/App/vue 1:0 Module parse failed : Unexpected token错误时，在安装：<br><code>npm install vue-loader -D</code><br>并在webpack.config.js中配置(配置方法同其他的loader一样)<br>继续安装：<br><code>npm install @vue/compiler-sfc -D</code><br>在webpack.config.js中继续配置：<br>引入：<br><code>const &#123; VueLoaderPlugin &#125; = require(&quot;vue-loader/dist/index&quot;)</code><br>插件配置：<br><code>new VueLoaderPlugin()</code></li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"vue打包后不同的版本解析\"><a href=\"#vue打包后不同的版本解析\" class=\"headerlink\" title=\"vue打包后不同的版本解析\"></a>vue打包后不同的版本解析</h3><ul>\n<li>1.vue.global.js  <ul>\n<li>通过浏览器的<code>&lt;script src=&quot;...&quot;&gt;</code>直接使用</li>\n<li>通过CDN引入和下载的Vue版本会暴露一个全局的Vue来使用</li>\n</ul>\n</li>\n<li>2.vue.esm-browser.js<ul>\n<li>通过原生ES模块导入使用(浏览器中通过<code>&lt;script type=&quot;module&quot;&gt;</code>来使用)</li>\n</ul>\n</li>\n<li>3.vue.esm-bundle.js<ul>\n<li>用于webpack，rollup和parcel等构建工具</li>\n<li>构建工具中默认的是vue,runtime.esm-bundle.js</li>\n<li>如果我们需要解析模板template，那么需要手动指定vue.esm-bundle.js</li>\n</ul>\n</li>\n<li>4.vue.cjs.js<ul>\n<li>服务器端渲染使用</li>\n<li>通过requires()和node.js中使用</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"webpack-deb-server\"><a href=\"#webpack-deb-server\" class=\"headerlink\" title=\"webpack-deb-server\"></a>webpack-deb-server</h3><ul>\n<li>安装<br><code>npm install webpack-dev-server -D</code>  </li>\n<li>配置<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">  contentBase: &quot;./build&quot;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n在package.json的script中<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;build&quot;: &quot;webpack --watch&quot;,</span><br><span class=\"line\">    &quot;serve&quot;: &quot;webpack serve&quot;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n使用<code>npm run serve</code>执行，就可以开启一个本地服务。  </li>\n</ul>\n<p><em><strong>webpack-dev-server在编译之后<span color=\"red\">不会写入到任何文件</span>,而是将bundle文件保留在内存中</strong></em></p>\n<h3 id=\"HMR-模块热替换\"><a href=\"#HMR-模块热替换\" class=\"headerlink\" title=\"HMR(模块热替换)\"></a>HMR(模块热替换)</h3><p>Hot Module Replacement——模块热替换<br>模块热替换是指在 应用程序运行中，替换，添加，删除模块，而无需重新刷新整个界面</p>\n<ul>\n<li><p><strong>如何使用HMR？</strong><br>默认情况下，webpack-dev-server已经支持HMR，直接开启就是了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target: &quot;web&quot;,//hot的伴随设置 </span><br><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">  hot: true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>指定使用HMR的模块</strong><br>if(module.hot) {<br>module.hot.accept(“./util.js”, () =&gt; {<br>  console.log(“util更新了);<br>})<br>}</p>\n</li>\n<li><p>1.port设置监听端口，默认情况下时8080</p>\n</li>\n<li><p>2.open是否打开浏览器，默认时false</p>\n</li>\n<li><p>3.compress是否为静态文件开启gzip compression,默认时false</p>\n</li>\n<li><p>4.<strong>Proxy</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">  contentBase: &quot;./public&quot;,</span><br><span class=\"line\">  // 模块热替换HMR</span><br><span class=\"line\">  hot: true,</span><br><span class=\"line\">  host: &quot;0.0.0.0&quot;,</span><br><span class=\"line\">  port: 8888,</span><br><span class=\"line\">  open: true, // 在package.json中配置--open</span><br><span class=\"line\">  compress: true, //压缩</span><br><span class=\"line\">  Proxy: &#123;</span><br><span class=\"line\">    // 开启本地代理</span><br><span class=\"line\">    // 本地解决跨域的问题</span><br><span class=\"line\">    &quot;/api&quot;: &#123;</span><br><span class=\"line\">      target: &quot;url&quot;,</span><br><span class=\"line\">      pathRewrite: &#123;</span><br><span class=\"line\">        &quot;^/api&quot;: &quot;&quot;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      secure: false,// 不懂的文档去找，或者ppt</span><br><span class=\"line\">      changeOrigin: true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"extensions和alias配置\"><a href=\"#extensions和alias配置\" class=\"headerlink\" title=\"extensions和alias配置\"></a>extensions和alias配置</h3><ul>\n<li><strong>extensions</strong>是解析到文件时自动添加扩展名<br>默认值是[‘.wasm’, ‘.mjs’, ‘.js’, ‘.json’]  </li>\n<li><strong>alias</strong>是给某些常见的路径起一个别名<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">  extensions: [&#x27;.jsx&#x27;, &#x27;.ts&#x27;, &#x27;.vue&#x27;],</span><br><span class=\"line\">  alias: &#123;</span><br><span class=\"line\">    &quot;js&quot;: path.resolve(__dirname, &quot;./src/js&quot;),</span><br><span class=\"line\">    &quot;@&quot;: path.resolve(__dirname, &quot;./sr&quot;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"开发-生产环境的分离\"><a href=\"#开发-生产环境的分离\" class=\"headerlink\" title=\"开发/生产环境的分离\"></a>开发/生产环境的分离</h2>建立三个文件放在主文件夹下的config文件夹下，<blockquote>\n<p>开发<br>common<br>生产</p>\n</blockquote>\n</li>\n</ul>\n<p>合并文件<br><code>npm install webpack-merge -D</code><br>在生产/开发的配置js文件中导入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123; merge &#125; = require(&quot;webpack-merge&quot;);</span><br><span class=\"line\">const commenConfig = require(&#x27;公共配置js文件的地址&#x27;)</span><br></pre></td></tr></table></figure>\n<p>合并语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = merge(CommonConfig, &#123;</span><br><span class=\"line\">  //生产/开发环境的部分配置。</span><br><span class=\"line\">  xxx: &quot;&quot;,</span><br><span class=\"line\">  xxx: &quot;&quot;,</span><br><span class=\"line\">  xxx: &quot;&quot;,</span><br><span class=\"line\">  xxx: &quot;&quot;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><em><strong>同时在package.json的脚本里面也需要配置.</strong></em><br>添加<code>--config url</code></p>\n","comments":true,"categories":[{"name":"vue","slug":"vue","permalink":"http://beichenzero.github.io/categories/vue/"}],"tags":[]},{"title":"留言板","date":"2021-05-09T14:25:54.000Z","path":"2021/05/09/留言板/","content":"<p>登录可进行留言……</p>\n","comments":true,"categories":[],"tags":[]}]