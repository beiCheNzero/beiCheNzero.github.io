[{"title":"compositionAPI补充知识","date":"2022-05-09T08:54:23.000Z","path":"2022/05/09/vue-learn/compositionapi补充/","content":"<h2 id=\"Reactive判断的API\"><a href=\"#Reactive判断的API\" class=\"headerlink\" title=\"Reactive判断的API\"></a>Reactive判断的API</h2><h4 id=\"1-isProxy\"><a href=\"#1-isProxy\" class=\"headerlink\" title=\"1.isProxy\"></a>1.isProxy</h4><ul>\n<li>检查对象是否是由 reactive 或 readonly创建的 proxy。<h4 id=\"2-isReactive\"><a href=\"#2-isReactive\" class=\"headerlink\" title=\"2.isReactive\"></a>2.isReactive</h4></li>\n<li>检查对象是否是由 reactive创建的响应式代理： </li>\n<li>如果该代理是 readonly 建的，但包裹了由 reactive 创建的另一个代理，它也会返回 true.<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const info = readonly(reactive(&#123;name: &quot;beichen&quot;&#125;));</span><br></pre></td></tr></table></figure>\n这个时候就是返回<code>true</code></li>\n</ul>\n<h4 id=\"3-isReadonly\"><a href=\"#3-isReadonly\" class=\"headerlink\" title=\"3.isReadonly\"></a>3.isReadonly</h4><ul>\n<li>检查对象是否是由 readonly 创建的只读代理。</li>\n</ul>\n<h4 id=\"4-toRaw\"><a href=\"#4-toRaw\" class=\"headerlink\" title=\"4.toRaw\"></a>4.toRaw</h4><ul>\n<li>返回 reactive 或 readonly 代理的原始对象（不建议保留对原始对象的持久引用。请谨慎使用）。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 第一种(常见用法)</span><br><span class=\"line\">const info = &#123;name: &quot;beichen&quot;&#125;;</span><br><span class=\"line\">const readonlyInfo = readonly(info);</span><br><span class=\"line\">// 这里的info就是原始对象</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"5-shallowReactive\"><a href=\"#5-shallowReactive\" class=\"headerlink\" title=\"5.shallowReactive\"></a>5.shallowReactive</h4><ul>\n<li>创建一个响应式代理，它跟踪其自身 property 的响应性，但不执行嵌套对象的深层响应式转换 (深层还是原生对象)。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const info = reactive(&#123;name: &quot;beichen&quot;, friends: &#123;name: &quot;beichenzero&#125;&#125;)</span><br></pre></td></tr></table></figure></li>\n<li><strong>自身原本是对info.name以及info.friends.name都包含响应式的转换</strong><br>当如我们执行：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const info = shallowReactive(&#123;name: &quot;beichen&quot;, friends: &#123;name: &quot;beichenzero&#125;&#125;)</span><br></pre></td></tr></table></figure></li>\n<li><strong>此时的info里面只有info.name是响应式改变的，原因是shallowReactive只做了一个浅层代理</strong></li>\n</ul>\n<h4 id=\"5-shallowReadonly\"><a href=\"#5-shallowReadonly\" class=\"headerlink\" title=\"5.shallowReadonly\"></a>5.shallowReadonly</h4><ul>\n<li>创建一个 proxy，使其自身的 property 为只读，但不执行嵌套对象的深度只读转换（深层还是可读、可写的）。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const info = readonly(&#123;name: &quot;beichen&quot;, friends: &#123;name: &quot;beichenzero&#125;&#125;)</span><br></pre></td></tr></table></figure></li>\n<li><strong>自身原本是对info.name以及info.friends.name都是不可改写的，都会报一个警告</strong><br>当如我们执行：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const info = shallowReadonly(&#123;name: &quot;beichen&quot;, friends: &#123;name: &quot;beichenzero&#125;&#125;)</span><br></pre></td></tr></table></figure></li>\n<li><strong>此时的info里面只有info.name是只读的，原因是shallowReadonly只做了一个浅层代理</strong></li>\n</ul>\n","comments":true,"categories":[{"name":"vue","slug":"vue","permalink":"http://beichenzero.github.io/categories/vue/"}],"tags":[{"name":"composition","slug":"composition","permalink":"http://beichenzero.github.io/tags/composition/"}]},{"title":"CompositionAPI","date":"2022-05-08T07:17:17.000Z","path":"2022/05/08/vue-learn/composition_api/","content":"<h2 id=\"optionsAPi的弊端\"><a href=\"#optionsAPi的弊端\" class=\"headerlink\" title=\"optionsAPi的弊端\"></a>optionsAPi的弊端</h2><ul>\n<li>在vue2中我们编写组件的方式是optionsAPI<br>例如：data定义的数据、methods定义的方法、computed中定义的计算属性、watch中监听属性的改变，还包括生命周期钩子</li>\n</ul>\n<h4 id=\"弊端\"><a href=\"#弊端\" class=\"headerlink\" title=\"弊端\"></a>弊端</h4><p>在我们实现某些功能的时候，例如写一个计数器<br>往往我们需要定义methods，其中定义一个+1/-1的函数、需要定义data中的counter数据、监听counter的改变。<br>当我们的代码逻辑变得很庞大的时候，逻辑就会变得不清晰，且代码量会变大很大，定义的方法和数据不连贯，使得代码的阅读和理解会变得很困难。</p>\n<h2 id=\"CompositionAPI\"><a href=\"#CompositionAPI\" class=\"headerlink\" title=\"CompositionAPI\"></a>CompositionAPI</h2><p>我们要使用Composition API时我们需要在vue组件中使用setup函数。<br>setup函数就是用来替代之前所编写的大部分选项。包括methods、computed、data、watch、生命周期等</p>\n<h4 id=\"setup函数的参数\"><a href=\"#setup函数的参数\" class=\"headerlink\" title=\"setup函数的参数\"></a>setup函数的参数</h4><p>1.props<br>props非常好理解，它其实就是父组件传递过来的属性会被放到props对象中，我们在setup中如果需要使用，那么就可以直接通过props参数获取。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;home message=&quot;父组件中的message&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<p>子组件中接收父组件传过来的messsage并指定类型和是否必须传过来。否则会报一个<strong>warning</strong>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props: &#123;</span><br><span class=\"line\">      message: &#123;</span><br><span class=\"line\">        type: String,</span><br><span class=\"line\">        required: true,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n<p>2.context<br>context也被称之为<strong>setupcontext</strong>,他包含三个属性：</p>\n<ul>\n<li>attrs<br>所有的非prop的attribute</li>\n<li>solts<br>父组件传递过来的插槽</li>\n<li>emit<br>当我们组件内部需要发出事件时会用到emit（因为我们不能访问this，所以不可以通过 this.$emit发出事件）</li>\n</ul>\n<span id=\"more\"></span>\n\n<h4 id=\"setup的返回值\"><a href=\"#setup的返回值\" class=\"headerlink\" title=\"setup的返回值\"></a>setup的返回值</h4><p>返回值是一个对象</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let counter = 100;</span><br><span class=\"line\">      const increment = () =&gt; &#123;</span><br><span class=\"line\">        console.log(&quot;+1&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        title: &quot;hello&quot;,</span><br><span class=\"line\">        counter,</span><br><span class=\"line\">        increment</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<p><em><strong>setup中不可以使用this，是因为在创建setup是压根就没有绑定this</strong></em></p>\n<h3 id=\"reactiveAPI\"><a href=\"#reactiveAPI\" class=\"headerlink\" title=\"reactiveAPI\"></a>reactiveAPI</h3><ul>\n<li>引入reactive：<br><code>import &#123; reactive &#125; from &quot;vue&quot;;</code></li>\n<li>reactive的使用<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reactive的使用</span><br><span class=\"line\">const state = reactive(&#123;</span><br><span class=\"line\">        counter: 100,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      const increment = () =&gt; &#123;</span><br><span class=\"line\">        state.counter++;</span><br><span class=\"line\">        console.log(state.counter);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        state,</span><br><span class=\"line\">        increment,</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n将counter定义在reactive中，这样会使counter变成响应式。使得我们在increment中修改counter时，我们在界面中所展示的counter的值也会跟着改变</li>\n</ul>\n<p><em><strong>reactive API对传入的类型是有限制的，要求我们传入的是一个<span style=\"color: red\">对象</span>或者<span style=\"color: red\">数组</span>。否则会报一个警告。</strong></em></p>\n<h3 id=\"refAPI\"><a href=\"#refAPI\" class=\"headerlink\" title=\"refAPI\"></a>refAPI</h3><ul>\n<li>refAPI的引入<br><code>import &#123; ref &#125; from &quot;vue&quot;;</code></li>\n</ul>\n<p>ref APT会返回一个可变的响应式对象，该对象作为一个响应式的引用维护着他内部的值。他内部的值是在<span style=\"color: red\">ref的value</span>中被维护的。</p>\n<h4 id=\"ref的自动解包\"><a href=\"#ref的自动解包\" class=\"headerlink\" title=\"ref的自动解包\"></a>ref的自动解包</h4><p>1.当我们在template中使用ref对象的时候，他会自动进行包，不需要我们在ref对象后面添加.value<br>2.此时这里的counter == counter.value<br><strong>这里的解包是浅层解包</strong></p>\n<ul>\n<li>如果外层嵌套的是一个reactive的对象时，可以自动解包</li>\n<li>如果外层对象是一个普通的对象的时候，是不能自动解包的<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* couter变成了一个ref的可响应式的引用(对象) */</span><br><span class=\"line\">//此时的counter可以说是一个对象</span><br><span class=\"line\">let counter = ref(100);</span><br><span class=\"line\"></span><br><span class=\"line\">//在编写逻辑代码的时候我们要拿到counter(对象)的值的时候是需要加.value的</span><br><span class=\"line\">//在逻辑代码中或者说在setup这个函数中是没有进行自动解包的过程</span><br><span class=\"line\">const increment = () =&gt; &#123;</span><br><span class=\"line\">  counter.value++;</span><br><span class=\"line\">  console.log(counter.value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">return &#123;</span><br><span class=\"line\">  counter,</span><br><span class=\"line\">  increment,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"readonly-只读-不可改写\"><a href=\"#readonly-只读-不可改写\" class=\"headerlink\" title=\"readonly(只读/不可改写)\"></a>readonly(只读/不可改写)</h3><p>在开发中常见的readonly方法会传入三个类型的参数：<br>类型一：普通对象；<br>类型二：reactive返回的对象；<br>类型三：ref的对象；</p>\n<p><strong>readonly的使用</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1.普通对象</span><br><span class=\"line\">const info1 = &#123;name: &quot;北辰&quot;&#125;;</span><br><span class=\"line\">const readonlyInfo1 = readonly(info1);</span><br><span class=\"line\"></span><br><span class=\"line\">// 2.响应式的对象reactive</span><br><span class=\"line\">const info2 = reactive(&#123;</span><br><span class=\"line\">  name: &quot;北辰&quot;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">const readonlyInfo2 = readonly(info2);</span><br><span class=\"line\"></span><br><span class=\"line\">// 3.响应式的对象ref</span><br><span class=\"line\">const info3 = ref(&quot;北辰&quot;);</span><br><span class=\"line\">const readonlyInfo3 = readonly(info3);</span><br><span class=\"line\"></span><br><span class=\"line\">const update = () =&gt; &#123;</span><br><span class=\"line\">  // 这三种方式是可以修改的</span><br><span class=\"line\">  info2.name = &quot;beichenzero&quot;;</span><br><span class=\"line\">  info3.value = &quot;beichenzero&quot;;</span><br><span class=\"line\">  info1.name = &quot;beichenzero&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 以下的三种方式是不可修改的，浏览器会报一个警告</span><br><span class=\"line\">  readonlyInfo1.name = &quot;beichenzero&quot;;</span><br><span class=\"line\">  readonlyInfo2.name = &quot;beichenzero&quot;;</span><br><span class=\"line\">  readonlyInfo3.value = &quot;beichenzero&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">return &#123;</span><br><span class=\"line\">  update</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","comments":true,"categories":[{"name":"vue","slug":"vue","permalink":"http://beichenzero.github.io/categories/vue/"}],"tags":[{"name":"Composition API","slug":"Composition-API","permalink":"http://beichenzero.github.io/tags/Composition-API/"}]},{"title":"mixin和extends","date":"2022-05-08T07:15:54.000Z","path":"2022/05/08/vue-learn/mixin和extends/","content":"<h2 id=\"mixin\"><a href=\"#mixin\" class=\"headerlink\" title=\"mixin\"></a>mixin</h2><h5 id=\"1-Mixin提供了一种非常灵活的方式，来分发Vue组件中的可复用功能\"><a href=\"#1-Mixin提供了一种非常灵活的方式，来分发Vue组件中的可复用功能\" class=\"headerlink\" title=\"1.Mixin提供了一种非常灵活的方式，来分发Vue组件中的可复用功能\"></a>1.Mixin提供了一种非常灵活的方式，来分发Vue组件中的可复用功能</h5><h5 id=\"2-一个Mixin对象可以包含任何组件选项\"><a href=\"#2-一个Mixin对象可以包含任何组件选项\" class=\"headerlink\" title=\"2.一个Mixin对象可以包含任何组件选项\"></a>2.一个Mixin对象可以包含任何组件选项</h5><h5 id=\"3-当组件使用Mixin对象时，所有Mixin对象的选项将被-混合-进入该组件本身的选项中\"><a href=\"#3-当组件使用Mixin对象时，所有Mixin对象的选项将被-混合-进入该组件本身的选项中\" class=\"headerlink\" title=\"3.当组件使用Mixin对象时，所有Mixin对象的选项将被 混合 进入该组件本身的选项中\"></a>3.当组件使用Mixin对象时，所有Mixin对象的选项将被 混合 进入该组件本身的选项中</h5><h3 id=\"mixin的基本使用\"><a href=\"#mixin的基本使用\" class=\"headerlink\" title=\"mixin的基本使用\"></a>mixin的基本使用</h3><p>ex:写入公共内容到demoMixin.js文件中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const demoMixin = &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      message: &quot;hello demoMixin&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    foo() &#123;</span><br><span class=\"line\">      console.log(&quot;hello Mixin foo&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created() &#123;</span><br><span class=\"line\">    console.log(&quot;Mixin created&quot;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在需要调用的vue文件下引入即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; demoMixin &#125; from &quot;./minins/demoMixin&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    mixins: [demoMixin],</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以在当前vue文件中使用demoMixin.js文件下创建的内容(data/methods/生命周期函数等)</p>\n<span id=\"more\"></span>\n<h3 id=\"Mixin的合并规则\"><a href=\"#Mixin的合并规则\" class=\"headerlink\" title=\"Mixin的合并规则\"></a>Mixin的合并规则</h3><h5 id=\"1-如果时data函数的返回值对象\"><a href=\"#1-如果时data函数的返回值对象\" class=\"headerlink\" title=\"1.如果时data函数的返回值对象\"></a>1.如果时data函数的返回值对象</h5><ul>\n<li>默认情况下时会进行合并</li>\n<li>如果data返回值对象的属性发生了冲突，那么会保留vue组件自身的数据<h5 id=\"2-如果是生命周期钩子函数\"><a href=\"#2-如果是生命周期钩子函数\" class=\"headerlink\" title=\"2.如果是生命周期钩子函数\"></a>2.如果是生命周期钩子函数</h5></li>\n<li>生命周期的钩子函数会被合并到数组中，并依次执行，都会被调用<h5 id=\"3-值为对象的选项，如methods-watch-components等，会被合并为一个对象\"><a href=\"#3-值为对象的选项，如methods-watch-components等，会被合并为一个对象\" class=\"headerlink\" title=\"3.值为对象的选项，如methods/watch/components等，会被合并为一个对象\"></a>3.值为对象的选项，如methods/watch/components等，会被合并为一个对象</h5></li>\n<li>不同方法名可以合并</li>\n<li>如果方法名等发生了冲突，还是会优先保留自身组件的方法。</li>\n</ul>\n<h3 id=\"Mixin全局混入\"><a href=\"#Mixin全局混入\" class=\"headerlink\" title=\"Mixin全局混入\"></a>Mixin全局混入</h3><p>使用Mixin全局混入，这样可以在所有的组件中都能使用全局的Mixin。<br>一旦注册，那么全局混入的选项将会影响每一个组件。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const app = createApp(App);</span><br><span class=\"line\">app.mixin(&#123;</span><br><span class=\"line\">  created() &#123;</span><br><span class=\"line\">    console.log(&quot;global mixin created&quot;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","comments":true,"categories":[{"name":"vue","slug":"vue","permalink":"http://beichenzero.github.io/categories/vue/"}],"tags":[{"name":"mixin","slug":"mixin","permalink":"http://beichenzero.github.io/tags/mixin/"}]},{"title":"列表元素的过渡","date":"2022-05-07T12:44:29.000Z","path":"2022/05/07/vue-learn/列表元素的过渡/","content":"<h2 id=\"列表元素的过渡\"><a href=\"#列表元素的过渡\" class=\"headerlink\" title=\"列表元素的过渡\"></a>列表元素的过渡</h2><ul>\n<li>过渡元素一般时针对单个元素或组件的。<br>那么如果我们渲染的时一个列表，那么就要用到<code>&lt;transition-group&gt;</code>组件来完成  </li>\n</ul>\n<h5 id=\"使用transition-group的特点\"><a href=\"#使用transition-group的特点\" class=\"headerlink\" title=\"使用transition-group的特点\"></a>使用transition-group的特点</h5><ul>\n<li>默认情况下，它不会渲染一个元素的包裹器，但是你可以指定一个元素并以 tag attribute 进行渲染</li>\n<li>过渡模式不可用，因为我们不再相互切换特有的元素</li>\n<li>内部元素总是需要提供唯一的 key attribute 值</li>\n<li>CSS 过渡的类将会应用在内部的元素中，而不是这个组/容器本身</li>\n</ul>\n<h4 id=\"列表过渡的基本使用\"><a href=\"#列表过渡的基本使用\" class=\"headerlink\" title=\"列表过渡的基本使用\"></a>列表过渡的基本使用</h4><p>我们以一个小案例了解他的基本使用：添加/删除数字</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;addNum&quot;&gt;添加数字&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;removeNum&quot;&gt;删除数字&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;shuffleNum&quot;&gt;打乱顺序&lt;/button&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;transition-group tag=&quot;p&quot; name=&quot;beichen&quot;&gt;</span><br><span class=\"line\">      &lt;span v-for=&quot;item in numbers&quot; :key=&quot;item&quot; class=&quot;item&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">    &lt;/transition-group&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  import _ from &quot;lodash&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        numbers: [1, 2, 3, 4, 5, 6, 7, 8, 9],</span><br><span class=\"line\">        numberCounter: 10</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      addNum() &#123;</span><br><span class=\"line\">        this.numbers.splice(this.randomIndex(), 0, this.numberCounter++);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      removeNum() &#123;</span><br><span class=\"line\">        this.numbers.splice(this.randomIndex(), 1);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      shuffleNum() &#123;</span><br><span class=\"line\">        this.numbers = _.shuffle(this.numbers);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      randomIndex() &#123;</span><br><span class=\"line\">        return Math.floor(Math.random() * this.numbers.length)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">  .item &#123;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    margin-right: 10px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .beichen-enter-from,</span><br><span class=\"line\">  .beichen-leave-to &#123;</span><br><span class=\"line\">    opacity: 0;</span><br><span class=\"line\">    transform: translateY(30px);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .beichen-enter-active,</span><br><span class=\"line\">  .beichen-leave-active &#123;</span><br><span class=\"line\">    transition: all 1s ease;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .beichen-leave-active &#123;</span><br><span class=\"line\">    /* 脱离标准流，在移除一个元素开始时就开始移动后面的元素 */</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .beichen-move &#123;</span><br><span class=\"line\">    transition: transform 1s ease;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h4 id=\"列表的交错过渡案例\"><a href=\"#列表的交错过渡案例\" class=\"headerlink\" title=\"列表的交错过渡案例\"></a>列表的交错过渡案例</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;input v-model=&quot;keywork&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;transition-group tag=&quot;ul&quot; name=&quot;beichen&quot; :css=&quot;false&quot;</span><br><span class=\"line\">                      @before=&quot;beforEnter&quot;</span><br><span class=\"line\">                      @enter=&quot;enter&quot;</span><br><span class=\"line\">                      @leave=&quot;leave&quot;&gt;</span><br><span class=\"line\">      &lt;li class=&quot;ul_li&quot; v-for=&quot;(item, index) in showNames&quot; :key=&quot;item&quot; :data-index=&quot;index&quot;&gt;</span><br><span class=\"line\">        &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">      &lt;/li&gt;</span><br><span class=\"line\">    &lt;/transition-group&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  import gsap from &quot;gsap&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        names: [&quot;abc&quot;, &quot;james&quot;, &quot;kobe&quot;, &quot;beichen&quot;, &quot;nba&quot;, &quot;cba&quot;, &quot;haixia&quot;],</span><br><span class=\"line\">        keywork: &quot;&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">      showNames() &#123;</span><br><span class=\"line\">        //indexof会返回item在这其中的数组下标位置。如果没找到就是-1</span><br><span class=\"line\">        //不等于-1就说明在里面，则返回下标值且不等于-1为true，就展示。</span><br><span class=\"line\">        return this.names.filter(item =&gt; item.indexOf(this.keywork) !== -1);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        beforeEnter(el) &#123;</span><br><span class=\"line\">        el.style.opacity = 0;</span><br><span class=\"line\">        el.style.height = 0;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      enter(el, done) &#123;</span><br><span class=\"line\">        gsap.to(el, &#123;</span><br><span class=\"line\">          opacity: 1,</span><br><span class=\"line\">          height: &quot;1.5em&quot;,</span><br><span class=\"line\">          delay: el.dataset.index * 0.5,</span><br><span class=\"line\">          onComplete: done</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      leave(el, done) &#123;</span><br><span class=\"line\">        gsap.to(el, &#123;</span><br><span class=\"line\">          opacity: 0,</span><br><span class=\"line\">          height: 0,</span><br><span class=\"line\">          delay: el.dataset.index * 0.5,</span><br><span class=\"line\">          onComplete: done</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">  .beichen-enter-from,</span><br><span class=\"line\">  .beichen-leave-to &#123;</span><br><span class=\"line\">    opacity: 0;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .beichen-enter-active,</span><br><span class=\"line\">  .beichen-leave-active &#123;</span><br><span class=\"line\">    transition: opacity 1s ease;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n","comments":true,"categories":[{"name":"vue","slug":"vue","permalink":"http://beichenzero.github.io/categories/vue/"}],"tags":[{"name":"transition","slug":"transition","permalink":"http://beichenzero.github.io/tags/transition/"},{"name":"案例","slug":"案例","permalink":"http://beichenzero.github.io/tags/%E6%A1%88%E4%BE%8B/"}]},{"title":"animate和gsap的基本使用","date":"2022-05-07T12:43:07.000Z","path":"2022/05/07/vue-learn/animate和gsap的使用/","content":"<h2 id=\"安装Animate-css\"><a href=\"#安装Animate-css\" class=\"headerlink\" title=\"安装Animate.css\"></a>安装Animate.css</h2><ul>\n<li>yarn安装: <code>yarn add animate.css</code></li>\n<li>npm安装: <code>npm install animate.css</code></li>\n</ul>\n<h4 id=\"animate-css的导入\"><a href=\"#animate-css的导入\" class=\"headerlink\" title=\"animate.css的导入\"></a>animate.css的导入</h4><ul>\n<li>在main.js中直接引入: <code>import &quot;animate.css&quot;</code></li>\n</ul>\n<h4 id=\"animate-css的使用\"><a href=\"#animate-css的使用\" class=\"headerlink\" title=\"animate.css的使用\"></a>animate.css的使用</h4><p>1.用法一：直接使用animate库中定义的keyframes动画</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.beichen-enter-active &#123;</span><br><span class=\"line\">  animation: flip 1s ease;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.beichen-leave-active &#123;</span><br><span class=\"line\">  animation: flip 1s ease reverse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.用法二：直接使用animate库提供给我们的类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;transiton name=&quot;beichen&quot;</span><br><span class=\"line\">           enter-active-class=&quot;animate__animated animate__lightSpeedInRight&quot;</span><br><span class=\"line\">           leave-active-class=&quot;animate__animated animate__lishtSpeedOutRight&quot;&gt;</span><br><span class=\"line\">  &lt;h2 v-if=&quot;isShow&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">&lt;/transition&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>其中<code>animate__animated</code>类时必须要添加的</strong></p>\n<h2 id=\"gsap库\"><a href=\"#gsap库\" class=\"headerlink\" title=\"gsap库\"></a>gsap库</h2><h4 id=\"实现一些动画的库\"><a href=\"#实现一些动画的库\" class=\"headerlink\" title=\"实现一些动画的库\"></a>实现一些动画的库</h4><p>利用gsap来完成js最基本的动画</p>\n<ul>\n<li><p>安装gsap库<br><code>yarn add gsap</code> or <code>npm install gsap</code></p>\n</li>\n<li><p>导入gsap库<br><code>import gsap from &quot;gsap&quot;;</code></p>\n</li>\n</ul>\n<p>transition组件提供给我们的JavaScript钩子：</p>\n<ul>\n<li>@before-enter=”beforeEnter”</li>\n<li>@enter=”enter”</li>\n<li>@after-enter=”afterEnter”</li>\n<li>@before-leave=”beforeLeave”</li>\n<li>@leave=”leave”</li>\n<li>@after-leave=”afterLeave”<span id=\"more\"></span></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">      //生命周期的钩子</span><br><span class=\"line\">      beforeEnter(el) &#123;</span><br><span class=\"line\">        console.log(&quot;beforEnter&quot;);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      enter(el, done) &#123;</span><br><span class=\"line\">        console.log(&quot;enter&quot;);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      afterEnter(el) &#123;</span><br><span class=\"line\">        console.log(&quot;afterEnter&quot;);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      beforeLeave(el) &#123;</span><br><span class=\"line\">        console.log(&quot;beforLeave&quot;);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      leave(el, done) &#123;</span><br><span class=\"line\">        console.log(&quot;Leave&quot;);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      afterLeave(el) &#123;</span><br><span class=\"line\">        console.log(&quot;afterLeave&quot;);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>当我们使用JavaScript来执行过渡动画时，需要进行 done 回调，否则它们将会被同步调用，过渡会立即完成</strong><br><code>enter</code>和<code>leave</code>钩子时有<code>el(target)</code>和<code>done</code>参数的,其余的钩子只有el参数。</p>\n<h4 id=\"css-”false”-属性\"><a href=\"#css-”false”-属性\" class=\"headerlink\" title=\"css=”false” 属性\"></a>css=”false” 属性</h4><p>添加<code>:css=&quot;false&quot;</code>会让VUE跳过css的检测，不仅能提高性能，还能避免css的规则的影响。</p>\n<h4 id=\"gsap库的使用\"><a href=\"#gsap库的使用\" class=\"headerlink\" title=\"gsap库的使用\"></a>gsap库的使用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;transition @enter=&quot;enter&quot;</span><br><span class=\"line\">                @leave=&quot;leave&quot;</span><br><span class=\"line\">                :css=&quot;false&quot;&gt;</span><br><span class=\"line\">      &lt;h2 class=&quot;title&quot; v-if=&quot;isShow&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;/transition&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">      //生命周期的钩子</span><br><span class=\"line\">      enter(el, done) &#123;</span><br><span class=\"line\">        console.log(&quot;enter&quot;);</span><br><span class=\"line\">        gsap.from(el, &#123;</span><br><span class=\"line\">          scale: 0,</span><br><span class=\"line\">          /* 等同于transfrom: straslate(200px) */</span><br><span class=\"line\">          //相关的文档在官网中有，可以查得到</span><br><span class=\"line\">          x: this.distance,</span><br><span class=\"line\">          /* 动画执行的时间,默认是的0.5s */</span><br><span class=\"line\">          // duration: 1,</span><br><span class=\"line\">          //在动画过渡完成后回调done，表示执行结束</span><br><span class=\"line\">          onComplete: done</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      leave(el, done) &#123;</span><br><span class=\"line\">        console.log(&quot;Leave&quot;);</span><br><span class=\"line\">        gsap.to(el, &#123;</span><br><span class=\"line\">          scale: 0,</span><br><span class=\"line\">          x: this.distance,</span><br><span class=\"line\">          onComplete: done</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"gsap实现数字递增的一个小案例\"><a href=\"#gsap实现数字递增的一个小案例\" class=\"headerlink\" title=\"gsap实现数字递增的一个小案例\"></a>gsap实现数字递增的一个小案例</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;input type=&quot;number&quot; step=&quot;100&quot; v-model=&quot;counter&quot;&gt;</span><br><span class=\"line\">    &lt;h2&gt;当前计数:&#123;&#123;ShowCounter&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;h2&gt;当前计数:&#123;&#123;ShowNumber.toFixed(0)&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  import gsap from &quot;gsap&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        counter: 0,</span><br><span class=\"line\">        ShowNumber: 0</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">      ShowCounter() &#123;</span><br><span class=\"line\">        return this.ShowNumber.toFixed(0);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    watch: &#123;</span><br><span class=\"line\">      counter(NewValue) &#123;</span><br><span class=\"line\">        gsap.to(this, &#123;</span><br><span class=\"line\">          // duration: 0.5,</span><br><span class=\"line\">          ShowNumber: NewValue</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n","comments":true,"categories":[{"name":"vue","slug":"vue","permalink":"http://beichenzero.github.io/categories/vue/"}],"tags":[{"name":"animate","slug":"animate","permalink":"http://beichenzero.github.io/tags/animate/"},{"name":"gsap","slug":"gsap","permalink":"http://beichenzero.github.io/tags/gsap/"}]},{"title":"动画的基本使用","date":"2022-05-07T12:40:37.000Z","path":"2022/05/07/vue-learn/动画的基本使用/","content":"<h2 id=\"过渡动画class\"><a href=\"#过渡动画class\" class=\"headerlink\" title=\"过渡动画class\"></a>过渡动画class</h2><ul>\n<li><span style=\"color:red\">v-enter-from</span>:定义进入过过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。</li>\n<li><span style=\"color:red\">v-enter-active</span>定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。</li>\n<li><span style=\"color:red\">v-enter-to</span>定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 v-enter-from 被移除)，在过渡/动画完成之后移除</li>\n<li><span style=\"color:red\">v-leave-from</span>定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除</li>\n<li><span style=\"color:red\">v-leave-active</span>定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。</li>\n<li><span style=\"color:red\">v-leave-to</span>离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 v-leave-from 被删除)，在过渡/动画完成之后移除。</li>\n</ul>\n<p><strong>如果我们在transition中没有添加name属性,那么他的默认前缀就v-,如果添加了name属性，以name=”beichen”为例，那么所有的class会以beichen-开头。</strong></p>\n<ul>\n<li>如果同时设置了animationend和transitionend，我们可以在transition中设置type属性为transition和animation来明确告知vue监听的类型。<h4 id=\"显示指定动画时间\"><a href=\"#显示指定动画时间\" class=\"headerlink\" title=\"显示指定动画时间\"></a>显示指定动画时间</h4></li>\n<li>显示指定动画时间可以通过duration属性。<br>1.number类型：同时设置进入和离开的时间<br>ex：<code>:duration: 1000</code><br>2.object类型：分别设置进入和离开的时间<br>ex：<code>:duration: &#123;enter: 1000, leave: 800&#125;</code></li>\n</ul>\n<h4 id=\"过渡模式的mode\"><a href=\"#过渡模式的mode\" class=\"headerlink\" title=\"过渡模式的mode\"></a>过渡模式的<code>mode</code></h4><ul>\n<li><code>in-out</code>:新元素先进行过渡，完成之后当前元素过渡离开(<strong>先进后出</strong>)</li>\n<li><code>out-in</code>:当前元素先进行过渡，完成之后新元素过渡进入(<strong>先出后进</strong>)</li>\n</ul>\n<h4 id=\"appear属性\"><a href=\"#appear属性\" class=\"headerlink\" title=\"appear属性\"></a><code>appear</code>属性</h4><ul>\n<li>用来设置在加载界面/初次渲染时也是有动画显示的。</li>\n</ul>\n","comments":true,"categories":[{"name":"vue","slug":"vue","permalink":"http://beichenzero.github.io/categories/vue/"}],"tags":[{"name":"transiton","slug":"transiton","permalink":"http://beichenzero.github.io/tags/transiton/"}]},{"title":"slot","date":"2022-03-05T12:56:19.000Z","path":"2022/03/05/vue-learn/slot/","content":"<h3 id=\"渲染作用域\"><a href=\"#渲染作用域\" class=\"headerlink\" title=\"渲染作用域\"></a>渲染作用域</h3><blockquote>\n<p>父级模板里面的所有内容都是在父级作用域中编译的<br>子模板里面的所有内容都是在子作用域中编译的</p>\n</blockquote>\n<h3 id=\"作用域插槽\"><a href=\"#作用域插槽\" class=\"headerlink\" title=\"作用域插槽\"></a>作用域插槽</h3><ul>\n<li>我们希望插槽<strong>可以访问到子组件中的内容</strong>是非常重要的</li>\n<li>1.在App.vue中定义好数据</li>\n<li>2.传递给ShowNames组件中</li>\n<li>3.ShowNames组件中遍历name数组的数据</li>\n<li>4.定义插槽的prop</li>\n<li>5.通过v-slot:default的方式获取到slot的props</li>\n<li>6.使用slotProps中的item和index<br>代码如下<br>ShowNames.vue</li>\n</ul>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;template v-for=&quot;(item, index) in name&quot;&gt;</span><br><span class=\"line\">      &lt;slot :item=&quot;item&quot; :index=&quot;index&quot;&gt;&lt;/slot&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\">      name: &#123;</span><br><span class=\"line\">        type: Array,</span><br><span class=\"line\">        default: () =&gt; []</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>App.vue</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;show-names :name=&quot;names&quot;&gt;</span><br><span class=\"line\">      &lt;template v-slot=&quot;slotProps&quot;&gt;</span><br><span class=\"line\">        &lt;button&gt;&#123;&#123;slotProps.item&#125;&#125;&lt;/button&gt;</span><br><span class=\"line\">      &lt;/template&gt;</span><br><span class=\"line\">    &lt;/show-names&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  import ShowNames from &quot;./ShowNames.vue&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">      ShowNames</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        names: [&#x27;北辰&#x27;, &#x27;beichen&#x27;, &#x27;海霞&#x27;],</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>独占默认插槽缩写</strong></p>\n</blockquote>\n<blockquote>\n<p>独占：只使用一个插槽，但是可以有多个插槽<br>默认：是指slot默认的name是default</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;template v-for=&quot;(item, index) in name&quot;&gt;</span><br><span class=\"line\">      &lt;slot :item=&quot;item&quot; :index=&quot;index&quot;&gt;&lt;/slot&gt;</span><br><span class=\"line\">      // 这里的可以定义多个插槽</span><br><span class=\"line\">      &lt;slot name=&quot;beichen&quot;&gt;&lt;/slot&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<p>正确使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;show-names :name=&quot;names&quot; v-slot=&quot;slotProps&quot;&gt;</span><br><span class=\"line\">  // 在使用时只能有一个插槽</span><br><span class=\"line\">  &lt;p&gt;&#123;&#123;slotProps.item&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;/show-names&gt;</span><br></pre></td></tr></table></figure>\n<p>错误使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;show-names :name=&quot;names&quot; v-slot=&quot;slotProps&quot;&gt;</span><br><span class=\"line\">  &lt;p&gt;&#123;&#123;slotProps.item&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">  // 这里就是定义了两个插槽，他会报错</span><br><span class=\"line\">  &lt;template #beichen&gt;</span><br><span class=\"line\">    &lt;h2&gt;具名插槽的使用&lt;/h2&gt;</span><br><span class=\"line\">  &lt;/template&gt;</span><br><span class=\"line\">&lt;/show-names&gt;</span><br></pre></td></tr></table></figure>\n\n<p>或是不使用<strong>独占默认插槽缩写</strong>，则可以写成如下这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;show-names :name=&quot;names&quot;&gt;</span><br><span class=\"line\">  &lt;template v-slot=&quot;slotProps&quot;&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;&#123;slotProps.item&#125;&#125;&lt;/p&gt;      </span><br><span class=\"line\">  &lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;template #beichen&gt;</span><br><span class=\"line\">    &lt;h2&gt;具名插槽的使用&lt;/h2&gt;</span><br><span class=\"line\">  &lt;/template&gt;</span><br><span class=\"line\">&lt;/show-names&gt;</span><br></pre></td></tr></table></figure>\n","comments":true,"categories":[{"name":"vue","slug":"vue","permalink":"http://beichenzero.github.io/categories/vue/"}],"tags":[{"name":"slot","slug":"slot","permalink":"http://beichenzero.github.io/tags/slot/"}]},{"title":"attribute和$attrs","date":"2022-03-04T11:42:39.000Z","path":"2022/03/04/vue-easy/attribute和attrs/","content":"<h2 id=\"inherirAttrs\"><a href=\"#inherirAttrs\" class=\"headerlink\" title=\"inherirAttrs\"></a>inherirAttrs</h2><blockquote>\n<p>Attribute继承问题<br>首先，attribute是我们在父组件中定义了<span style=\"color: red\">非prop的Attribute</span>，该属性没有定义对应的props或者emits。</p>\n</blockquote>\n<ul>\n<li>常见的包括class,style,id属性等<br>例如我们在父组件中定义了如下的值：<br><code>&lt;show-message class=&quot;beichen&quot; id=&quot;beichenzero&quot;&gt;&lt;/show-message&gt;</code><br>这里的<code>class=&quot;beichen&quot;</code>和<code>id=&quot;beichenzero&quot;</code>就是<span style=\"color: red\">非prop的Attribute</span><br>如果我们的子组件中包含有根组件,例如<code>&lt;div&gt;&lt;/div&gt;</code>。<br>运行项目时，我们就会看到它自动变成<code>&lt;div class=&quot;beichen&quot; id=&quot;beichenzero&quot;&gt;&lt;/div&gt;</code>,添加了class属性和id属性。</li>\n</ul>\n<p>当我们不想出现这种特殊的情况是，我们可以在子组件中添加：<br><code>inheritAttrs: flase,</code>代码，这就等于时禁用了，<code>inheritAttrs</code>默认的值时true。</p>\n<span id=\"more\"></span>\n<h2 id=\"attrs\"><a href=\"#attrs\" class=\"headerlink\" title=\"$attrs\"></a>$attrs</h2><p><strong><span style=\"color: red\">$attrs</span>可以访问所有的非props的attribute。</strong><br>案例:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">App.vue</span><br><span class=\"line\">&lt;show-message class=&quot;beichen&quot; id=&quot;beichenzero&quot; title=&quot;title&quot; content=&quot;content&quot;&gt;&lt;/show-message&gt;</span><br><span class=\"line\">ShowMessage.vue</span><br><span class=\"line\">&lt;h2 :class=&quot;$attrs.class&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/h2&gt;</span><br></pre></td></tr></table></figure>\n<p>在ShowMessage.vue中禁用了<code>inheritAttrs: false</code>.<br>页面显示效果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2 class=&quot;beichen&quot;&gt;title&lt;/h2&gt;</span><br></pre></td></tr></table></figure>","comments":true,"categories":[{"name":"vue","slug":"vue","permalink":"http://beichenzero.github.io/categories/vue/"}],"tags":[{"name":"attribute","slug":"attribute","permalink":"http://beichenzero.github.io/tags/attribute/"},{"name":"attrs","slug":"attrs","permalink":"http://beichenzero.github.io/tags/attrs/"}]},{"title":"vue-商品切换案例","date":"2022-03-03T10:50:43.000Z","path":"2022/03/03/vue-easy/vue-商品切换案例/","content":"<h2 id=\"商品切换小案例\"><a href=\"#商品切换小案例\" class=\"headerlink\" title=\"商品切换小案例\"></a>商品切换小案例</h2><blockquote>\n<p><strong>思路</strong></p>\n</blockquote>\n<p>1.父组件中定义<code>titles</code>数组<br>2.利用父传子的方式将<code>titles</code>数组传给子组件<br>3.子组件中接收，利用<code>v-for</code>指令遍历数组，动态绑定key。<br>4.添加class，动态绑定class，使点击的那个标题处于活跃状态，利用index和自己定义的currentIndex的关系。<br>5.<code>props</code>可以限定父组件传过来的值使什么，并添加默认值。<br>6.通过<code>@click</code>的方式，将<code>index</code>的值通过子传父传递父组件，同时在点击事件传值的同时将index的值赋给currentsIndex。<br>7.定义<code>contents</code>数组，并再次定义currentIndex，默认值为0。<br>8.最后监听子组件的传递并执行函数titleCLick，将index的值也赋值给currentIndex，目的是为了让title和content的变化是一致的。  </p>\n<ul>\n<li>代码如下</li>\n</ul>\n<span id=\"more\"></span>\n<p>App.vue</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;tab-control :title=&quot;titles&quot; @titleClick=&quot;titleClick&quot;&gt;&lt;/tab-control&gt;</span><br><span class=\"line\">    &lt;h2&gt;&#123;&#123;contents[currentIndex]&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  import TabControl from &quot;./TabControl.vue&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">      TabControl</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        titles: [&quot;衣服&quot;, &quot;鞋子&quot;, &quot;裤子&quot;],</span><br><span class=\"line\">        contents: [&quot;衣服内容&quot;, &quot;鞋子内容&quot;, &quot;裤子内容&quot;],</span><br><span class=\"line\">        currentIndex: 0</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      titleClick(index) &#123; </span><br><span class=\"line\">        this.currentIndex = index;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>TabControl.vue</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;tab-control&quot;&gt;</span><br><span class=\"line\">    &lt;div  v-for=&quot;(item ,index) in title&quot;</span><br><span class=\"line\">          :key=&quot;index&quot;</span><br><span class=\"line\">          class=&quot;tab-control-item&quot;</span><br><span class=\"line\">          :class=&quot;&#123;active: currentIndex === index&#125;&quot;</span><br><span class=\"line\">          @click=&quot;itemClick(index)&quot;&gt;</span><br><span class=\"line\">      &lt;span&gt;&#123;&#123;item&#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    // 可以通过 emits 选项来定义组件可触发的事件</span><br><span class=\"line\">    emits: [&quot;titleClick&quot;],</span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\">      title: &#123;</span><br><span class=\"line\">        type: Array,</span><br><span class=\"line\">        default() &#123;</span><br><span class=\"line\">          return []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        currentIndex: 0,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      itemClick(index) &#123;</span><br><span class=\"line\">        this.currentIndex = index;</span><br><span class=\"line\">        this.$emit(&quot;titleClick&quot;, index)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">  .tab-control &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .tab-control-item&#123;</span><br><span class=\"line\">    flex: 1;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .tab-control-item.active &#123;</span><br><span class=\"line\">    color: red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .tab-control-item.active span &#123;</span><br><span class=\"line\">    border-bottom: 3px solid red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>以上代码均在vue-cli创建的项目中完成，主要看思路。</p>\n","comments":true,"categories":[{"name":"vue","slug":"vue","permalink":"http://beichenzero.github.io/categories/vue/"}],"tags":[{"name":"vue案例","slug":"vue案例","permalink":"http://beichenzero.github.io/tags/vue%E6%A1%88%E4%BE%8B/"}]},{"title":"vue-组件传值","date":"2022-03-03T10:43:30.000Z","path":"2022/03/03/vue-easy/vue-组件传值/","content":"<h3 id=\"禁用Attribute继承和多根节点\"><a href=\"#禁用Attribute继承和多根节点\" class=\"headerlink\" title=\"禁用Attribute继承和多根节点\"></a>禁用Attribute继承和多根节点</h3><blockquote>\n<p><strong>父(组件)传子(组件)时</strong></p>\n</blockquote>\n<p>父组件中有<code>class</code>、<code>id</code>等元素的时候<br>在需要传值给子组件时<br>子组件中:<br><code>&lt;h2 :=&quot;$attrs&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/h2&gt;&lt;h2 :class=&quot;$attrs.class&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/h2&gt;</code><br>父组件中:<br><code>&lt;show-message class=&quot;beichen&quot; id=&quot;beichenzero&quot; title=&quot;哈哈哈&quot; content=&quot;嘿嘿嘿&quot;&gt;&lt;/show-message</code></p>\n<blockquote>\n<p><strong>子组件传递信息给父组件</strong></p>\n</blockquote>\n<p>逻辑关系：<br>在子组件中定义需要传递的name -&gt; 通过<code>$emit</code>来传递。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 一般时用数组传递信息</span><br><span class=\"line\">emits: [&quot;add&quot;, &quot;sub&quot;, &quot;add_N&quot;],</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  increment() &#123;</span><br><span class=\"line\">    console.log(&quot;+1&quot;);</span><br><span class=\"line\">    // 触发事件</span><br><span class=\"line\">    this.$emit(&quot;add&quot;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  decrement() &#123;</span><br><span class=\"line\">    console.log(&quot;-1&quot;);</span><br><span class=\"line\">    // 触发时间</span><br><span class=\"line\">    this.$emit(&quot;sub&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>这里我时通过按钮的点击时间触发函数的方式进行值传递。<br>同时在父组件中通过<code>v-on</code>或是<code>@</code>的语法糖来监听  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">template代码：</span><br><span class=\"line\">&lt;h2&gt;当前计数:&#123;&#123;counter&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">&lt;counter-operation @add=&quot;add()&quot; @sub=&quot;sub()&quot;&gt;&lt;/counter-operation&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">script代码：</span><br><span class=\"line\">data() &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    counter: 0,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  add() &#123;</span><br><span class=\"line\">    this.counter++;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  sub() &#123;</span><br><span class=\"line\">    this.counter--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><em><strong>问题1：子组件使用this.$emit(‘父组件事件名’,参数)，父组件接收参数报undifined</strong></em></p>\n<ul>\n<li>解决办法：<br>去掉父组件监听后使用方法的方法名的括号，子组件未识别。<br>错误案例(<strong>以下代码为父组件中的</strong>)：<br><code>&lt;counter-operation @addN=&quot;addNum()&quot;&gt; &lt;/counter-operation&gt;</code><br><span style=\"color: red\">去掉addNum后面的括号就好了</span></li>\n</ul>\n","comments":true,"categories":[{"name":"vue","slug":"vue","permalink":"http://beichenzero.github.io/categories/vue/"}],"tags":[{"name":"组件传值","slug":"组件传值","permalink":"http://beichenzero.github.io/tags/%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/"}]},{"title":"vue-watch","date":"2022-02-28T14:33:41.000Z","path":"2022/02/28/vue-easy/vue-watch/","content":"<h2 id=\"1-监听器-侦听器的基本使用watch\"><a href=\"#1-监听器-侦听器的基本使用watch\" class=\"headerlink\" title=\"1. 监听器/侦听器的基本使用watch\"></a>1. 监听器/侦听器的基本使用watch</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">    // message是需要监听的data中的属性名称</span><br><span class=\"line\">    // newValue是变化后的新值</span><br><span class=\"line\">    // oldValue是变化前的旧值</span><br><span class=\"line\">    message: function(newValue, oldValue) &#123;</span><br><span class=\"line\">        // console.log(&quot;新值&quot;, newValue, &quot;旧值&quot; ,oldValue);</span><br><span class=\"line\">        this.queryAnwser();</span><br><span class=\"line\">        // 监听到变化后就执行搜索答案的方法</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其他的代码就没有放上去了，这里主要说明watch的用法。</p>\n<h3 id=\"2-监听器的配置选项\"><a href=\"#2-监听器的配置选项\" class=\"headerlink\" title=\"2. 监听器的配置选项\"></a>2. 监听器的配置选项</h3><p>默认情况下侦听器只会侦听数据本身的改变（对于内部发生的改变是监听不到的）<br>深度侦听(deep) / 立即执行(immediate)（一定会执行一次）<br><code>depp: true</code> 用于表示进行深度监听。<br><code>immediate: true</code> 用于表示在加载时就执行一次，无论被监听的值是否改变。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  // 语法糖</span><br><span class=\"line\">  info(newValue, oldValue)&#123;</span><br><span class=\"line\">    console.log(&quot;new&quot;,newValue, &quot;old&quot;,oldValue);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 普通写法</span><br><span class=\"line\">  info: &#123;</span><br><span class=\"line\">    handler: function(newInfo, oldInfo)&#123;</span><br><span class=\"line\">      console.log(&quot;new&quot;,newInfo, &quot;old&quot;,oldInfo);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    deep: true,//确认为深度监听</span><br><span class=\"line\">    immediate: true, //立即执行</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","comments":true,"categories":[{"name":"vue","slug":"vue","permalink":"http://beichenzero.github.io/categories/vue/"}],"tags":[{"name":"watch","slug":"watch","permalink":"http://beichenzero.github.io/tags/watch/"}]},{"title":"electron出使用","date":"2022-02-28T14:28:01.000Z","path":"2022/02/28/随笔/electron出使用/","content":"<h1 id=\"利用脚手架创建一个新的项目\"><a href=\"#利用脚手架创建一个新的项目\" class=\"headerlink\" title=\"利用脚手架创建一个新的项目\"></a>利用脚手架创建一个新的项目</h1><ol>\n<li>创建一个electron的基础模板<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm create electron-app my-app</span><br></pre></td></tr></table></figure></li>\n<li>进入项目目录下<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd my-app</span><br></pre></td></tr></table></figure></li>\n<li>运行项目<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm start</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"打包程序\"><a href=\"#打包程序\" class=\"headerlink\" title=\"打包程序\"></a>打包程序</h2><ol>\n<li>打包程序，变为可运行exe程序<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run make</span><br></pre></td></tr></table></figure></li>\n<li>打包程序，变为可运行exe程序<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dist</span><br></pre></td></tr></table></figure></li>\n</ol>\n","comments":true,"categories":[{"name":"随笔","slug":"随笔","permalink":"http://beichenzero.github.io/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"electron","slug":"electron","permalink":"http://beichenzero.github.io/tags/electron/"}]},{"title":"markdown常用语法","date":"2022-02-28T14:26:21.000Z","path":"2022/02/28/随笔/markdown常用语法/","content":"<p>本文主要记录markdown的基本语法，更多详细的语法请查看<a href=\"http://markdown.p2hp.com/basic-syntax/\">markdown官网</a></p>\n<h2 id=\"一、标题等级\"><a href=\"#一、标题等级\" class=\"headerlink\" title=\"一、标题等级\"></a>一、标题等级</h2><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a><strong>代码</strong></h3>  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 一级标题</span><br><span class=\"line\">## 二级标题</span><br><span class=\"line\">### 三级标题</span><br><span class=\"line\">#### 四级标题</span><br><span class=\"line\">##### 五级标题</span><br><span class=\"line\">###### 六级标题</span><br></pre></td></tr></table></figure>\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a><strong>效果</strong></h3><blockquote>\n<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a>四级标题</h4><h5 id=\"五级标题\"><a href=\"#五级标题\" class=\"headerlink\" title=\"五级标题\"></a>五级标题</h5><h6 id=\"六级标题\"><a href=\"#六级标题\" class=\"headerlink\" title=\"六级标题\"></a>六级标题</h6></blockquote>\n<p>\n<span id=\"more\"></span>\n\n</p><h2 id=\"二、字体\"><a href=\"#二、字体\" class=\"headerlink\" title=\"二、字体\"></a>二、字体</h2><h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a><strong>代码</strong></h3><ol>\n<li>加粗<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__加粗__</span><br><span class=\"line\">**加粗**</span><br></pre></td></tr></table></figure></li>\n<li>斜体<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_斜体_</span><br><span class=\"line\">*斜体*</span><br></pre></td></tr></table></figure></li>\n<li>斜体加粗<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">___斜体加粗___</span><br><span class=\"line\">***斜体加粗***</span><br></pre></td></tr></table></figure></li>\n<li>删除线<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~~删除线~~</span><br></pre></td></tr></table></figure>\n<h3 id=\"效果-1\"><a href=\"#效果-1\" class=\"headerlink\" title=\"效果\"></a><strong>效果</strong></h3><blockquote>\n<p><strong>加粗</strong><br><br><em>斜体</em><br><br><em><strong>斜体加粗</strong></em><br><br><del>删除线</del><br></p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"三、块引用\"><a href=\"#三、块引用\" class=\"headerlink\" title=\"三、块引用\"></a>三、块引用</h2><h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a><strong>代码</strong></h3><ul>\n<li><em>这里可以有好多级，具体看你自己怎么用</em><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 第一级</span><br><span class=\"line\">&gt;&gt; 第二级</span><br><span class=\"line\">&gt;&gt;&gt; 第三级</span><br><span class=\"line\">&gt;&gt;&gt;&gt; ....</span><br></pre></td></tr></table></figure>\n<h3 id=\"效果-2\"><a href=\"#效果-2\" class=\"headerlink\" title=\"效果\"></a><strong>效果</strong></h3><blockquote>\n<p>第一级</p>\n<blockquote>\n<p>第二级</p>\n<blockquote>\n<p>第三级</p>\n<blockquote>\n<p>….</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"四、列表\"><a href=\"#四、列表\" class=\"headerlink\" title=\"四、列表\"></a>四、列表</h2><h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a><strong>代码</strong></h3><ul>\n<li>有序列表<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 内容 </span><br><span class=\"line\">2. 内容</span><br><span class=\"line\">3. 内容</span><br></pre></td></tr></table></figure></li>\n<li>无序列表<br></li>\n</ul>\n<p><em>其中无序列表用+、-、*都可以</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ 内容 </span><br><span class=\"line\">- 内容</span><br><span class=\"line\">* 内容</span><br></pre></td></tr></table></figure>\n<h2 id=\"效果-3\"><a href=\"#效果-3\" class=\"headerlink\" title=\"效果\"></a><strong>效果</strong></h2><blockquote>\n<p>有序列表</p>\n<blockquote>\n<ol>\n<li>内容 </li>\n<li>内容</li>\n<li>内容</li>\n</ol>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>无序列表</p>\n<blockquote>\n<ul>\n<li>内容 </li>\n</ul>\n<ul>\n<li>内容</li>\n</ul>\n<ul>\n<li>内容</li>\n</ul>\n</blockquote>\n</blockquote>\n<h2 id=\"五、分割线\"><a href=\"#五、分割线\" class=\"headerlink\" title=\"五、分割线\"></a>五、分割线</h2><h3 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a><strong>代码</strong></h3><ul>\n<li>三个*或-都可以。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">***</span><br></pre></td></tr></table></figure>\n<h3 id=\"效果-4\"><a href=\"#效果-4\" class=\"headerlink\" title=\"效果\"></a><strong>效果</strong></h3></li>\n</ul>\n<hr>\n<hr>\n<h2 id=\"六、图片\"><a href=\"#六、图片\" class=\"headerlink\" title=\"六、图片\"></a>六、图片</h2><h3 id=\"代码-5\"><a href=\"#代码-5\" class=\"headerlink\" title=\"代码\"></a><strong>代码</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![图片alt](图片地址 &#x27;图片标题&#x27;)</span><br><span class=\"line\">&lt;img src=&#x27;https://haixia-1303842518.cos.ap-guangzhou.myqcloud.com/%E6%B5%B7%E9%9C%9E/head-photo/-4ad73ad5fcaad4be(1).jpg&#x27; width=&quot;200px&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">![beichenzero_photo](https://haixia-1303842518.cos.ap-guangzhou.myqcloud.com/%E6%B5%B7%E9%9C%9E/head-photo/-4ad73ad5fcaad4be(1).jpg &#x27;beichenzero&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">alt为替代文本</span><br><span class=\"line\">图片地址为路径或是图片的网络地址</span><br><span class=\"line\">图片标题就是图片的标题</span><br></pre></td></tr></table></figure>\n<h3 id=\"效果-5\"><a href=\"#效果-5\" class=\"headerlink\" title=\"效果\"></a><strong>效果</strong></h3><ul>\n<li>这里有两种插入图片的方式，第一种是直接插入HTML的语法，使用img标签，可以修改图片的尺寸以及各种属性。</li>\n<li>第二种是使用markdown自身的语法插入。<br><img src=\"https://haixia-1303842518.cos.ap-guangzhou.myqcloud.com/%E6%B5%B7%E9%9C%9E/head-photo/-4ad73ad5fcaad4be(1).jpg\" width=\"200px\"></li>\n</ul>\n<p><img src=\"https://haixia-1303842518.cos.ap-guangzhou.myqcloud.com/%E6%B5%B7%E9%9C%9E/head-photo/-4ad73ad5fcaad4be(1).jpg\" alt=\"beichenzero_photo\"></p>\n<h2 id=\"七、超链接\"><a href=\"#七、超链接\" class=\"headerlink\" title=\"七、超链接\"></a>七、超链接</h2><h3 id=\"代码-6\"><a href=\"#代码-6\" class=\"headerlink\" title=\"代码\"></a><strong>代码</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. &lt;a href=&quot;https://beichenzero.netlify.app/&quot; alt=&quot;&quot;&gt;地址一:北辰个人博客&lt;/a&gt;</span><br><span class=\"line\">2. [地址二:北辰个人博客](https://beichenzero.netlify.app/ &quot;beichenzero&quot;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"效果-6\"><a href=\"#效果-6\" class=\"headerlink\" title=\"效果\"></a><strong>效果</strong></h3><ol>\n<li><a href=\"https://beichenzero.netlify.app/\" alt>地址一:北辰个人博客</a><br></li>\n<li><a href=\"https://beichenzero.netlify.app/\" title=\"beichenzero\">地址二:北辰个人博客</a></li>\n</ol>\n<h2 id=\"八、表格\"><a href=\"#八、表格\" class=\"headerlink\" title=\"八、表格\"></a>八、表格</h2><h3 id=\"代码-7\"><a href=\"#代码-7\" class=\"headerlink\" title=\"代码\"></a><strong>代码</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">表头  |  表头  |  表头</span><br><span class=\"line\">:---: | :---: | :---:</span><br><span class=\"line\">内容  |  内容  |  内容</span><br><span class=\"line\">内容  |  内容  |  内容</span><br><span class=\"line\"></span><br><span class=\"line\">:---:表示居中</span><br><span class=\"line\">:---表示左对齐(默认左对齐)</span><br><span class=\"line\">---:表示右对齐</span><br></pre></td></tr></table></figure>\n<h3 id=\"效果-7\"><a href=\"#效果-7\" class=\"headerlink\" title=\"效果\"></a><strong>效果</strong></h3><table>\n<thead>\n<tr>\n<th align=\"center\">表头</th>\n<th align=\"center\">表头</th>\n<th align=\"center\">表头</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">内容</td>\n<td align=\"center\">内容</td>\n<td align=\"center\">内容</td>\n</tr>\n<tr>\n<td align=\"center\">内容</td>\n<td align=\"center\">内容</td>\n<td align=\"center\">内容</td>\n</tr>\n</tbody></table>\n<h2 id=\"九、代码\"><a href=\"#九、代码\" class=\"headerlink\" title=\"九、代码\"></a>九、代码</h2><h3 id=\"代码-8\"><a href=\"#代码-8\" class=\"headerlink\" title=\"代码\"></a><strong>代码</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`代码内容`</span><br><span class=\"line\">`&lt;a href=&#x27;https://beichenzero.github.io&#x27;&gt;北辰个人博客&lt;/a&gt;`</span><br><span class=\"line\">`...`</span><br></pre></td></tr></table></figure>\n<h3 id=\"效果-8\"><a href=\"#效果-8\" class=\"headerlink\" title=\"效果\"></a><strong>效果</strong></h3><p><code>&lt;a href=&#39;https://beichenzero.github.io&#39;&gt;北辰个人博客&lt;/a&gt;</code><br><code>&lt;img src=&quot;图片地址&quot; alt=&quot;&quot;&gt;</code></p>\n<h2 id=\"十、任务列表\"><a href=\"#十、任务列表\" class=\"headerlink\" title=\"十、任务列表\"></a>十、任务列表</h2><ul>\n<li><input checked disabled type=\"checkbox\"> 第一项任务</li>\n<li><input disabled type=\"checkbox\"> 第二项任务</li>\n<li><input disabled type=\"checkbox\"> 第三项任务</li>\n</ul>\n","comments":true,"categories":[{"name":"学习","slug":"学习","permalink":"http://beichenzero.github.io/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://beichenzero.github.io/tags/markdown/"}]},{"title":"v-model的基本使用","date":"2022-02-28T14:22:23.000Z","path":"2022/02/28/vue-easy/v-model的基本使用/","content":"<h3 id=\"v-model的基本使用\"><a href=\"#v-model的基本使用\" class=\"headerlink\" title=\"v-model的基本使用\"></a>v-model的基本使用</h3><ul>\n<li>v-model三种常见的修饰符默认是string</li>\n<li>number的修饰符主要是将string转化成number类型</li>\n<li>trim修饰符主要是去除内容前后的空格<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;input type=&quot;text&quot; v-model.trim=&quot;message&quot;&gt;</span><br><span class=\"line\">  // &lt;input type=&quot;text&quot; v-model.number=&quot;message&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">  &lt;button @click=&quot;showType()&quot;&gt;查看类型&lt;/button&gt;</span><br><span class=\"line\">  &lt;button @click=&quot;showCon()&quot;&gt;查看内容&lt;/button&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  showType() &#123;</span><br><span class=\"line\">    console.log(this.message, typeof this.message);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  showCon() &#123;</span><br><span class=\"line\">    console.log(this.message);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<strong>仅截取部分核心代码</strong><br>EX:<br>217498daowh   值为217498      类型为number<br>njdkhaw3431   值为njdkhaw3431 类型为string</li>\n</ul>\n","comments":true,"categories":[{"name":"vue","slug":"vue","permalink":"http://beichenzero.github.io/categories/vue/"}],"tags":[{"name":"model","slug":"model","permalink":"http://beichenzero.github.io/tags/model/"}]},{"title":"vite的基本使用","date":"2022-02-28T14:21:27.000Z","path":"2022/02/28/随笔/vite的基本使用/","content":"<h2 id=\"vite安装\"><a href=\"#vite安装\" class=\"headerlink\" title=\"vite安装\"></a>vite安装</h2><blockquote>\n<p><strong>1.安装</strong></p>\n</blockquote>\n<ul>\n<li>全局安装<br><code>npm install vite -g</code></li>\n<li>局部安装<br><code>npm install vite -D</code><br>npx vite</li>\n</ul>\n<h2 id=\"vite对css的处理\"><a href=\"#vite对css的处理\" class=\"headerlink\" title=\"vite对css的处理\"></a>vite对css的处理</h2><p><strong>默认对css的加载</strong></p>\n<ul>\n<li>1.安装less<br><code>npm install less -D</code>  </li>\n<li>2.安装postcss<br><code>npm install postcss -D</code><br>还需要安装<br><code>npm install postcss-preset-env -D</code>  </li>\n</ul>\n<span id=\"more\"></span>\n<p>配置<em>postcss.config.js</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.export = &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    require(&quot;postcss-preset-env&quot;),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>vite对ts文件也是支持的</strong></p>\n<p><strong>vite对vue的支持</strong></p>\n<ul>\n<li>安装:<br><code>npm install vue@next -D</code></li>\n</ul>\n<p><em><strong>vite对vue提供第一优先级支持</strong></em></p>\n<ul>\n<li>1.Vue3单文件组件支持：<br><code>@vitejs/plugin-vue</code></li>\n<li>2.Vue3 JSX支持：<br><code>@vitejs/plugin-vue-jsx</code></li>\n<li>3.Vue2支持：<br><code>underfin/vite-plugin-vue2</code></li>\n</ul>\n<p>配置<em>vite.config.js</em>  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const vue = require(&#x27;@vitejs/plugin-vue&#x27;)</span><br><span class=\"line\">//导出的是一个函数</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    vue()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>报错后继续安装：<br><code>npm install @vue/compiler-sfc -D</code>  </p>\n<blockquote>\n<p>打包  </p>\n</blockquote>\n<p><code>npx vite build</code><br>在package.json中配置script  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;serve&quot;: &quot;vite&quot;,</span><br><span class=\"line\">&quot;build&quot;: &quot;vite build&quot;,</span><br><span class=\"line\">&quot;preview&quot;: &quot;vite preview&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"vite的脚手架\"><a href=\"#vite的脚手架\" class=\"headerlink\" title=\"vite的脚手架\"></a>vite的脚手架</h2><p><em><strong>支持多种语言的框架</strong></em> </p>\n<ul>\n<li><p>安装：<br><code>npm install @vitejs/create-app -g/-D</code>  </p>\n</li>\n<li><p>创建项目：<br><code>create-app &quot;name&quot;</code>  </p>\n</li>\n<li><p>安装依赖：<br><code>npm install</code>  </p>\n</li>\n</ul>\n<h2 id=\"ESbuild解析\"><a href=\"#ESbuild解析\" class=\"headerlink\" title=\"ESbuild解析\"></a>ESbuild解析</h2><blockquote>\n<p>1.特点</p>\n</blockquote>\n<ul>\n<li>超快的构建速度<a style=\"color: red\">(极快)</a>，并且不需要缓存</li>\n<li>支持ES6和CommonJS的模块化</li>\n<li>支持ES6的Tree Shaking</li>\n<li>支持Go，JavaScript的API</li>\n<li>支持TypeScript,JSX等语法编译</li>\n<li>支持sourceMap</li>\n<li>支持代码压缩</li>\n<li>支持扩展其他插件</li>\n</ul>\n<blockquote>\n<p>2.本身使用Go语言编写的，可以直接转化为机器码，无需经过字节码(ESbuild这么快？)</p>\n</blockquote>\n<blockquote>\n<p>3.ESbuild可以充分利用CPU的多内核，尽可能让他们饱和运行</p>\n</blockquote>\n<blockquote>\n<p>4.ES6的所有代码都是从零去编写的，没有借用外部的包</p>\n</blockquote>\n","comments":true,"categories":[{"name":"vite","slug":"vite","permalink":"http://beichenzero.github.io/categories/vite/"}],"tags":[{"name":"vite","slug":"vite","permalink":"http://beichenzero.github.io/tags/vite/"}]},{"title":"nvm的安装-windows","date":"2022-02-28T14:20:33.000Z","path":"2022/02/28/随笔/nvm的安装-windows/","content":"<h2 id=\"下载nvm的安装包\"><a href=\"#下载nvm的安装包\" class=\"headerlink\" title=\"下载nvm的安装包\"></a>下载nvm的安装包</h2><p><strong>一定要下载1.1.7版本的nvm！</strong><br><strong>(目前最新是1.1.9版本,可以使用1.1.9,也比较稳定)</strong></p>\n<ul>\n<li>事先需要卸载原有的node.js<br>下载地址：<a href=\"https://github.com/coreybutler/nvm-windows/releases\">https://github.com/coreybutler/nvm-windows/releases</a></li>\n<li>下载后双击exe文件安装</li>\n<li>安装后在环境变量中会默认看到<br><img src=\"/images/photo_01.png\"></li>\n<li>用户变量和系统变量中都会有</li>\n</ul>\n<p>对了下载完找到nvm的安装目录，打开setting.txt文件，添加上下面两个配置(选做)：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm node_mirror https://npm.taobao.org/mirrors/node/</span><br><span class=\"line\">nvm npm_mirror https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span> \n<!-- 截断 -->\n<ul>\n<li><code>nvm -v</code> 检验是否成功<br><img src=\"/images/photo_02.png\"><!-- <img src=\"../images/photo_02.png\"> --></li>\n</ul>\n<h2 id=\"安装node\"><a href=\"#安装node\" class=\"headerlink\" title=\"安装node\"></a>安装node</h2><ol>\n<li>查看版本 <code>nvm list available</code> </li>\n<li>下载node(选择你需要的版本下载即可)  </li>\n</ol>\n<p><strong>下载最新版本<code>nvm list latest</code></strong></p>\n<blockquote>\n<p>拿<code>16.11.0</code>版本作为例子<code>nvm install 16.11.0</code></p>\n</blockquote>\n<ol>\n<li>紧接着上面的语句在终端输入：<code>nvm use 16.11.0</code></li>\n</ol>\n<p><strong>install完了node版本后，一定要use你所安装的版本，一定！一定！一定！</strong>  </p>\n<h2 id=\"nvm常用命令\"><a href=\"#nvm常用命令\" class=\"headerlink\" title=\"nvm常用命令\"></a>nvm常用命令</h2><table>\n<thead>\n<tr>\n<th>Tables</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>nvm list</td>\n<td align=\"center\">查看已经安装的版本</td>\n</tr>\n<tr>\n<td>nvm list installed</td>\n<td align=\"center\">查看已经安装的版本</td>\n</tr>\n<tr>\n<td>nvm list available</td>\n<td align=\"center\">查看网络可以安装的版本</td>\n</tr>\n<tr>\n<td>nvm arch</td>\n<td align=\"center\">查看当前系统的位数和当前nodejs的位数</td>\n</tr>\n<tr>\n<td>nvm install [arch]</td>\n<td align=\"center\">安装制定版本的node 并且可以指定平台 version 版本号 arch 平台</td>\n</tr>\n<tr>\n<td>nvm on</td>\n<td align=\"center\">打开nodejs版本控制</td>\n</tr>\n<tr>\n<td>nvm off</td>\n<td align=\"center\">关闭nodejs版本控制</td>\n</tr>\n<tr>\n<td>nvm uninstall</td>\n<td align=\"center\">卸载制定的版本</td>\n</tr>\n<tr>\n<td>nvm use [version] [arch]</td>\n<td align=\"center\">切换制定的node版本和位数</td>\n</tr>\n<tr>\n<td>nvm version</td>\n<td align=\"center\">查看当前的版本</td>\n</tr>\n</tbody></table>\n<p><em>其中 [arch]表示系统位数，直接用64/32代替就好了</em></p>\n","comments":true,"categories":[{"name":"学习","slug":"学习","permalink":"http://beichenzero.github.io/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"nvm","slug":"nvm","permalink":"http://beichenzero.github.io/tags/nvm/"}]},{"title":"vue-组件通信","date":"2022-02-28T14:19:28.000Z","path":"2022/02/28/vue-learn/vue-组件通信/","content":"<h2 id=\"父子组件之间通信的方式\"><a href=\"#父子组件之间通信的方式\" class=\"headerlink\" title=\"父子组件之间通信的方式\"></a>父子组件之间通信的方式</h2><blockquote>\n<p>1.<strong>父组件(Patent)传递给子组件(Child)</strong>  </p>\n</blockquote>\n<p>通过<span style=\"color: red\"><strong>props</strong></span>属性传递  </p>\n<blockquote>\n<p>2.<strong>子组件传递给父组件</strong>  </p>\n</blockquote>\n<p>通过<span style=\"color: red\"><strong>$emit Events</strong></span></p>\n<h2 id=\"传值时props可以是数组也可以是对象\"><a href=\"#传值时props可以是数组也可以是对象\" class=\"headerlink\" title=\"传值时props可以是数组也可以是对象\"></a>传值时props可以是数组也可以是对象</h2><blockquote>\n<p><strong>1.传值对象————数组</strong>  </p>\n</blockquote>\n<p><em><strong>一般不用这种方式</strong></em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default &#123;</span><br><span class=\"line\">  props: [</span><br><span class=\"line\">    &#x27;title&#x27;,</span><br><span class=\"line\">    &#x27;content&#x27;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n<blockquote>\n<p><strong>2.传值对象————对象</strong>  </p>\n</blockquote>\n<p><em><strong>这种方式用的人比较多，其中<code>require</code>和<code>default</code>一般只用写一个就可以了</strong></em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props: &#123;</span><br><span class=\"line\">      title: String,</span><br><span class=\"line\">      content: &#123;</span><br><span class=\"line\">        // 指定类型</span><br><span class=\"line\">        type: Number,</span><br><span class=\"line\">        // 是否为必传值</span><br><span class=\"line\">        require: true,</span><br><span class=\"line\">        // 默认值</span><br><span class=\"line\">        default: 123,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"细节一之type的类型可以是那些？\"><a href=\"#细节一之type的类型可以是那些？\" class=\"headerlink\" title=\"细节一之type的类型可以是那些？\"></a>细节一之type的类型可以是那些？</h2><blockquote>\n<p>type的类型值:</p>\n<blockquote>\n<ul>\n<li>String</li>\n<li>Number</li>\n<li>Boolean</li>\n<li>Array</li>\n<li>Object</li>\n<li>Date</li>\n<li>Function</li>\n<li>Symbol</li>\n</ul>\n</blockquote>\n</blockquote>\n<h2 id=\"细节二之对象类型的其他写法\"><a href=\"#细节二之对象类型的其他写法\" class=\"headerlink\" title=\"细节二之对象类型的其他写法\"></a>细节二之对象类型的其他写法</h2><blockquote>\n<p>1.带有默认值的对象</p>\n</blockquote>\n<ul>\n<li><strong><span style=\"color: green\">正确写法</span></strong><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props: &#123;</span><br><span class=\"line\">  propA: &#123;</span><br><span class=\"line\">    type: Object,</span><br><span class=\"line\">    // 对象或数组默认值必须从一个工厂函数获取</span><br><span class=\"line\">    default() &#123;</span><br><span class=\"line\">      return &#123;name: &quot;beichen&quot;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></li>\n<li><strong><span style=\"color: red\">错误写法</span></strong><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props: &#123;</span><br><span class=\"line\">  propA: &#123;</span><br><span class=\"line\">    type: Object,</span><br><span class=\"line\">    default: &#123;name: &quot;beichen&quot;&#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></li>\n<li><strong>二者写法的区别</strong><br>当默认值是一个<code>defaule()</code>函数时，在多次调用<code>propA</code>时，default函数会返回三个对象，这时修改单个对象中的<code>name</code>值时不会影响另外两个对象的值<br>而当默认值时一个对象时，在多次调用<code>propA</code>时，他们的值都指向同一个地址的<code>name</code>,当修改其中一个对象的name值时，另外两个对象的name值也会跟这修改，会造成数据紊乱。</li>\n</ul>\n<blockquote>\n<p>2.自定义验证函数</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props: &#123;</span><br><span class=\"line\">  propB: &#123;</span><br><span class=\"line\">    validator(value) &#123;</span><br><span class=\"line\">      // 这个值必须是匹配下列字符串中的一个</span><br><span class=\"line\">      return [&quot;success&quot;, &quot;failed&quot;, &quot;beichenzero&quot;].includes(value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>这里表示当传过来的值进行一个判断，查看这个值是否是我们定义数组中的其中一个值，如果是则返回这个值，否则返回false就会报一个警告，表示你传的值不是我们期望的值。</p>\n<h2 id=\"细节三之Props的大小写命名的问题\"><a href=\"#细节三之Props的大小写命名的问题\" class=\"headerlink\" title=\"细节三之Props的大小写命名的问题\"></a>细节三之Props的大小写命名的问题</h2><p><span style=\"color: red\"><strong>Html中的attribute大小写命名时不敏感的</strong></span>，所以浏览器会把所有大写字符解释为小写字符<br>这就以为着你在使用DOM中的模板时，<code>camelCase(驼峰命名法)</code>的prop名需要使用其等价的<code>kekab-case(短横线分隔命名)</code><br><em><strong>但是在vue文件中时不需要的，因为在vue中的模板会被vue-loader解析，而vue-loader会帮我们处理好大小写命名的问题。</strong></em></p>\n","comments":true,"categories":[{"name":"vue","slug":"vue","permalink":"http://beichenzero.github.io/categories/vue/"}],"tags":[{"name":"vue-components","slug":"vue-components","permalink":"http://beichenzero.github.io/tags/vue-components/"}]},{"title":"vue初期学习笔记","date":"2022-02-28T14:18:27.000Z","path":"2022/02/28/vue-easy/vue初期学习笔记/","content":"<h3 id=\"编程范式\"><a href=\"#编程范式\" class=\"headerlink\" title=\"编程范式\"></a>编程范式</h3><p><strong>①命令式编程 (how to do)</strong><br>  EX:js/jquery<br><strong>②声明式编程 what to do  框架(机器)帮助完成</strong><br>    EX:vue/react/angular</p>\n<h3 id=\"MVC——modle-view-controller-MVC\"><a href=\"#MVC——modle-view-controller-MVC\" class=\"headerlink\" title=\"MVC——modle view controller(MVC)\"></a>MVC——modle view controller(MVC)</h3><p>modle: 操作的数据<br>view: body里面的内容<br>controller: script里面的内容</p>\n<h3 id=\"MVVM——modle-view-view-modle-MVVC\"><a href=\"#MVVM——modle-view-view-modle-MVVC\" class=\"headerlink\" title=\"MVVM——modle view view_modle(MVVC)\"></a>MVVM——modle view view_modle(MVVC)</h3><p>view: DOM           template<br>view_modle: VUE<br>modle: plain js object    data、methods…</p>\n<span id=\"more\"></span>\n\n<h3 id=\"条件-列表渲染-diff算法\"><a href=\"#条件-列表渲染-diff算法\" class=\"headerlink\" title=\"条件-列表渲染-diff算法\"></a>条件-列表渲染-diff算法</h3><p>diff算法就是将旧的VNodes和新的Vnodes进行对比的过程，然后观察需要变换那些东西。</p>\n<h3 id=\"在用v-for便利数组时，如果是要更新-添加-删除-数组的内容\"><a href=\"#在用v-for便利数组时，如果是要更新-添加-删除-数组的内容\" class=\"headerlink\" title=\"在用v-for便利数组时，如果是要更新(添加/删除)数组的内容\"></a>在用v-for便利数组时，如果是要更新(添加/删除)数组的内容</h3><p><strong>v-for进行渲染的时候，我们通常会给元素或者组件绑定一个key属性</strong><br>没有加key的时候，vue的源码会执行patchUnkeyedChildren<br>三步：123<br>在加了key的时候，vue源码会执行patchKeyedChildren<br>五步：12345</p>\n<h3 id=\"计算属性-computed-和方法-methods-的区别\"><a href=\"#计算属性-computed-和方法-methods-的区别\" class=\"headerlink\" title=\"计算属性(computed)和方法(methods)的区别\"></a>计算属性(computed)和方法(methods)的区别</h3><p><strong>计算属性(computed)和方法(methods)的差别不大，但是计算属性是有缓存的。</strong><br>分别console打印三次，computed只会出现一次，methods会打印三次。<br>data中的数据是响应式的，当修改了data中打印在界面上的数据时，会重新渲染，也就是说如上的methods中的打印在再次执行多次。而computed还是只会执行一次.</p>\n<p><strong>computed的get和set方法</strong></p>\n<ul>\n<li>普通写法:<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fullName: &#123;</span><br><span class=\"line\">  get: function()&#123;</span><br><span class=\"line\">    return this.firstName+&quot; &quot;+this.lastName;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  set: function(newValue)&#123;</span><br><span class=\"line\">    console.log(newValue);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>语法糖:<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fullName: function()&#123;</span><br><span class=\"line\">  return this.firstName+&quot; &quot;+this.lastName;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure></li>\n</ul>\n","comments":true,"categories":[{"name":"vue","slug":"vue","permalink":"http://beichenzero.github.io/categories/vue/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://beichenzero.github.io/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"vue源码的打包","date":"2022-02-28T14:17:15.000Z","path":"2022/02/28/vue-easy/vue源码的打包/","content":"<h3 id=\"vue源码打包\"><a href=\"#vue源码打包\" class=\"headerlink\" title=\"vue源码打包\"></a>vue源码打包</h3><ul>\n<li>1.导入<br><code>import &#123; createApp &#125; from &quot;vue&quot;</code></li>\n<li>2.安装<br><code>npm install vue@next</code><br>ERROR in ./src/vue/App/vue 1:0 Module parse failed : Unexpected token错误时，在安装：<br><code>npm install vue-loader -D</code><br>并在webpack.config.js中配置(配置方法同其他的loader一样)<br>继续安装：<br><code>npm install @vue/compiler-sfc -D</code><br>在webpack.config.js中继续配置：<br>引入：<br><code>const &#123; VueLoaderPlugin &#125; = require(&quot;vue-loader/dist/index&quot;)</code><br>插件配置：<br><code>new VueLoaderPlugin()</code></li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"vue打包后不同的版本解析\"><a href=\"#vue打包后不同的版本解析\" class=\"headerlink\" title=\"vue打包后不同的版本解析\"></a>vue打包后不同的版本解析</h3><ul>\n<li>1.vue.global.js  <ul>\n<li>通过浏览器的<code>&lt;script src=&quot;...&quot;&gt;</code>直接使用</li>\n<li>通过CDN引入和下载的Vue版本会暴露一个全局的Vue来使用</li>\n</ul>\n</li>\n<li>2.vue.esm-browser.js<ul>\n<li>通过原生ES模块导入使用(浏览器中通过<code>&lt;script type=&quot;module&quot;&gt;</code>来使用)</li>\n</ul>\n</li>\n<li>3.vue.esm-bundle.js<ul>\n<li>用于webpack，rollup和parcel等构建工具</li>\n<li>构建工具中默认的是vue,runtime.esm-bundle.js</li>\n<li>如果我们需要解析模板template，那么需要手动指定vue.esm-bundle.js</li>\n</ul>\n</li>\n<li>4.vue.cjs.js<ul>\n<li>服务器端渲染使用</li>\n<li>通过requires()和node.js中使用</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"webpack-deb-server\"><a href=\"#webpack-deb-server\" class=\"headerlink\" title=\"webpack-deb-server\"></a>webpack-deb-server</h3><ul>\n<li>安装<br><code>npm install webpack-dev-server -D</code>  </li>\n<li>配置<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">  contentBase: &quot;./build&quot;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n在package.json的script中<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;build&quot;: &quot;webpack --watch&quot;,</span><br><span class=\"line\">    &quot;serve&quot;: &quot;webpack serve&quot;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n使用<code>npm run serve</code>执行，就可以开启一个本地服务。  </li>\n</ul>\n<p><em><strong>webpack-dev-server在编译之后<span color=\"red\">不会写入到任何文件</span>,而是将bundle文件保留在内存中</strong></em></p>\n<h3 id=\"HMR-模块热替换\"><a href=\"#HMR-模块热替换\" class=\"headerlink\" title=\"HMR(模块热替换)\"></a>HMR(模块热替换)</h3><p>Hot Module Replacement——模块热替换<br>模块热替换是指在 应用程序运行中，替换，添加，删除模块，而无需重新刷新整个界面</p>\n<ul>\n<li><p><strong>如何使用HMR？</strong><br>默认情况下，webpack-dev-server已经支持HMR，直接开启就是了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target: &quot;web&quot;,//hot的伴随设置 </span><br><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">  hot: true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>指定使用HMR的模块</strong><br>if(module.hot) {<br>module.hot.accept(“./util.js”, () =&gt; {<br>  console.log(“util更新了);<br>})<br>}</p>\n</li>\n<li><p>1.port设置监听端口，默认情况下时8080</p>\n</li>\n<li><p>2.open是否打开浏览器，默认时false</p>\n</li>\n<li><p>3.compress是否为静态文件开启gzip compression,默认时false</p>\n</li>\n<li><p>4.<strong>Proxy</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">  contentBase: &quot;./public&quot;,</span><br><span class=\"line\">  // 模块热替换HMR</span><br><span class=\"line\">  hot: true,</span><br><span class=\"line\">  host: &quot;0.0.0.0&quot;,</span><br><span class=\"line\">  port: 8888,</span><br><span class=\"line\">  open: true, // 在package.json中配置--open</span><br><span class=\"line\">  compress: true, //压缩</span><br><span class=\"line\">  Proxy: &#123;</span><br><span class=\"line\">    // 开启本地代理</span><br><span class=\"line\">    // 本地解决跨域的问题</span><br><span class=\"line\">    &quot;/api&quot;: &#123;</span><br><span class=\"line\">      target: &quot;url&quot;,</span><br><span class=\"line\">      pathRewrite: &#123;</span><br><span class=\"line\">        &quot;^/api&quot;: &quot;&quot;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      secure: false,// 不懂的文档去找，或者ppt</span><br><span class=\"line\">      changeOrigin: true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"extensions和alias配置\"><a href=\"#extensions和alias配置\" class=\"headerlink\" title=\"extensions和alias配置\"></a>extensions和alias配置</h3><ul>\n<li><strong>extensions</strong>是解析到文件时自动添加扩展名<br>默认值是[‘.wasm’, ‘.mjs’, ‘.js’, ‘.json’]  </li>\n<li><strong>alias</strong>是给某些常见的路径起一个别名<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">  extensions: [&#x27;.jsx&#x27;, &#x27;.ts&#x27;, &#x27;.vue&#x27;],</span><br><span class=\"line\">  alias: &#123;</span><br><span class=\"line\">    &quot;js&quot;: path.resolve(__dirname, &quot;./src/js&quot;),</span><br><span class=\"line\">    &quot;@&quot;: path.resolve(__dirname, &quot;./sr&quot;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"开发-生产环境的分离\"><a href=\"#开发-生产环境的分离\" class=\"headerlink\" title=\"开发/生产环境的分离\"></a>开发/生产环境的分离</h2>建立三个文件放在主文件夹下的config文件夹下，<blockquote>\n<p>开发<br>common<br>生产</p>\n</blockquote>\n</li>\n</ul>\n<p>合并文件<br><code>npm install webpack-merge -D</code><br>在生产/开发的配置js文件中导入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123; merge &#125; = require(&quot;webpack-merge&quot;);</span><br><span class=\"line\">const commenConfig = require(&#x27;公共配置js文件的地址&#x27;)</span><br></pre></td></tr></table></figure>\n<p>合并语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = merge(CommonConfig, &#123;</span><br><span class=\"line\">  //生产/开发环境的部分配置。</span><br><span class=\"line\">  xxx: &quot;&quot;,</span><br><span class=\"line\">  xxx: &quot;&quot;,</span><br><span class=\"line\">  xxx: &quot;&quot;,</span><br><span class=\"line\">  xxx: &quot;&quot;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><em><strong>同时在package.json的脚本里面也需要配置.</strong></em><br>添加<code>--config url</code></p>\n","comments":true,"categories":[{"name":"vue","slug":"vue","permalink":"http://beichenzero.github.io/categories/vue/"}],"tags":[]}]